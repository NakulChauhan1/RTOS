
Button_and_Led_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005284  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005454  08005454  00015454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e0  080054e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054e8  080054e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080054f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e48  20000010  08005500  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e58  08005500  00022e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001308c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b51  00000000  00000000  000330cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  00035c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ff0  00000000  00000000  00036d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002284a  00000000  00000000  00037d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d8f2  00000000  00000000  0005a592  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6f11  00000000  00000000  00067e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ed95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a8  00000000  00000000  0013ee10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800543c 	.word	0x0800543c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800543c 	.word	0x0800543c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fb01 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f847 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8dd 	bl	80006dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f8b1 	bl	8000688 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  ret = xTaskCreate(button_task_handler, "BUTTON TASK", 500, "BUTTON TASK running\n\n", 2, &task1_handler_address);
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	2302      	movs	r3, #2
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <main+0x84>)
 8000532:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000536:	4918      	ldr	r1, [pc, #96]	; (8000598 <main+0x88>)
 8000538:	4818      	ldr	r0, [pc, #96]	; (800059c <main+0x8c>)
 800053a:	f003 f879 	bl	8003630 <xTaskCreate>
 800053e:	6178      	str	r0, [r7, #20]
  configASSERT(ret == pdPASS);  
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d009      	beq.n	800055a <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	613b      	str	r3, [r7, #16]
 8000558:	e7fe      	b.n	8000558 <main+0x48>

  ret = xTaskCreate(led_task_handler, "LED TASK", 500, "LED TASK running\n\n", 2, &task2_handler_address);
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2302      	movs	r3, #2
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0x90>)
 8000564:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000568:	490e      	ldr	r1, [pc, #56]	; (80005a4 <main+0x94>)
 800056a:	480f      	ldr	r0, [pc, #60]	; (80005a8 <main+0x98>)
 800056c:	f003 f860 	bl	8003630 <xTaskCreate>
 8000570:	6178      	str	r0, [r7, #20]
  configASSERT(ret == pdPASS);
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d009      	beq.n	800058c <main+0x7c>
 8000578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800057c:	f383 8811 	msr	BASEPRI, r3
 8000580:	f3bf 8f6f 	isb	sy
 8000584:	f3bf 8f4f 	dsb	sy
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	e7fe      	b.n	800058a <main+0x7a>

  //Start the Schedular
  vTaskStartScheduler();
 800058c:	f003 f994 	bl	80038b8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x80>
 8000592:	bf00      	nop
 8000594:	08005454 	.word	0x08005454
 8000598:	0800546c 	.word	0x0800546c
 800059c:	080007a1 	.word	0x080007a1
 80005a0:	08005478 	.word	0x08005478
 80005a4:	0800548c 	.word	0x0800548c
 80005a8:	08000801 	.word	0x08000801

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2234      	movs	r2, #52	; 0x34
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 ff35 	bl	800542a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <SystemClock_Config+0xd4>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a29      	ldr	r2, [pc, #164]	; (8000680 <SystemClock_Config+0xd4>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xd4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <SystemClock_Config+0xd8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f8:	4a22      	ldr	r2, [pc, #136]	; (8000684 <SystemClock_Config+0xd8>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <SystemClock_Config+0xd8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	2310      	movs	r3, #16
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061c:	2300      	movs	r3, #0
 800061e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000620:	2310      	movs	r3, #16
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000624:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000628:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800062a:	2304      	movs	r3, #4
 800062c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800062e:	2302      	movs	r3, #2
 8000630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000632:	2302      	movs	r3, #2
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4618      	mov	r0, r3
 800063c:	f001 f8fa 	bl	8001834 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000646:	f000 f93b 	bl	80008c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2302      	movs	r3, #2
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2102      	movs	r1, #2
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fdf8 	bl	800125c <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000672:	f000 f925 	bl	80008c0 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f001 fd50 	bl	8002164 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ca:	f000 f8f9 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20012d94 	.word	0x20012d94
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_GPIO_Init+0xb4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a25      	ldr	r2, [pc, #148]	; (8000790 <MX_GPIO_Init+0xb4>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_GPIO_Init+0xb4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_GPIO_Init+0xb4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <MX_GPIO_Init+0xb4>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_GPIO_Init+0xb4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_GPIO_Init+0xb4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a17      	ldr	r2, [pc, #92]	; (8000790 <MX_GPIO_Init+0xb4>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_GPIO_Init+0xb4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_GPIO_Init+0xb8>)
 800074c:	f000 fd52 	bl	80011f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000754:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_GPIO_Init+0xbc>)
 8000758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_GPIO_Init+0xc0>)
 8000766:	f000 fb9b 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800076a:	2320      	movs	r3, #32
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	4619      	mov	r1, r3
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_GPIO_Init+0xb8>)
 8000782:	f000 fb8d 	bl	8000ea0 <HAL_GPIO_Init>

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000
 8000798:	10210000 	.word	0x10210000
 800079c:	40020800 	.word	0x40020800

080007a0 <button_task_handler>:

/* USER CODE BEGIN 4 */

static void button_task_handler(void * parameter)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	6078      	str	r0, [r7, #4]
    while(1)
    {
      

      //BY DEFAULT BUTTON PIN IS CONNECTED TO HIGH
      if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80007a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ac:	4811      	ldr	r0, [pc, #68]	; (80007f4 <button_task_handler+0x54>)
 80007ae:	f000 fd09 	bl	80011c4 <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f7      	bne.n	80007a8 <button_task_handler+0x8>
      {

        HAL_UART_AbortTransmit(&huart2);
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <button_task_handler+0x58>)
 80007ba:	f001 fdb9 	bl	8002330 <HAL_UART_AbortTransmit>
      if (HAL_UART_Transmit(&huart2, (uint8_t *)parameter, 21, 100) != HAL_OK)
 80007be:	2364      	movs	r3, #100	; 0x64
 80007c0:	2215      	movs	r2, #21
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <button_task_handler+0x58>)
 80007c6:	f001 fd1a 	bl	80021fe <HAL_UART_Transmit>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <button_task_handler+0x34>
      {
        Error_Handler();
 80007d0:	f000 f876 	bl	80008c0 <Error_Handler>
      }
      HAL_Delay(1000);
 80007d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d8:	f000 f9e2 	bl	8000ba0 <HAL_Delay>
          //BUTTON PRESSED

          //DELAY TO AVOID BUTTON DEBOUNCING
          rtos_delay(100);
 80007dc:	2064      	movs	r0, #100	; 0x64
 80007de:	f000 f83d 	bl	800085c <rtos_delay>
          xTaskNotify(led_task_handler, 0, eNoAction);
 80007e2:	2300      	movs	r3, #0
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2300      	movs	r3, #0
 80007e8:	2200      	movs	r2, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <button_task_handler+0x5c>)
 80007ee:	f003 fd75 	bl	80042dc <xTaskGenericNotify>
      if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80007f2:	e7d9      	b.n	80007a8 <button_task_handler+0x8>
 80007f4:	40020800 	.word	0x40020800
 80007f8:	20012d94 	.word	0x20012d94
 80007fc:	08000801 	.word	0x08000801

08000800 <led_task_handler>:
      }
    }
}

static void led_task_handler(void * parameter)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af02      	add	r7, sp, #8
 8000806:	6078      	str	r0, [r7, #4]
    while(1)
    {
      //wait untill notification event is not received from button task
      if (xTaskNotifyWait( 0, 0, NULL, portMAX_DELAY ) == pdTRUE)
 8000808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2300      	movs	r3, #0
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	2000      	movs	r0, #0
 8000816:	f003 fce3 	bl	80041e0 <xTaskGenericNotifyWait>
 800081a:	4603      	mov	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d1f3      	bne.n	8000808 <led_task_handler+0x8>
      {
          //NOTIFICATION IS RECEIVED
          HAL_UART_AbortTransmit(&huart2);
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <led_task_handler+0x50>)
 8000822:	f001 fd85 	bl	8002330 <HAL_UART_AbortTransmit>
          if (HAL_UART_Transmit(&huart2, "Notication received\n", 20, 100) != HAL_OK)
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	2214      	movs	r2, #20
 800082a:	490a      	ldr	r1, [pc, #40]	; (8000854 <led_task_handler+0x54>)
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <led_task_handler+0x50>)
 800082e:	f001 fce6 	bl	80021fe <HAL_UART_Transmit>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <led_task_handler+0x3c>
          {
            Error_Handler();
 8000838:	f000 f842 	bl	80008c0 <Error_Handler>
          }
          HAL_Delay(1000);
 800083c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000840:	f000 f9ae 	bl	8000ba0 <HAL_Delay>

          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000844:	2120      	movs	r1, #32
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <led_task_handler+0x58>)
 8000848:	f000 fced 	bl	8001226 <HAL_GPIO_TogglePin>
      if (xTaskNotifyWait( 0, 0, NULL, portMAX_DELAY ) == pdTRUE)
 800084c:	e7dc      	b.n	8000808 <led_task_handler+0x8>
 800084e:	bf00      	nop
 8000850:	20012d94 	.word	0x20012d94
 8000854:	08005498 	.word	0x08005498
 8000858:	40020000 	.word	0x40020000

0800085c <rtos_delay>:
    }
}


static void rtos_delay(uint32_t ms_delay)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t current_tick_count = xTaskGetTickCount();
 8000864:	f003 f91e 	bl	8003aa4 <xTaskGetTickCount>
 8000868:	60f8      	str	r0, [r7, #12]
  uint32_t tick_count_after_delay = current_tick_count + (ms_delay * configTICK_RATE_HZ)/1000;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000870:	fb02 f303 	mul.w	r3, r2, r3
 8000874:	4a08      	ldr	r2, [pc, #32]	; (8000898 <rtos_delay+0x3c>)
 8000876:	fba2 2303 	umull	r2, r3, r2, r3
 800087a:	099b      	lsrs	r3, r3, #6
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	4413      	add	r3, r2
 8000880:	60bb      	str	r3, [r7, #8]

  while(xTaskGetTickCount() != tick_count_after_delay);
 8000882:	bf00      	nop
 8000884:	f003 f90e 	bl	8003aa4 <xTaskGetTickCount>
 8000888:	4602      	mov	r2, r0
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	4293      	cmp	r3, r2
 800088e:	d1f9      	bne.n	8000884 <rtos_delay+0x28>

}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	10624dd3 	.word	0x10624dd3

0800089c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d101      	bne.n	80008b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ae:	f000 f957 	bl	8000b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40001000 	.word	0x40001000

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <Error_Handler+0x6>

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <HAL_MspInit+0x4c>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x4c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a19      	ldr	r2, [pc, #100]	; (800099c <HAL_UART_MspInit+0x84>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d12b      	bne.n	8000992 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_UART_MspInit+0x88>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <HAL_UART_MspInit+0x88>)
 8000944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_UART_MspInit+0x88>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_UART_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <HAL_UART_MspInit+0x88>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_UART_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000972:	230c      	movs	r3, #12
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000982:	2307      	movs	r3, #7
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <HAL_UART_MspInit+0x8c>)
 800098e:	f000 fa87 	bl	8000ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40004400 	.word	0x40004400
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000

080009a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	2036      	movs	r0, #54	; 0x36
 80009be:	f000 f9c9 	bl	8000d54 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009c2:	2036      	movs	r0, #54	; 0x36
 80009c4:	f000 f9e2 	bl	8000d8c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <HAL_InitTick+0xa4>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a1e      	ldr	r2, [pc, #120]	; (8000a4c <HAL_InitTick+0xa4>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_InitTick+0xa4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e4:	f107 0210 	add.w	r2, r7, #16
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fd4e 	bl	8001490 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009f4:	f000 fd24 	bl	8001440 <HAL_RCC_GetPCLK1Freq>
 80009f8:	4603      	mov	r3, r0
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a00:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a02:	fba2 2303 	umull	r2, r3, r2, r3
 8000a06:	0c9b      	lsrs	r3, r3, #18
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_InitTick+0xac>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <HAL_InitTick+0xb0>)
 8000a10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <HAL_InitTick+0xac>)
 8000a14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_InitTick+0xac>)
 8000a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_InitTick+0xac>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_InitTick+0xac>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <HAL_InitTick+0xac>)
 8000a2e:	f001 f95b 	bl	8001ce8 <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d104      	bne.n	8000a42 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a38:	4806      	ldr	r0, [pc, #24]	; (8000a54 <HAL_InitTick+0xac>)
 8000a3a:	f001 f98a 	bl	8001d52 <HAL_TIM_Base_Start_IT>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	431bde83 	.word	0x431bde83
 8000a54:	20012dd4 	.word	0x20012dd4
 8000a58:	40001000 	.word	0x40001000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <TIM6_DAC_IRQHandler+0x10>)
 8000a8e:	f001 f984 	bl	8001d9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20012dd4 	.word	0x20012dd4

08000a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <SystemInit+0x28>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <SystemInit+0x28>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SystemInit+0x28>)
 8000ab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ab6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000acc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ace:	e003      	b.n	8000ad8 <LoopCopyDataInit>

08000ad0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ad2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ad4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ad6:	3104      	adds	r1, #4

08000ad8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000adc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ade:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ae0:	d3f6      	bcc.n	8000ad0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ae4:	e002      	b.n	8000aec <LoopFillZerobss>

08000ae6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ae6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ae8:	f842 3b04 	str.w	r3, [r2], #4

08000aec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000af0:	d3f9      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000af2:	f7ff ffd3 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f004 fc69 	bl	80053cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fd09 	bl	8000510 <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b04:	080054f0 	.word	0x080054f0
  ldr  r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b0c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000b10:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000b14:	20012e58 	.word	0x20012e58

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <HAL_Init+0x40>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_Init+0x40>)
 8000b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_Init+0x40>)
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f8fa 	bl	8000d3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff ff2c 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff feba 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023c00 	.word	0x40023c00

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20012e14 	.word	0x20012e14

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20012e14 	.word	0x20012e14

08000ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba8:	f7ff ffee 	bl	8000b88 <HAL_GetTick>
 8000bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bb8:	d005      	beq.n	8000bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_Delay+0x40>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bc6:	bf00      	nop
 8000bc8:	f7ff ffde 	bl	8000b88 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d8f7      	bhi.n	8000bc8 <HAL_Delay+0x28>
  {
  }
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000008 	.word	0x20000008

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff4c 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
 8000d60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d66:	f7ff ff61 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000d6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	68b9      	ldr	r1, [r7, #8]
 8000d70:	6978      	ldr	r0, [r7, #20]
 8000d72:	f7ff ffb1 	bl	8000cd8 <NVIC_EncodePriority>
 8000d76:	4602      	mov	r2, r0
 8000d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff80 	bl	8000c84 <__NVIC_SetPriority>
}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff54 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000db6:	f7ff fee7 	bl	8000b88 <HAL_GetTick>
 8000dba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d008      	beq.n	8000dda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2280      	movs	r2, #128	; 0x80
 8000dcc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e052      	b.n	8000e80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0216 	bic.w	r2, r2, #22
 8000de8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	695a      	ldr	r2, [r3, #20]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000df8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d103      	bne.n	8000e0a <HAL_DMA_Abort+0x62>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d007      	beq.n	8000e1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 0208 	bic.w	r2, r2, #8
 8000e18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0201 	bic.w	r2, r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e2a:	e013      	b.n	8000e54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e2c:	f7ff feac 	bl	8000b88 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b05      	cmp	r3, #5
 8000e38:	d90c      	bls.n	8000e54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e015      	b.n	8000e80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1e4      	bne.n	8000e2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e66:	223f      	movs	r2, #63	; 0x3f
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	e165      	b.n	8001188 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	f040 8154 	bne.w	8001182 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d00b      	beq.n	8000efa <HAL_GPIO_Init+0x5a>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eee:	2b11      	cmp	r3, #17
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b12      	cmp	r3, #18
 8000ef8:	d130      	bne.n	8000f5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	f003 0201 	and.w	r2, r3, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0xfc>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b12      	cmp	r3, #18
 8000f9a:	d123      	bne.n	8000fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	08da      	lsrs	r2, r3, #3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	691a      	ldr	r2, [r3, #16]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	08da      	lsrs	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	69b9      	ldr	r1, [r7, #24]
 8000fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0203 	and.w	r2, r3, #3
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80ae 	beq.w	8001182 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b5c      	ldr	r3, [pc, #368]	; (800119c <HAL_GPIO_Init+0x2fc>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a5b      	ldr	r2, [pc, #364]	; (800119c <HAL_GPIO_Init+0x2fc>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b59      	ldr	r3, [pc, #356]	; (800119c <HAL_GPIO_Init+0x2fc>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001042:	4a57      	ldr	r2, [pc, #348]	; (80011a0 <HAL_GPIO_Init+0x300>)
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	220f      	movs	r2, #15
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <HAL_GPIO_Init+0x304>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d025      	beq.n	80010ba <HAL_GPIO_Init+0x21a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4d      	ldr	r2, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x308>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01f      	beq.n	80010b6 <HAL_GPIO_Init+0x216>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <HAL_GPIO_Init+0x30c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d019      	beq.n	80010b2 <HAL_GPIO_Init+0x212>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4b      	ldr	r2, [pc, #300]	; (80011b0 <HAL_GPIO_Init+0x310>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x20e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4a      	ldr	r2, [pc, #296]	; (80011b4 <HAL_GPIO_Init+0x314>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x20a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a49      	ldr	r2, [pc, #292]	; (80011b8 <HAL_GPIO_Init+0x318>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x206>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a48      	ldr	r2, [pc, #288]	; (80011bc <HAL_GPIO_Init+0x31c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x202>
 800109e:	2306      	movs	r3, #6
 80010a0:	e00c      	b.n	80010bc <HAL_GPIO_Init+0x21c>
 80010a2:	2307      	movs	r3, #7
 80010a4:	e00a      	b.n	80010bc <HAL_GPIO_Init+0x21c>
 80010a6:	2305      	movs	r3, #5
 80010a8:	e008      	b.n	80010bc <HAL_GPIO_Init+0x21c>
 80010aa:	2304      	movs	r3, #4
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x21c>
 80010ae:	2303      	movs	r3, #3
 80010b0:	e004      	b.n	80010bc <HAL_GPIO_Init+0x21c>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_Init+0x21c>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x21c>
 80010ba:	2300      	movs	r3, #0
 80010bc:	69fa      	ldr	r2, [r7, #28]
 80010be:	f002 0203 	and.w	r2, r2, #3
 80010c2:	0092      	lsls	r2, r2, #2
 80010c4:	4093      	lsls	r3, r2
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010cc:	4934      	ldr	r1, [pc, #208]	; (80011a0 <HAL_GPIO_Init+0x300>)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010da:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <HAL_GPIO_Init+0x320>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010fe:	4a30      	ldr	r2, [pc, #192]	; (80011c0 <HAL_GPIO_Init+0x320>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_GPIO_Init+0x320>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001128:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <HAL_GPIO_Init+0x320>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_GPIO_Init+0x320>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001152:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <HAL_GPIO_Init+0x320>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_GPIO_Init+0x320>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800117c:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_GPIO_Init+0x320>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3301      	adds	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b0f      	cmp	r3, #15
 800118c:	f67f ae96 	bls.w	8000ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001190:	bf00      	nop
 8001192:	3724      	adds	r7, #36	; 0x24
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40023800 	.word	0x40023800
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40021400 	.word	0x40021400
 80011bc:	40021800 	.word	0x40021800
 80011c0:	40013c00 	.word	0x40013c00

080011c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	887b      	ldrh	r3, [r7, #2]
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e001      	b.n	80011e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
 8001200:	4613      	mov	r3, r2
 8001202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001204:	787b      	ldrb	r3, [r7, #1]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001210:	e003      	b.n	800121a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	041a      	lsls	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	619a      	str	r2, [r3, #24]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	401a      	ands	r2, r3
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	429a      	cmp	r2, r3
 800123e:	d104      	bne.n	800124a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	041a      	lsls	r2, r3, #16
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001248:	e002      	b.n	8001250 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0cc      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001270:	4b68      	ldr	r3, [pc, #416]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d90c      	bls.n	8001298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b65      	ldr	r3, [pc, #404]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b63      	ldr	r3, [pc, #396]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0b8      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	4a58      	ldr	r2, [pc, #352]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c8:	4b53      	ldr	r3, [pc, #332]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a52      	ldr	r2, [pc, #328]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	494d      	ldr	r1, [pc, #308]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d044      	beq.n	800137c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d119      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d003      	beq.n	800131a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001316:	2b03      	cmp	r3, #3
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e06f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e067      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f023 0203 	bic.w	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4934      	ldr	r1, [pc, #208]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	4313      	orrs	r3, r2
 800134a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800134c:	f7ff fc1c 	bl	8000b88 <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001352:	e00a      	b.n	800136a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001354:	f7ff fc18 	bl	8000b88 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e04f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 020c 	and.w	r2, r3, #12
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d1eb      	bne.n	8001354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d20c      	bcs.n	80013a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e032      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4916      	ldr	r1, [pc, #88]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013e2:	f000 f887 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 80013e6:	4601      	mov	r1, r0
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	fa21 f303 	lsr.w	r3, r1, r3
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_RCC_ClockConfig+0x1c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fad0 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00
 8001418:	40023800 	.word	0x40023800
 800141c:	080054c8 	.word	0x080054c8
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_RCC_GetHCLKFreq+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000

08001440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001444:	f7ff fff0 	bl	8001428 <HAL_RCC_GetHCLKFreq>
 8001448:	4601      	mov	r1, r0
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	0a9b      	lsrs	r3, r3, #10
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	4a03      	ldr	r2, [pc, #12]	; (8001464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	fa21 f303 	lsr.w	r3, r1, r3
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	080054d8 	.word	0x080054d8

08001468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800146c:	f7ff ffdc 	bl	8001428 <HAL_RCC_GetHCLKFreq>
 8001470:	4601      	mov	r1, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	0b5b      	lsrs	r3, r3, #13
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	4a03      	ldr	r2, [pc, #12]	; (800148c <HAL_RCC_GetPCLK2Freq+0x24>)
 800147e:	5cd3      	ldrb	r3, [r2, r3]
 8001480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	080054d8 	.word	0x080054d8

08001490 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	220f      	movs	r2, #15
 800149e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_RCC_GetClockConfig+0x60>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 020f 	and.w	r2, r3, #15
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800150e:	4bc6      	ldr	r3, [pc, #792]	; (8001828 <HAL_RCC_GetSysClockFreq+0x334>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b0c      	cmp	r3, #12
 8001518:	f200 817e 	bhi.w	8001818 <HAL_RCC_GetSysClockFreq+0x324>
 800151c:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <HAL_RCC_GetSysClockFreq+0x30>)
 800151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001522:	bf00      	nop
 8001524:	08001559 	.word	0x08001559
 8001528:	08001819 	.word	0x08001819
 800152c:	08001819 	.word	0x08001819
 8001530:	08001819 	.word	0x08001819
 8001534:	0800155f 	.word	0x0800155f
 8001538:	08001819 	.word	0x08001819
 800153c:	08001819 	.word	0x08001819
 8001540:	08001819 	.word	0x08001819
 8001544:	08001565 	.word	0x08001565
 8001548:	08001819 	.word	0x08001819
 800154c:	08001819 	.word	0x08001819
 8001550:	08001819 	.word	0x08001819
 8001554:	080016c1 	.word	0x080016c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001558:	4bb4      	ldr	r3, [pc, #720]	; (800182c <HAL_RCC_GetSysClockFreq+0x338>)
 800155a:	613b      	str	r3, [r7, #16]
       break;
 800155c:	e15f      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800155e:	4bb4      	ldr	r3, [pc, #720]	; (8001830 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001560:	613b      	str	r3, [r7, #16]
      break;
 8001562:	e15c      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001564:	4bb0      	ldr	r3, [pc, #704]	; (8001828 <HAL_RCC_GetSysClockFreq+0x334>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800156c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800156e:	4bae      	ldr	r3, [pc, #696]	; (8001828 <HAL_RCC_GetSysClockFreq+0x334>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d04a      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800157a:	4bab      	ldr	r3, [pc, #684]	; (8001828 <HAL_RCC_GetSysClockFreq+0x334>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	099b      	lsrs	r3, r3, #6
 8001580:	f04f 0400 	mov.w	r4, #0
 8001584:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	ea03 0501 	and.w	r5, r3, r1
 8001590:	ea04 0602 	and.w	r6, r4, r2
 8001594:	4629      	mov	r1, r5
 8001596:	4632      	mov	r2, r6
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	f04f 0400 	mov.w	r4, #0
 80015a0:	0154      	lsls	r4, r2, #5
 80015a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015a6:	014b      	lsls	r3, r1, #5
 80015a8:	4619      	mov	r1, r3
 80015aa:	4622      	mov	r2, r4
 80015ac:	1b49      	subs	r1, r1, r5
 80015ae:	eb62 0206 	sbc.w	r2, r2, r6
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	f04f 0400 	mov.w	r4, #0
 80015ba:	0194      	lsls	r4, r2, #6
 80015bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015c0:	018b      	lsls	r3, r1, #6
 80015c2:	1a5b      	subs	r3, r3, r1
 80015c4:	eb64 0402 	sbc.w	r4, r4, r2
 80015c8:	f04f 0100 	mov.w	r1, #0
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	00e2      	lsls	r2, r4, #3
 80015d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015d6:	00d9      	lsls	r1, r3, #3
 80015d8:	460b      	mov	r3, r1
 80015da:	4614      	mov	r4, r2
 80015dc:	195b      	adds	r3, r3, r5
 80015de:	eb44 0406 	adc.w	r4, r4, r6
 80015e2:	f04f 0100 	mov.w	r1, #0
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	0262      	lsls	r2, r4, #9
 80015ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80015f0:	0259      	lsls	r1, r3, #9
 80015f2:	460b      	mov	r3, r1
 80015f4:	4614      	mov	r4, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	4621      	mov	r1, r4
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f04f 0400 	mov.w	r4, #0
 8001600:	461a      	mov	r2, r3
 8001602:	4623      	mov	r3, r4
 8001604:	f7fe fe04 	bl	8000210 <__aeabi_uldivmod>
 8001608:	4603      	mov	r3, r0
 800160a:	460c      	mov	r4, r1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e049      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001610:	4b85      	ldr	r3, [pc, #532]	; (8001828 <HAL_RCC_GetSysClockFreq+0x334>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	099b      	lsrs	r3, r3, #6
 8001616:	f04f 0400 	mov.w	r4, #0
 800161a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	ea03 0501 	and.w	r5, r3, r1
 8001626:	ea04 0602 	and.w	r6, r4, r2
 800162a:	4629      	mov	r1, r5
 800162c:	4632      	mov	r2, r6
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	f04f 0400 	mov.w	r4, #0
 8001636:	0154      	lsls	r4, r2, #5
 8001638:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800163c:	014b      	lsls	r3, r1, #5
 800163e:	4619      	mov	r1, r3
 8001640:	4622      	mov	r2, r4
 8001642:	1b49      	subs	r1, r1, r5
 8001644:	eb62 0206 	sbc.w	r2, r2, r6
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	f04f 0400 	mov.w	r4, #0
 8001650:	0194      	lsls	r4, r2, #6
 8001652:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001656:	018b      	lsls	r3, r1, #6
 8001658:	1a5b      	subs	r3, r3, r1
 800165a:	eb64 0402 	sbc.w	r4, r4, r2
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	00e2      	lsls	r2, r4, #3
 8001668:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800166c:	00d9      	lsls	r1, r3, #3
 800166e:	460b      	mov	r3, r1
 8001670:	4614      	mov	r4, r2
 8001672:	195b      	adds	r3, r3, r5
 8001674:	eb44 0406 	adc.w	r4, r4, r6
 8001678:	f04f 0100 	mov.w	r1, #0
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	02a2      	lsls	r2, r4, #10
 8001682:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001686:	0299      	lsls	r1, r3, #10
 8001688:	460b      	mov	r3, r1
 800168a:	4614      	mov	r4, r2
 800168c:	4618      	mov	r0, r3
 800168e:	4621      	mov	r1, r4
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f04f 0400 	mov.w	r4, #0
 8001696:	461a      	mov	r2, r3
 8001698:	4623      	mov	r3, r4
 800169a:	f7fe fdb9 	bl	8000210 <__aeabi_uldivmod>
 800169e:	4603      	mov	r3, r0
 80016a0:	460c      	mov	r4, r1
 80016a2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016a4:	4b60      	ldr	r3, [pc, #384]	; (8001828 <HAL_RCC_GetSysClockFreq+0x334>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	0c1b      	lsrs	r3, r3, #16
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	3301      	adds	r3, #1
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	613b      	str	r3, [r7, #16]
      break;
 80016be:	e0ae      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_GetSysClockFreq+0x334>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ca:	4b57      	ldr	r3, [pc, #348]	; (8001828 <HAL_RCC_GetSysClockFreq+0x334>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d04a      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d6:	4b54      	ldr	r3, [pc, #336]	; (8001828 <HAL_RCC_GetSysClockFreq+0x334>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	f04f 0400 	mov.w	r4, #0
 80016e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	ea03 0501 	and.w	r5, r3, r1
 80016ec:	ea04 0602 	and.w	r6, r4, r2
 80016f0:	4629      	mov	r1, r5
 80016f2:	4632      	mov	r2, r6
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	f04f 0400 	mov.w	r4, #0
 80016fc:	0154      	lsls	r4, r2, #5
 80016fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001702:	014b      	lsls	r3, r1, #5
 8001704:	4619      	mov	r1, r3
 8001706:	4622      	mov	r2, r4
 8001708:	1b49      	subs	r1, r1, r5
 800170a:	eb62 0206 	sbc.w	r2, r2, r6
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	f04f 0400 	mov.w	r4, #0
 8001716:	0194      	lsls	r4, r2, #6
 8001718:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800171c:	018b      	lsls	r3, r1, #6
 800171e:	1a5b      	subs	r3, r3, r1
 8001720:	eb64 0402 	sbc.w	r4, r4, r2
 8001724:	f04f 0100 	mov.w	r1, #0
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	00e2      	lsls	r2, r4, #3
 800172e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001732:	00d9      	lsls	r1, r3, #3
 8001734:	460b      	mov	r3, r1
 8001736:	4614      	mov	r4, r2
 8001738:	195b      	adds	r3, r3, r5
 800173a:	eb44 0406 	adc.w	r4, r4, r6
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	0262      	lsls	r2, r4, #9
 8001748:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800174c:	0259      	lsls	r1, r3, #9
 800174e:	460b      	mov	r3, r1
 8001750:	4614      	mov	r4, r2
 8001752:	4618      	mov	r0, r3
 8001754:	4621      	mov	r1, r4
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f04f 0400 	mov.w	r4, #0
 800175c:	461a      	mov	r2, r3
 800175e:	4623      	mov	r3, r4
 8001760:	f7fe fd56 	bl	8000210 <__aeabi_uldivmod>
 8001764:	4603      	mov	r3, r0
 8001766:	460c      	mov	r4, r1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e049      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <HAL_RCC_GetSysClockFreq+0x334>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	f04f 0400 	mov.w	r4, #0
 8001776:	f240 11ff 	movw	r1, #511	; 0x1ff
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	ea03 0501 	and.w	r5, r3, r1
 8001782:	ea04 0602 	and.w	r6, r4, r2
 8001786:	4629      	mov	r1, r5
 8001788:	4632      	mov	r2, r6
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	f04f 0400 	mov.w	r4, #0
 8001792:	0154      	lsls	r4, r2, #5
 8001794:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001798:	014b      	lsls	r3, r1, #5
 800179a:	4619      	mov	r1, r3
 800179c:	4622      	mov	r2, r4
 800179e:	1b49      	subs	r1, r1, r5
 80017a0:	eb62 0206 	sbc.w	r2, r2, r6
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	f04f 0400 	mov.w	r4, #0
 80017ac:	0194      	lsls	r4, r2, #6
 80017ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017b2:	018b      	lsls	r3, r1, #6
 80017b4:	1a5b      	subs	r3, r3, r1
 80017b6:	eb64 0402 	sbc.w	r4, r4, r2
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	00e2      	lsls	r2, r4, #3
 80017c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017c8:	00d9      	lsls	r1, r3, #3
 80017ca:	460b      	mov	r3, r1
 80017cc:	4614      	mov	r4, r2
 80017ce:	195b      	adds	r3, r3, r5
 80017d0:	eb44 0406 	adc.w	r4, r4, r6
 80017d4:	f04f 0100 	mov.w	r1, #0
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	02a2      	lsls	r2, r4, #10
 80017de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017e2:	0299      	lsls	r1, r3, #10
 80017e4:	460b      	mov	r3, r1
 80017e6:	4614      	mov	r4, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	4621      	mov	r1, r4
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f04f 0400 	mov.w	r4, #0
 80017f2:	461a      	mov	r2, r3
 80017f4:	4623      	mov	r3, r4
 80017f6:	f7fe fd0b 	bl	8000210 <__aeabi_uldivmod>
 80017fa:	4603      	mov	r3, r0
 80017fc:	460c      	mov	r4, r1
 80017fe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_GetSysClockFreq+0x334>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	0f1b      	lsrs	r3, r3, #28
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	fbb2 f3f3 	udiv	r3, r2, r3
 8001814:	613b      	str	r3, [r7, #16]
      break;
 8001816:	e002      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <HAL_RCC_GetSysClockFreq+0x338>)
 800181a:	613b      	str	r3, [r7, #16]
      break;
 800181c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800181e:	693b      	ldr	r3, [r7, #16]
}
 8001820:	4618      	mov	r0, r3
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001828:	40023800 	.word	0x40023800
 800182c:	00f42400 	.word	0x00f42400
 8001830:	007a1200 	.word	0x007a1200

08001834 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8083 	beq.w	8001954 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800184e:	4b95      	ldr	r3, [pc, #596]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b04      	cmp	r3, #4
 8001858:	d019      	beq.n	800188e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800185a:	4b92      	ldr	r3, [pc, #584]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001862:	2b08      	cmp	r3, #8
 8001864:	d106      	bne.n	8001874 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001866:	4b8f      	ldr	r3, [pc, #572]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001872:	d00c      	beq.n	800188e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001874:	4b8b      	ldr	r3, [pc, #556]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800187c:	2b0c      	cmp	r3, #12
 800187e:	d112      	bne.n	80018a6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001880:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800188c:	d10b      	bne.n	80018a6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188e:	4b85      	ldr	r3, [pc, #532]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d05b      	beq.n	8001952 <HAL_RCC_OscConfig+0x11e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d157      	bne.n	8001952 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e216      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x8a>
 80018b0:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a7b      	ldr	r2, [pc, #492]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e01d      	b.n	80018fa <HAL_RCC_OscConfig+0xc6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c6:	d10c      	bne.n	80018e2 <HAL_RCC_OscConfig+0xae>
 80018c8:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a75      	ldr	r2, [pc, #468]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a72      	ldr	r2, [pc, #456]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e00b      	b.n	80018fa <HAL_RCC_OscConfig+0xc6>
 80018e2:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a6f      	ldr	r2, [pc, #444]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6c      	ldr	r2, [pc, #432]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d013      	beq.n	800192a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff f941 	bl	8000b88 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190a:	f7ff f93d 	bl	8000b88 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b64      	cmp	r3, #100	; 0x64
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e1db      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191c:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0xd6>
 8001928:	e014      	b.n	8001954 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff f92d 	bl	8000b88 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001932:	f7ff f929 	bl	8000b88 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b64      	cmp	r3, #100	; 0x64
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1c7      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001944:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0xfe>
 8001950:	e000      	b.n	8001954 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001952:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d06f      	beq.n	8001a40 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b00      	cmp	r3, #0
 800196a:	d017      	beq.n	800199c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800196c:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001974:	2b08      	cmp	r3, #8
 8001976:	d105      	bne.n	8001984 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001978:	4b4a      	ldr	r3, [pc, #296]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00b      	beq.n	800199c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001984:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800198c:	2b0c      	cmp	r3, #12
 800198e:	d11c      	bne.n	80019ca <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001990:	4b44      	ldr	r3, [pc, #272]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d116      	bne.n	80019ca <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199c:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_OscConfig+0x180>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e18f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4938      	ldr	r1, [pc, #224]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c8:	e03a      	b.n	8001a40 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d020      	beq.n	8001a14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d2:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f8d6 	bl	8000b88 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff f8d2 	bl	8000b88 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e170      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4925      	ldr	r1, [pc, #148]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
 8001a12:	e015      	b.n	8001a40 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f8b5 	bl	8000b88 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff f8b1 	bl	8000b88 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e14f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d037      	beq.n	8001abc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d016      	beq.n	8001a82 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_RCC_OscConfig+0x278>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f895 	bl	8000b88 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff f891 	bl	8000b88 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e12f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x22e>
 8001a80:	e01c      	b.n	8001abc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_RCC_OscConfig+0x278>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff f87e 	bl	8000b88 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8e:	e00f      	b.n	8001ab0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a90:	f7ff f87a 	bl	8000b88 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d908      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e118      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	42470000 	.word	0x42470000
 8001aac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab0:	4b8a      	ldr	r3, [pc, #552]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1e9      	bne.n	8001a90 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 8097 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ace:	4b83      	ldr	r3, [pc, #524]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10f      	bne.n	8001afa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b7f      	ldr	r3, [pc, #508]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a7e      	ldr	r2, [pc, #504]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b7c      	ldr	r3, [pc, #496]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001af6:	2301      	movs	r3, #1
 8001af8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d118      	bne.n	8001b38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b06:	4b76      	ldr	r3, [pc, #472]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a75      	ldr	r2, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b12:	f7ff f839 	bl	8000b88 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1a:	f7ff f835 	bl	8000b88 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e0d3      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ce0 <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x31a>
 8001b40:	4b66      	ldr	r3, [pc, #408]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a65      	ldr	r2, [pc, #404]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4c:	e01c      	b.n	8001b88 <HAL_RCC_OscConfig+0x354>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x33c>
 8001b56:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	4a60      	ldr	r2, [pc, #384]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70
 8001b62:	4b5e      	ldr	r3, [pc, #376]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	4a5d      	ldr	r2, [pc, #372]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0x354>
 8001b70:	4b5a      	ldr	r3, [pc, #360]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b74:	4a59      	ldr	r2, [pc, #356]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7c:	4b57      	ldr	r3, [pc, #348]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	4a56      	ldr	r2, [pc, #344]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001b82:	f023 0304 	bic.w	r3, r3, #4
 8001b86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d015      	beq.n	8001bbc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b90:	f7fe fffa 	bl	8000b88 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7fe fff6 	bl	8000b88 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e092      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bae:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0ee      	beq.n	8001b98 <HAL_RCC_OscConfig+0x364>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7fe ffe4 	bl	8000b88 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f7fe ffe0 	bl	8000b88 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e07c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bda:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ee      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bec:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a3a      	ldr	r2, [pc, #232]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d068      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d060      	beq.n	8001cce <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d145      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c14:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <HAL_RCC_OscConfig+0x4b0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7fe ffb5 	bl	8000b88 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c22:	f7fe ffb1 	bl	8000b88 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e04f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c34:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69da      	ldr	r2, [r3, #28]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	019b      	lsls	r3, r3, #6
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	041b      	lsls	r3, r3, #16
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	061b      	lsls	r3, r3, #24
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	071b      	lsls	r3, r3, #28
 8001c6c:	491b      	ldr	r1, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_RCC_OscConfig+0x4b0>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7fe ff86 	bl	8000b88 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c80:	f7fe ff82 	bl	8000b88 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e020      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x44c>
 8001c9e:	e018      	b.n	8001cd2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_RCC_OscConfig+0x4b0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7fe ff6f 	bl	8000b88 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cae:	f7fe ff6b 	bl	8000b88 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e009      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_OscConfig+0x4a8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x47a>
 8001ccc:	e001      	b.n	8001cd2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40007000 	.word	0x40007000
 8001ce4:	42470060 	.word	0x42470060

08001ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e01d      	b.n	8001d36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f815 	bl	8001d3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3304      	adds	r3, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4610      	mov	r0, r2
 8001d28:	f000 f968 	bl	8001ffc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b085      	sub	sp, #20
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b06      	cmp	r3, #6
 8001d7a:	d007      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d122      	bne.n	8001df6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d11b      	bne.n	8001df6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 0202 	mvn.w	r2, #2
 8001dc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8ee 	bl	8001fbe <HAL_TIM_IC_CaptureCallback>
 8001de2:	e005      	b.n	8001df0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f8e0 	bl	8001faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8f1 	bl	8001fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d122      	bne.n	8001e4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d11b      	bne.n	8001e4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f06f 0204 	mvn.w	r2, #4
 8001e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8c4 	bl	8001fbe <HAL_TIM_IC_CaptureCallback>
 8001e36:	e005      	b.n	8001e44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f8b6 	bl	8001faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8c7 	bl	8001fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d122      	bne.n	8001e9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d11b      	bne.n	8001e9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f06f 0208 	mvn.w	r2, #8
 8001e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2204      	movs	r2, #4
 8001e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f89a 	bl	8001fbe <HAL_TIM_IC_CaptureCallback>
 8001e8a:	e005      	b.n	8001e98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f88c 	bl	8001faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f89d 	bl	8001fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d122      	bne.n	8001ef2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d11b      	bne.n	8001ef2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f06f 0210 	mvn.w	r2, #16
 8001ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f870 	bl	8001fbe <HAL_TIM_IC_CaptureCallback>
 8001ede:	e005      	b.n	8001eec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f862 	bl	8001faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f873 	bl	8001fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d10e      	bne.n	8001f1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d107      	bne.n	8001f1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f06f 0201 	mvn.w	r2, #1
 8001f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7fe fcbf 	bl	800089c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d10e      	bne.n	8001f4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f36:	2b80      	cmp	r3, #128	; 0x80
 8001f38:	d107      	bne.n	8001f4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f903 	bl	8002150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	d10e      	bne.n	8001f76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f62:	2b40      	cmp	r3, #64	; 0x40
 8001f64:	d107      	bne.n	8001f76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f838 	bl	8001fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d10e      	bne.n	8001fa2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	d107      	bne.n	8001fa2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f06f 0220 	mvn.w	r2, #32
 8001f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8cd 	bl	800213c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a40      	ldr	r2, [pc, #256]	; (8002110 <TIM_Base_SetConfig+0x114>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d013      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d00f      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3d      	ldr	r2, [pc, #244]	; (8002114 <TIM_Base_SetConfig+0x118>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00b      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3c      	ldr	r2, [pc, #240]	; (8002118 <TIM_Base_SetConfig+0x11c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d007      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3b      	ldr	r2, [pc, #236]	; (800211c <TIM_Base_SetConfig+0x120>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d003      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3a      	ldr	r2, [pc, #232]	; (8002120 <TIM_Base_SetConfig+0x124>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d108      	bne.n	800204e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2f      	ldr	r2, [pc, #188]	; (8002110 <TIM_Base_SetConfig+0x114>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02b      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d027      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2c      	ldr	r2, [pc, #176]	; (8002114 <TIM_Base_SetConfig+0x118>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d023      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <TIM_Base_SetConfig+0x11c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01f      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2a      	ldr	r2, [pc, #168]	; (800211c <TIM_Base_SetConfig+0x120>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01b      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a29      	ldr	r2, [pc, #164]	; (8002120 <TIM_Base_SetConfig+0x124>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d017      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a28      	ldr	r2, [pc, #160]	; (8002124 <TIM_Base_SetConfig+0x128>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a27      	ldr	r2, [pc, #156]	; (8002128 <TIM_Base_SetConfig+0x12c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00f      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a26      	ldr	r2, [pc, #152]	; (800212c <TIM_Base_SetConfig+0x130>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00b      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a25      	ldr	r2, [pc, #148]	; (8002130 <TIM_Base_SetConfig+0x134>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a24      	ldr	r2, [pc, #144]	; (8002134 <TIM_Base_SetConfig+0x138>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a23      	ldr	r2, [pc, #140]	; (8002138 <TIM_Base_SetConfig+0x13c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d108      	bne.n	80020c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <TIM_Base_SetConfig+0x114>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d003      	beq.n	80020f4 <TIM_Base_SetConfig+0xf8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <TIM_Base_SetConfig+0x124>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d103      	bne.n	80020fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	615a      	str	r2, [r3, #20]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40010000 	.word	0x40010000
 8002114:	40000400 	.word	0x40000400
 8002118:	40000800 	.word	0x40000800
 800211c:	40000c00 	.word	0x40000c00
 8002120:	40010400 	.word	0x40010400
 8002124:	40014000 	.word	0x40014000
 8002128:	40014400 	.word	0x40014400
 800212c:	40014800 	.word	0x40014800
 8002130:	40001800 	.word	0x40001800
 8002134:	40001c00 	.word	0x40001c00
 8002138:	40002000 	.word	0x40002000

0800213c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e03f      	b.n	80021f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fbc4 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f94f 	bl	800244c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b088      	sub	sp, #32
 8002202:	af02      	add	r7, sp, #8
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b20      	cmp	r3, #32
 800221c:	f040 8083 	bne.w	8002326 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_UART_Transmit+0x2e>
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e07b      	b.n	8002328 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_UART_Transmit+0x40>
 800223a:	2302      	movs	r3, #2
 800223c:	e074      	b.n	8002328 <HAL_UART_Transmit+0x12a>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2221      	movs	r2, #33	; 0x21
 8002250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002254:	f7fe fc98 	bl	8000b88 <HAL_GetTick>
 8002258:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800226e:	e042      	b.n	80022f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002286:	d122      	bne.n	80022ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2200      	movs	r2, #0
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f890 	bl	80023b8 <UART_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e042      	b.n	8002328 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3302      	adds	r3, #2
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	e017      	b.n	80022f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	e013      	b.n	80022f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2200      	movs	r2, #0
 80022d6:	2180      	movs	r1, #128	; 0x80
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f86d 	bl	80023b8 <UART_WaitOnFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e01f      	b.n	8002328 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	60ba      	str	r2, [r7, #8]
 80022ee:	781a      	ldrb	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1b7      	bne.n	8002270 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2200      	movs	r2, #0
 8002308:	2140      	movs	r1, #64	; 0x40
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f854 	bl	80023b8 <UART_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e006      	b.n	8002328 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002326:	2302      	movs	r3, #2
  }
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002346:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	2b80      	cmp	r3, #128	; 0x80
 8002354:	d124      	bne.n	80023a0 <HAL_UART_AbortTransmit+0x70>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002364:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	2b00      	cmp	r3, #0
 800236c:	d018      	beq.n	80023a0 <HAL_UART_AbortTransmit+0x70>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	2200      	movs	r2, #0
 8002374:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fd14 	bl	8000da8 <HAL_DMA_Abort>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00c      	beq.n	80023a0 <HAL_UART_AbortTransmit+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fd7c 	bl	8000e88 <HAL_DMA_GetError>
 8002390:	4603      	mov	r3, r0
 8002392:	2b20      	cmp	r3, #32
 8002394:	d104      	bne.n	80023a0 <HAL_UART_AbortTransmit+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2210      	movs	r2, #16
 800239a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e007      	b.n	80023b0 <HAL_UART_AbortTransmit+0x80>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c8:	e02c      	b.n	8002424 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023d0:	d028      	beq.n	8002424 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80023d8:	f7fe fbd6 	bl	8000b88 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d21d      	bcs.n	8002424 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e00f      	b.n	8002444 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4013      	ands	r3, r2
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	429a      	cmp	r2, r3
 8002440:	d0c3      	beq.n	80023ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800244c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800248e:	f023 030c 	bic.w	r3, r3, #12
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	68f9      	ldr	r1, [r7, #12]
 8002498:	430b      	orrs	r3, r1
 800249a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ba:	f040 818b 	bne.w	80027d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4ac1      	ldr	r2, [pc, #772]	; (80027c8 <UART_SetConfig+0x37c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d005      	beq.n	80024d4 <UART_SetConfig+0x88>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4abf      	ldr	r2, [pc, #764]	; (80027cc <UART_SetConfig+0x380>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	f040 80bd 	bne.w	800264e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024d4:	f7fe ffc8 	bl	8001468 <HAL_RCC_GetPCLK2Freq>
 80024d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	461d      	mov	r5, r3
 80024de:	f04f 0600 	mov.w	r6, #0
 80024e2:	46a8      	mov	r8, r5
 80024e4:	46b1      	mov	r9, r6
 80024e6:	eb18 0308 	adds.w	r3, r8, r8
 80024ea:	eb49 0409 	adc.w	r4, r9, r9
 80024ee:	4698      	mov	r8, r3
 80024f0:	46a1      	mov	r9, r4
 80024f2:	eb18 0805 	adds.w	r8, r8, r5
 80024f6:	eb49 0906 	adc.w	r9, r9, r6
 80024fa:	f04f 0100 	mov.w	r1, #0
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002506:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800250a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800250e:	4688      	mov	r8, r1
 8002510:	4691      	mov	r9, r2
 8002512:	eb18 0005 	adds.w	r0, r8, r5
 8002516:	eb49 0106 	adc.w	r1, r9, r6
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	461d      	mov	r5, r3
 8002520:	f04f 0600 	mov.w	r6, #0
 8002524:	196b      	adds	r3, r5, r5
 8002526:	eb46 0406 	adc.w	r4, r6, r6
 800252a:	461a      	mov	r2, r3
 800252c:	4623      	mov	r3, r4
 800252e:	f7fd fe6f 	bl	8000210 <__aeabi_uldivmod>
 8002532:	4603      	mov	r3, r0
 8002534:	460c      	mov	r4, r1
 8002536:	461a      	mov	r2, r3
 8002538:	4ba5      	ldr	r3, [pc, #660]	; (80027d0 <UART_SetConfig+0x384>)
 800253a:	fba3 2302 	umull	r2, r3, r3, r2
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	461d      	mov	r5, r3
 8002548:	f04f 0600 	mov.w	r6, #0
 800254c:	46a9      	mov	r9, r5
 800254e:	46b2      	mov	sl, r6
 8002550:	eb19 0309 	adds.w	r3, r9, r9
 8002554:	eb4a 040a 	adc.w	r4, sl, sl
 8002558:	4699      	mov	r9, r3
 800255a:	46a2      	mov	sl, r4
 800255c:	eb19 0905 	adds.w	r9, r9, r5
 8002560:	eb4a 0a06 	adc.w	sl, sl, r6
 8002564:	f04f 0100 	mov.w	r1, #0
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002570:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002574:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002578:	4689      	mov	r9, r1
 800257a:	4692      	mov	sl, r2
 800257c:	eb19 0005 	adds.w	r0, r9, r5
 8002580:	eb4a 0106 	adc.w	r1, sl, r6
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	461d      	mov	r5, r3
 800258a:	f04f 0600 	mov.w	r6, #0
 800258e:	196b      	adds	r3, r5, r5
 8002590:	eb46 0406 	adc.w	r4, r6, r6
 8002594:	461a      	mov	r2, r3
 8002596:	4623      	mov	r3, r4
 8002598:	f7fd fe3a 	bl	8000210 <__aeabi_uldivmod>
 800259c:	4603      	mov	r3, r0
 800259e:	460c      	mov	r4, r1
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b8b      	ldr	r3, [pc, #556]	; (80027d0 <UART_SetConfig+0x384>)
 80025a4:	fba3 1302 	umull	r1, r3, r3, r2
 80025a8:	095b      	lsrs	r3, r3, #5
 80025aa:	2164      	movs	r1, #100	; 0x64
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	3332      	adds	r3, #50	; 0x32
 80025b6:	4a86      	ldr	r2, [pc, #536]	; (80027d0 <UART_SetConfig+0x384>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025c4:	4498      	add	r8, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	461d      	mov	r5, r3
 80025ca:	f04f 0600 	mov.w	r6, #0
 80025ce:	46a9      	mov	r9, r5
 80025d0:	46b2      	mov	sl, r6
 80025d2:	eb19 0309 	adds.w	r3, r9, r9
 80025d6:	eb4a 040a 	adc.w	r4, sl, sl
 80025da:	4699      	mov	r9, r3
 80025dc:	46a2      	mov	sl, r4
 80025de:	eb19 0905 	adds.w	r9, r9, r5
 80025e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025fa:	4689      	mov	r9, r1
 80025fc:	4692      	mov	sl, r2
 80025fe:	eb19 0005 	adds.w	r0, r9, r5
 8002602:	eb4a 0106 	adc.w	r1, sl, r6
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	461d      	mov	r5, r3
 800260c:	f04f 0600 	mov.w	r6, #0
 8002610:	196b      	adds	r3, r5, r5
 8002612:	eb46 0406 	adc.w	r4, r6, r6
 8002616:	461a      	mov	r2, r3
 8002618:	4623      	mov	r3, r4
 800261a:	f7fd fdf9 	bl	8000210 <__aeabi_uldivmod>
 800261e:	4603      	mov	r3, r0
 8002620:	460c      	mov	r4, r1
 8002622:	461a      	mov	r2, r3
 8002624:	4b6a      	ldr	r3, [pc, #424]	; (80027d0 <UART_SetConfig+0x384>)
 8002626:	fba3 1302 	umull	r1, r3, r3, r2
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2164      	movs	r1, #100	; 0x64
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	3332      	adds	r3, #50	; 0x32
 8002638:	4a65      	ldr	r2, [pc, #404]	; (80027d0 <UART_SetConfig+0x384>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	f003 0207 	and.w	r2, r3, #7
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4442      	add	r2, r8
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	e26f      	b.n	8002b2e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800264e:	f7fe fef7 	bl	8001440 <HAL_RCC_GetPCLK1Freq>
 8002652:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	461d      	mov	r5, r3
 8002658:	f04f 0600 	mov.w	r6, #0
 800265c:	46a8      	mov	r8, r5
 800265e:	46b1      	mov	r9, r6
 8002660:	eb18 0308 	adds.w	r3, r8, r8
 8002664:	eb49 0409 	adc.w	r4, r9, r9
 8002668:	4698      	mov	r8, r3
 800266a:	46a1      	mov	r9, r4
 800266c:	eb18 0805 	adds.w	r8, r8, r5
 8002670:	eb49 0906 	adc.w	r9, r9, r6
 8002674:	f04f 0100 	mov.w	r1, #0
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002680:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002684:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002688:	4688      	mov	r8, r1
 800268a:	4691      	mov	r9, r2
 800268c:	eb18 0005 	adds.w	r0, r8, r5
 8002690:	eb49 0106 	adc.w	r1, r9, r6
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	461d      	mov	r5, r3
 800269a:	f04f 0600 	mov.w	r6, #0
 800269e:	196b      	adds	r3, r5, r5
 80026a0:	eb46 0406 	adc.w	r4, r6, r6
 80026a4:	461a      	mov	r2, r3
 80026a6:	4623      	mov	r3, r4
 80026a8:	f7fd fdb2 	bl	8000210 <__aeabi_uldivmod>
 80026ac:	4603      	mov	r3, r0
 80026ae:	460c      	mov	r4, r1
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <UART_SetConfig+0x384>)
 80026b4:	fba3 2302 	umull	r2, r3, r3, r2
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	461d      	mov	r5, r3
 80026c2:	f04f 0600 	mov.w	r6, #0
 80026c6:	46a9      	mov	r9, r5
 80026c8:	46b2      	mov	sl, r6
 80026ca:	eb19 0309 	adds.w	r3, r9, r9
 80026ce:	eb4a 040a 	adc.w	r4, sl, sl
 80026d2:	4699      	mov	r9, r3
 80026d4:	46a2      	mov	sl, r4
 80026d6:	eb19 0905 	adds.w	r9, r9, r5
 80026da:	eb4a 0a06 	adc.w	sl, sl, r6
 80026de:	f04f 0100 	mov.w	r1, #0
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026f2:	4689      	mov	r9, r1
 80026f4:	4692      	mov	sl, r2
 80026f6:	eb19 0005 	adds.w	r0, r9, r5
 80026fa:	eb4a 0106 	adc.w	r1, sl, r6
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	461d      	mov	r5, r3
 8002704:	f04f 0600 	mov.w	r6, #0
 8002708:	196b      	adds	r3, r5, r5
 800270a:	eb46 0406 	adc.w	r4, r6, r6
 800270e:	461a      	mov	r2, r3
 8002710:	4623      	mov	r3, r4
 8002712:	f7fd fd7d 	bl	8000210 <__aeabi_uldivmod>
 8002716:	4603      	mov	r3, r0
 8002718:	460c      	mov	r4, r1
 800271a:	461a      	mov	r2, r3
 800271c:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <UART_SetConfig+0x384>)
 800271e:	fba3 1302 	umull	r1, r3, r3, r2
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2164      	movs	r1, #100	; 0x64
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	3332      	adds	r3, #50	; 0x32
 8002730:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <UART_SetConfig+0x384>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800273e:	4498      	add	r8, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	461d      	mov	r5, r3
 8002744:	f04f 0600 	mov.w	r6, #0
 8002748:	46a9      	mov	r9, r5
 800274a:	46b2      	mov	sl, r6
 800274c:	eb19 0309 	adds.w	r3, r9, r9
 8002750:	eb4a 040a 	adc.w	r4, sl, sl
 8002754:	4699      	mov	r9, r3
 8002756:	46a2      	mov	sl, r4
 8002758:	eb19 0905 	adds.w	r9, r9, r5
 800275c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002760:	f04f 0100 	mov.w	r1, #0
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800276c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002770:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002774:	4689      	mov	r9, r1
 8002776:	4692      	mov	sl, r2
 8002778:	eb19 0005 	adds.w	r0, r9, r5
 800277c:	eb4a 0106 	adc.w	r1, sl, r6
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	461d      	mov	r5, r3
 8002786:	f04f 0600 	mov.w	r6, #0
 800278a:	196b      	adds	r3, r5, r5
 800278c:	eb46 0406 	adc.w	r4, r6, r6
 8002790:	461a      	mov	r2, r3
 8002792:	4623      	mov	r3, r4
 8002794:	f7fd fd3c 	bl	8000210 <__aeabi_uldivmod>
 8002798:	4603      	mov	r3, r0
 800279a:	460c      	mov	r4, r1
 800279c:	461a      	mov	r2, r3
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <UART_SetConfig+0x384>)
 80027a0:	fba3 1302 	umull	r1, r3, r3, r2
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	2164      	movs	r1, #100	; 0x64
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	3332      	adds	r3, #50	; 0x32
 80027b2:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <UART_SetConfig+0x384>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	f003 0207 	and.w	r2, r3, #7
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4442      	add	r2, r8
 80027c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80027c6:	e1b2      	b.n	8002b2e <UART_SetConfig+0x6e2>
 80027c8:	40011000 	.word	0x40011000
 80027cc:	40011400 	.word	0x40011400
 80027d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4ad7      	ldr	r2, [pc, #860]	; (8002b38 <UART_SetConfig+0x6ec>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d005      	beq.n	80027ea <UART_SetConfig+0x39e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4ad6      	ldr	r2, [pc, #856]	; (8002b3c <UART_SetConfig+0x6f0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	f040 80d1 	bne.w	800298c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80027ea:	f7fe fe3d 	bl	8001468 <HAL_RCC_GetPCLK2Freq>
 80027ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	469a      	mov	sl, r3
 80027f4:	f04f 0b00 	mov.w	fp, #0
 80027f8:	46d0      	mov	r8, sl
 80027fa:	46d9      	mov	r9, fp
 80027fc:	eb18 0308 	adds.w	r3, r8, r8
 8002800:	eb49 0409 	adc.w	r4, r9, r9
 8002804:	4698      	mov	r8, r3
 8002806:	46a1      	mov	r9, r4
 8002808:	eb18 080a 	adds.w	r8, r8, sl
 800280c:	eb49 090b 	adc.w	r9, r9, fp
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800281c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002820:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002824:	4688      	mov	r8, r1
 8002826:	4691      	mov	r9, r2
 8002828:	eb1a 0508 	adds.w	r5, sl, r8
 800282c:	eb4b 0609 	adc.w	r6, fp, r9
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	f04f 0400 	mov.w	r4, #0
 8002842:	0094      	lsls	r4, r2, #2
 8002844:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002848:	008b      	lsls	r3, r1, #2
 800284a:	461a      	mov	r2, r3
 800284c:	4623      	mov	r3, r4
 800284e:	4628      	mov	r0, r5
 8002850:	4631      	mov	r1, r6
 8002852:	f7fd fcdd 	bl	8000210 <__aeabi_uldivmod>
 8002856:	4603      	mov	r3, r0
 8002858:	460c      	mov	r4, r1
 800285a:	461a      	mov	r2, r3
 800285c:	4bb8      	ldr	r3, [pc, #736]	; (8002b40 <UART_SetConfig+0x6f4>)
 800285e:	fba3 2302 	umull	r2, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	469b      	mov	fp, r3
 800286c:	f04f 0c00 	mov.w	ip, #0
 8002870:	46d9      	mov	r9, fp
 8002872:	46e2      	mov	sl, ip
 8002874:	eb19 0309 	adds.w	r3, r9, r9
 8002878:	eb4a 040a 	adc.w	r4, sl, sl
 800287c:	4699      	mov	r9, r3
 800287e:	46a2      	mov	sl, r4
 8002880:	eb19 090b 	adds.w	r9, r9, fp
 8002884:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002888:	f04f 0100 	mov.w	r1, #0
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002894:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002898:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800289c:	4689      	mov	r9, r1
 800289e:	4692      	mov	sl, r2
 80028a0:	eb1b 0509 	adds.w	r5, fp, r9
 80028a4:	eb4c 060a 	adc.w	r6, ip, sl
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4619      	mov	r1, r3
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	f04f 0400 	mov.w	r4, #0
 80028ba:	0094      	lsls	r4, r2, #2
 80028bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028c0:	008b      	lsls	r3, r1, #2
 80028c2:	461a      	mov	r2, r3
 80028c4:	4623      	mov	r3, r4
 80028c6:	4628      	mov	r0, r5
 80028c8:	4631      	mov	r1, r6
 80028ca:	f7fd fca1 	bl	8000210 <__aeabi_uldivmod>
 80028ce:	4603      	mov	r3, r0
 80028d0:	460c      	mov	r4, r1
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b9a      	ldr	r3, [pc, #616]	; (8002b40 <UART_SetConfig+0x6f4>)
 80028d6:	fba3 1302 	umull	r1, r3, r3, r2
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2164      	movs	r1, #100	; 0x64
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	3332      	adds	r3, #50	; 0x32
 80028e8:	4a95      	ldr	r2, [pc, #596]	; (8002b40 <UART_SetConfig+0x6f4>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f4:	4498      	add	r8, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	469b      	mov	fp, r3
 80028fa:	f04f 0c00 	mov.w	ip, #0
 80028fe:	46d9      	mov	r9, fp
 8002900:	46e2      	mov	sl, ip
 8002902:	eb19 0309 	adds.w	r3, r9, r9
 8002906:	eb4a 040a 	adc.w	r4, sl, sl
 800290a:	4699      	mov	r9, r3
 800290c:	46a2      	mov	sl, r4
 800290e:	eb19 090b 	adds.w	r9, r9, fp
 8002912:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002916:	f04f 0100 	mov.w	r1, #0
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002922:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002926:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800292a:	4689      	mov	r9, r1
 800292c:	4692      	mov	sl, r2
 800292e:	eb1b 0509 	adds.w	r5, fp, r9
 8002932:	eb4c 060a 	adc.w	r6, ip, sl
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4619      	mov	r1, r3
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	f04f 0400 	mov.w	r4, #0
 8002948:	0094      	lsls	r4, r2, #2
 800294a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800294e:	008b      	lsls	r3, r1, #2
 8002950:	461a      	mov	r2, r3
 8002952:	4623      	mov	r3, r4
 8002954:	4628      	mov	r0, r5
 8002956:	4631      	mov	r1, r6
 8002958:	f7fd fc5a 	bl	8000210 <__aeabi_uldivmod>
 800295c:	4603      	mov	r3, r0
 800295e:	460c      	mov	r4, r1
 8002960:	461a      	mov	r2, r3
 8002962:	4b77      	ldr	r3, [pc, #476]	; (8002b40 <UART_SetConfig+0x6f4>)
 8002964:	fba3 1302 	umull	r1, r3, r3, r2
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	2164      	movs	r1, #100	; 0x64
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	3332      	adds	r3, #50	; 0x32
 8002976:	4a72      	ldr	r2, [pc, #456]	; (8002b40 <UART_SetConfig+0x6f4>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	f003 020f 	and.w	r2, r3, #15
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4442      	add	r2, r8
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	e0d0      	b.n	8002b2e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800298c:	f7fe fd58 	bl	8001440 <HAL_RCC_GetPCLK1Freq>
 8002990:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	469a      	mov	sl, r3
 8002996:	f04f 0b00 	mov.w	fp, #0
 800299a:	46d0      	mov	r8, sl
 800299c:	46d9      	mov	r9, fp
 800299e:	eb18 0308 	adds.w	r3, r8, r8
 80029a2:	eb49 0409 	adc.w	r4, r9, r9
 80029a6:	4698      	mov	r8, r3
 80029a8:	46a1      	mov	r9, r4
 80029aa:	eb18 080a 	adds.w	r8, r8, sl
 80029ae:	eb49 090b 	adc.w	r9, r9, fp
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029c6:	4688      	mov	r8, r1
 80029c8:	4691      	mov	r9, r2
 80029ca:	eb1a 0508 	adds.w	r5, sl, r8
 80029ce:	eb4b 0609 	adc.w	r6, fp, r9
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4619      	mov	r1, r3
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	f04f 0400 	mov.w	r4, #0
 80029e4:	0094      	lsls	r4, r2, #2
 80029e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029ea:	008b      	lsls	r3, r1, #2
 80029ec:	461a      	mov	r2, r3
 80029ee:	4623      	mov	r3, r4
 80029f0:	4628      	mov	r0, r5
 80029f2:	4631      	mov	r1, r6
 80029f4:	f7fd fc0c 	bl	8000210 <__aeabi_uldivmod>
 80029f8:	4603      	mov	r3, r0
 80029fa:	460c      	mov	r4, r1
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <UART_SetConfig+0x6f4>)
 8002a00:	fba3 2302 	umull	r2, r3, r3, r2
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	469b      	mov	fp, r3
 8002a0e:	f04f 0c00 	mov.w	ip, #0
 8002a12:	46d9      	mov	r9, fp
 8002a14:	46e2      	mov	sl, ip
 8002a16:	eb19 0309 	adds.w	r3, r9, r9
 8002a1a:	eb4a 040a 	adc.w	r4, sl, sl
 8002a1e:	4699      	mov	r9, r3
 8002a20:	46a2      	mov	sl, r4
 8002a22:	eb19 090b 	adds.w	r9, r9, fp
 8002a26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a2a:	f04f 0100 	mov.w	r1, #0
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a3e:	4689      	mov	r9, r1
 8002a40:	4692      	mov	sl, r2
 8002a42:	eb1b 0509 	adds.w	r5, fp, r9
 8002a46:	eb4c 060a 	adc.w	r6, ip, sl
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	f04f 0400 	mov.w	r4, #0
 8002a5c:	0094      	lsls	r4, r2, #2
 8002a5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a62:	008b      	lsls	r3, r1, #2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4623      	mov	r3, r4
 8002a68:	4628      	mov	r0, r5
 8002a6a:	4631      	mov	r1, r6
 8002a6c:	f7fd fbd0 	bl	8000210 <__aeabi_uldivmod>
 8002a70:	4603      	mov	r3, r0
 8002a72:	460c      	mov	r4, r1
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b32      	ldr	r3, [pc, #200]	; (8002b40 <UART_SetConfig+0x6f4>)
 8002a78:	fba3 1302 	umull	r1, r3, r3, r2
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	2164      	movs	r1, #100	; 0x64
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	3332      	adds	r3, #50	; 0x32
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <UART_SetConfig+0x6f4>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a96:	4498      	add	r8, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	469b      	mov	fp, r3
 8002a9c:	f04f 0c00 	mov.w	ip, #0
 8002aa0:	46d9      	mov	r9, fp
 8002aa2:	46e2      	mov	sl, ip
 8002aa4:	eb19 0309 	adds.w	r3, r9, r9
 8002aa8:	eb4a 040a 	adc.w	r4, sl, sl
 8002aac:	4699      	mov	r9, r3
 8002aae:	46a2      	mov	sl, r4
 8002ab0:	eb19 090b 	adds.w	r9, r9, fp
 8002ab4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ab8:	f04f 0100 	mov.w	r1, #0
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ac4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ac8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002acc:	4689      	mov	r9, r1
 8002ace:	4692      	mov	sl, r2
 8002ad0:	eb1b 0509 	adds.w	r5, fp, r9
 8002ad4:	eb4c 060a 	adc.w	r6, ip, sl
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4619      	mov	r1, r3
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	f04f 0400 	mov.w	r4, #0
 8002aea:	0094      	lsls	r4, r2, #2
 8002aec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002af0:	008b      	lsls	r3, r1, #2
 8002af2:	461a      	mov	r2, r3
 8002af4:	4623      	mov	r3, r4
 8002af6:	4628      	mov	r0, r5
 8002af8:	4631      	mov	r1, r6
 8002afa:	f7fd fb89 	bl	8000210 <__aeabi_uldivmod>
 8002afe:	4603      	mov	r3, r0
 8002b00:	460c      	mov	r4, r1
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <UART_SetConfig+0x6f4>)
 8002b06:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2164      	movs	r1, #100	; 0x64
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	3332      	adds	r3, #50	; 0x32
 8002b18:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <UART_SetConfig+0x6f4>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	f003 020f 	and.w	r2, r3, #15
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4442      	add	r2, r8
 8002b2a:	609a      	str	r2, [r3, #8]
}
 8002b2c:	e7ff      	b.n	8002b2e <UART_SetConfig+0x6e2>
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	40011400 	.word	0x40011400
 8002b40:	51eb851f 	.word	0x51eb851f

08002b44 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f103 0208 	add.w	r2, r3, #8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b5c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f103 0208 	add.w	r2, r3, #8
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f103 0208 	add.w	r2, r3, #8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfc:	d103      	bne.n	8002c06 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e00c      	b.n	8002c20 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3308      	adds	r3, #8
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e002      	b.n	8002c14 <vListInsert+0x2e>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d2f6      	bcs.n	8002c0e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	601a      	str	r2, [r3, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6892      	ldr	r2, [r2, #8]
 8002c6e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6852      	ldr	r2, [r2, #4]
 8002c78:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d103      	bne.n	8002c8c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	1e5a      	subs	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <xQueueGenericReset+0x28>
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	e7fe      	b.n	8002cd2 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002cd4:	f002 f87c 	bl	8004dd0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	68f9      	ldr	r1, [r7, #12]
 8002ce2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	441a      	add	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	3b01      	subs	r3, #1
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	441a      	add	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	22ff      	movs	r2, #255	; 0xff
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	22ff      	movs	r2, #255	; 0xff
 8002d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d114      	bne.n	8002d54 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01a      	beq.n	8002d68 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3310      	adds	r3, #16
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 f824 	bl	8003d84 <xTaskRemoveFromEventList>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d012      	beq.n	8002d68 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <xQueueGenericReset+0xcc>)
 8002d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	e009      	b.n	8002d68 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3310      	adds	r3, #16
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fef3 	bl	8002b44 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3324      	adds	r3, #36	; 0x24
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff feee 	bl	8002b44 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002d68:	f002 f860 	bl	8004e2c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002d6c:	2301      	movs	r3, #1
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08c      	sub	sp, #48	; 0x30
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <xQueueGenericCreate+0x28>
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	e7fe      	b.n	8002da2 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	fb02 f303 	mul.w	r3, r2, r3
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <xQueueGenericCreate+0x46>
 8002db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d101      	bne.n	8002dc6 <xQueueGenericCreate+0x4a>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <xQueueGenericCreate+0x4c>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <xQueueGenericCreate+0x64>
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e7fe      	b.n	8002dde <xQueueGenericCreate+0x62>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	3350      	adds	r3, #80	; 0x50
 8002de4:	4618      	mov	r0, r3
 8002de6:	f002 f90d 	bl	8005004 <pvPortMalloc>
 8002dea:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <xQueueGenericCreate+0x92>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3350      	adds	r3, #80	; 0x50
 8002dfa:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dfc:	79fa      	ldrb	r2, [r7, #7]
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	4613      	mov	r3, r2
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f805 	bl	8002e18 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
    }
 8002e10:	4618      	mov	r0, r3
 8002e12:	3728      	adds	r7, #40	; 0x28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d103      	bne.n	8002e34 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e002      	b.n	8002e3a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e46:	2101      	movs	r1, #1
 8002e48:	69b8      	ldr	r0, [r7, #24]
 8002e4a:	f7ff ff2f 	bl	8002cac <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08e      	sub	sp, #56	; 0x38
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <xQueueGenericSend+0x30>
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8e:	e7fe      	b.n	8002e8e <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d103      	bne.n	8002e9e <xQueueGenericSend+0x3e>
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <xQueueGenericSend+0x42>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <xQueueGenericSend+0x44>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <xQueueGenericSend+0x5c>
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eba:	e7fe      	b.n	8002eba <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d103      	bne.n	8002eca <xQueueGenericSend+0x6a>
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <xQueueGenericSend+0x6e>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <xQueueGenericSend+0x70>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <xQueueGenericSend+0x88>
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	623b      	str	r3, [r7, #32]
 8002ee6:	e7fe      	b.n	8002ee6 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ee8:	f001 f8e4 	bl	80040b4 <xTaskGetSchedulerState>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <xQueueGenericSend+0x98>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <xQueueGenericSend+0x9c>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <xQueueGenericSend+0x9e>
 8002efc:	2300      	movs	r3, #0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <xQueueGenericSend+0xb6>
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	e7fe      	b.n	8002f14 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f16:	f001 ff5b 	bl	8004dd0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d302      	bcc.n	8002f2c <xQueueGenericSend+0xcc>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d129      	bne.n	8002f80 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f32:	f000 fa11 	bl	8003358 <prvCopyDataToQueue>
 8002f36:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d010      	beq.n	8002f62 <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	3324      	adds	r3, #36	; 0x24
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 ff1d 	bl	8003d84 <xTaskRemoveFromEventList>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002f50:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <xQueueGenericSend+0x1f0>)
 8002f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	e00a      	b.n	8002f78 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d007      	beq.n	8002f78 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002f68:	4b39      	ldr	r3, [pc, #228]	; (8003050 <xQueueGenericSend+0x1f0>)
 8002f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002f78:	f001 ff58 	bl	8004e2c <vPortExitCritical>
                return pdPASS;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e063      	b.n	8003048 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002f86:	f001 ff51 	bl	8004e2c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e05c      	b.n	8003048 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d106      	bne.n	8002fa2 <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 ff55 	bl	8003e48 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002fa2:	f001 ff43 	bl	8004e2c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002fa6:	f000 fcd3 	bl	8003950 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002faa:	f001 ff11 	bl	8004dd0 <vPortEnterCritical>
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fb4:	b25b      	sxtb	r3, r3
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fba:	d103      	bne.n	8002fc4 <xQueueGenericSend+0x164>
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fca:	b25b      	sxtb	r3, r3
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd0:	d103      	bne.n	8002fda <xQueueGenericSend+0x17a>
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fda:	f001 ff27 	bl	8004e2c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fde:	1d3a      	adds	r2, r7, #4
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 ff44 	bl	8003e74 <xTaskCheckForTimeOut>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d124      	bne.n	800303c <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ff2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff4:	f000 faa8 	bl	8003548 <prvIsQueueFull>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d018      	beq.n	8003030 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	3310      	adds	r3, #16
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fe6e 	bl	8003ce8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800300c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800300e:	f000 fa33 	bl	8003478 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003012:	f000 fcab 	bl	800396c <xTaskResumeAll>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	f47f af7c 	bne.w	8002f16 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <xQueueGenericSend+0x1f0>)
 8003020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	e772      	b.n	8002f16 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003032:	f000 fa21 	bl	8003478 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003036:	f000 fc99 	bl	800396c <xTaskResumeAll>
 800303a:	e76c      	b.n	8002f16 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800303c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800303e:	f000 fa1b 	bl	8003478 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003042:	f000 fc93 	bl	800396c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003046:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003048:	4618      	mov	r0, r3
 800304a:	3738      	adds	r7, #56	; 0x38
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	e000ed04 	.word	0xe000ed04

08003054 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b090      	sub	sp, #64	; 0x40
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <xQueueGenericSendFromISR+0x2c>
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
 800307e:	e7fe      	b.n	800307e <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <xQueueGenericSendFromISR+0x3a>
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <xQueueGenericSendFromISR+0x3e>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <xQueueGenericSendFromISR+0x40>
 8003092:	2300      	movs	r3, #0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <xQueueGenericSendFromISR+0x58>
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
 80030aa:	e7fe      	b.n	80030aa <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d103      	bne.n	80030ba <xQueueGenericSendFromISR+0x66>
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <xQueueGenericSendFromISR+0x6a>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <xQueueGenericSendFromISR+0x6c>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <xQueueGenericSendFromISR+0x84>
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	623b      	str	r3, [r7, #32]
 80030d6:	e7fe      	b.n	80030d6 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030d8:	f001 ff56 	bl	8004f88 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80030dc:	f3ef 8211 	mrs	r2, BASEPRI
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	61fa      	str	r2, [r7, #28]
 80030f2:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80030f4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	429a      	cmp	r2, r3
 8003102:	d302      	bcc.n	800310a <xQueueGenericSendFromISR+0xb6>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d13d      	bne.n	8003186 <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003110:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003120:	f000 f91a 	bl	8003358 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003124:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800312c:	d112      	bne.n	8003154 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	2b00      	cmp	r3, #0
 8003134:	d024      	beq.n	8003180 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003138:	3324      	adds	r3, #36	; 0x24
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fe22 	bl	8003d84 <xTaskRemoveFromEventList>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01c      	beq.n	8003180 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d019      	beq.n	8003180 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e015      	b.n	8003180 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003154:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003158:	2b7f      	cmp	r3, #127	; 0x7f
 800315a:	d109      	bne.n	8003170 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e7fe      	b.n	800316e <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003170:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003174:	3301      	adds	r3, #1
 8003176:	b2db      	uxtb	r3, r3
 8003178:	b25a      	sxtb	r2, r3
 800317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003180:	2301      	movs	r3, #1
 8003182:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003184:	e001      	b.n	800318a <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003186:	2300      	movs	r3, #0
 8003188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003196:	4618      	mov	r0, r3
 8003198:	3740      	adds	r7, #64	; 0x40
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08c      	sub	sp, #48	; 0x30
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <xQueueReceive+0x2e>
        __asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	e7fe      	b.n	80031cc <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <xQueueReceive+0x3c>
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <xQueueReceive+0x40>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <xQueueReceive+0x42>
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <xQueueReceive+0x5a>
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	e7fe      	b.n	80031f8 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031fa:	f000 ff5b 	bl	80040b4 <xTaskGetSchedulerState>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <xQueueReceive+0x6a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <xQueueReceive+0x6e>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <xQueueReceive+0x70>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <xQueueReceive+0x88>
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	e7fe      	b.n	8003226 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003228:	f001 fdd2 	bl	8004dd0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01f      	beq.n	8003278 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800323c:	f000 f8f6 	bl	800342c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	1e5a      	subs	r2, r3, #1
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00f      	beq.n	8003270 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	3310      	adds	r3, #16
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fd95 	bl	8003d84 <xTaskRemoveFromEventList>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003260:	4b3c      	ldr	r3, [pc, #240]	; (8003354 <xQueueReceive+0x1b4>)
 8003262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003270:	f001 fddc 	bl	8004e2c <vPortExitCritical>
                return pdPASS;
 8003274:	2301      	movs	r3, #1
 8003276:	e069      	b.n	800334c <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800327e:	f001 fdd5 	bl	8004e2c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003282:	2300      	movs	r3, #0
 8003284:	e062      	b.n	800334c <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800328c:	f107 0310 	add.w	r3, r7, #16
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fdd9 	bl	8003e48 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003296:	2301      	movs	r3, #1
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800329a:	f001 fdc7 	bl	8004e2c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800329e:	f000 fb57 	bl	8003950 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80032a2:	f001 fd95 	bl	8004dd0 <vPortEnterCritical>
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b2:	d103      	bne.n	80032bc <xQueueReceive+0x11c>
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c2:	b25b      	sxtb	r3, r3
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c8:	d103      	bne.n	80032d2 <xQueueReceive+0x132>
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d2:	f001 fdab 	bl	8004e2c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032d6:	1d3a      	adds	r2, r7, #4
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fdc8 	bl	8003e74 <xTaskCheckForTimeOut>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d123      	bne.n	8003332 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ec:	f000 f916 	bl	800351c <prvIsQueueEmpty>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d017      	beq.n	8003326 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	3324      	adds	r3, #36	; 0x24
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fcf2 	bl	8003ce8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003306:	f000 f8b7 	bl	8003478 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800330a:	f000 fb2f 	bl	800396c <xTaskResumeAll>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d189      	bne.n	8003228 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <xQueueReceive+0x1b4>)
 8003316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	e780      	b.n	8003228 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003328:	f000 f8a6 	bl	8003478 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800332c:	f000 fb1e 	bl	800396c <xTaskResumeAll>
 8003330:	e77a      	b.n	8003228 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003334:	f000 f8a0 	bl	8003478 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003338:	f000 fb18 	bl	800396c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800333c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800333e:	f000 f8ed 	bl	800351c <prvIsQueueEmpty>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	f43f af6f 	beq.w	8003228 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800334a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800334c:	4618      	mov	r0, r3
 800334e:	3730      	adds	r7, #48	; 0x30
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10d      	bne.n	8003392 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d14d      	bne.n	800341a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 feb4 	bl	80040f0 <xTaskPriorityDisinherit>
 8003388:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	e043      	b.n	800341a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d119      	bne.n	80033cc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6858      	ldr	r0, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	461a      	mov	r2, r3
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	f002 f836 	bl	8005414 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	441a      	add	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d32b      	bcc.n	800341a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	e026      	b.n	800341a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68d8      	ldr	r0, [r3, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	461a      	mov	r2, r3
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	f002 f81c 	bl	8005414 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	425b      	negs	r3, r3
 80033e6:	441a      	add	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d207      	bcs.n	8003408 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	425b      	negs	r3, r3
 8003402:	441a      	add	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d105      	bne.n	800341a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	3b01      	subs	r3, #1
 8003418:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003422:	697b      	ldr	r3, [r7, #20]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d018      	beq.n	8003470 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	441a      	add	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	429a      	cmp	r2, r3
 8003456:	d303      	bcc.n	8003460 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68d9      	ldr	r1, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	461a      	mov	r2, r3
 800346a:	6838      	ldr	r0, [r7, #0]
 800346c:	f001 ffd2 	bl	8005414 <memcpy>
    }
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003480:	f001 fca6 	bl	8004dd0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800348a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800348c:	e011      	b.n	80034b2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2b00      	cmp	r3, #0
 8003494:	d012      	beq.n	80034bc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3324      	adds	r3, #36	; 0x24
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fc72 	bl	8003d84 <xTaskRemoveFromEventList>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80034a6:	f000 fd49 	bl	8003f3c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80034b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	dce9      	bgt.n	800348e <prvUnlockQueue+0x16>
 80034ba:	e000      	b.n	80034be <prvUnlockQueue+0x46>
                        break;
 80034bc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	22ff      	movs	r2, #255	; 0xff
 80034c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80034c6:	f001 fcb1 	bl	8004e2c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80034ca:	f001 fc81 	bl	8004dd0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034d4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80034d6:	e011      	b.n	80034fc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d012      	beq.n	8003506 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3310      	adds	r3, #16
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fc4d 	bl	8003d84 <xTaskRemoveFromEventList>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80034f0:	f000 fd24 	bl	8003f3c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80034f4:	7bbb      	ldrb	r3, [r7, #14]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80034fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003500:	2b00      	cmp	r3, #0
 8003502:	dce9      	bgt.n	80034d8 <prvUnlockQueue+0x60>
 8003504:	e000      	b.n	8003508 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003506:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	22ff      	movs	r2, #255	; 0xff
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003510:	f001 fc8c 	bl	8004e2c <vPortExitCritical>
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003524:	f001 fc54 	bl	8004dd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003530:	2301      	movs	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	e001      	b.n	800353a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800353a:	f001 fc77 	bl	8004e2c <vPortExitCritical>

    return xReturn;
 800353e:	68fb      	ldr	r3, [r7, #12]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003550:	f001 fc3e 	bl	8004dd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355c:	429a      	cmp	r2, r3
 800355e:	d102      	bne.n	8003566 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003560:	2301      	movs	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e001      	b.n	800356a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800356a:	f001 fc5f 	bl	8004e2c <vPortExitCritical>

    return xReturn;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	e014      	b.n	80035b2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003588:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <vQueueAddToRegistry+0x4c>)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003594:	490b      	ldr	r1, [pc, #44]	; (80035c4 <vQueueAddToRegistry+0x4c>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800359e:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <vQueueAddToRegistry+0x4c>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80035aa:	e005      	b.n	80035b8 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3301      	adds	r3, #1
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b07      	cmp	r3, #7
 80035b6:	d9e7      	bls.n	8003588 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	20012e18 	.word	0x20012e18

080035c8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80035d8:	f001 fbfa 	bl	8004dd0 <vPortEnterCritical>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e8:	d103      	bne.n	80035f2 <vQueueWaitForMessageRestricted+0x2a>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035fe:	d103      	bne.n	8003608 <vQueueWaitForMessageRestricted+0x40>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003608:	f001 fc10 	bl	8004e2c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	2b00      	cmp	r3, #0
 8003612:	d106      	bne.n	8003622 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	3324      	adds	r3, #36	; 0x24
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fb87 	bl	8003d30 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f7ff ff28 	bl	8003478 <prvUnlockQueue>
    }
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003630:	b580      	push	{r7, lr}
 8003632:	b08c      	sub	sp, #48	; 0x30
 8003634:	af04      	add	r7, sp, #16
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4618      	mov	r0, r3
 8003646:	f001 fcdd 	bl	8005004 <pvPortMalloc>
 800364a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00e      	beq.n	8003670 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003652:	2058      	movs	r0, #88	; 0x58
 8003654:	f001 fcd6 	bl	8005004 <pvPortMalloc>
 8003658:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
 8003666:	e005      	b.n	8003674 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003668:	6978      	ldr	r0, [r7, #20]
 800366a:	f001 fd93 	bl	8005194 <vPortFree>
 800366e:	e001      	b.n	8003674 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003670:	2300      	movs	r3, #0
 8003672:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d013      	beq.n	80036a2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	2300      	movs	r3, #0
 800367e:	9303      	str	r3, [sp, #12]
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	9302      	str	r3, [sp, #8]
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f80e 	bl	80036b2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003696:	69f8      	ldr	r0, [r7, #28]
 8003698:	f000 f8a0 	bl	80037dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800369c:	2301      	movs	r3, #1
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	e002      	b.n	80036a8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036a6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80036a8:	69bb      	ldr	r3, [r7, #24]
    }
 80036aa:	4618      	mov	r0, r3
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b088      	sub	sp, #32
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	461a      	mov	r2, r3
 80036ca:	21a5      	movs	r1, #165	; 0xa5
 80036cc:	f001 fead 	bl	800542a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036da:	3b01      	subs	r3, #1
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f023 0307 	bic.w	r3, r3, #7
 80036e8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <prvInitialiseNewTask+0x56>
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e7fe      	b.n	8003706 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01f      	beq.n	800374e <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	e012      	b.n	800373a <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	7819      	ldrb	r1, [r3, #0]
 800371c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	4413      	add	r3, r2
 8003722:	3334      	adds	r3, #52	; 0x34
 8003724:	460a      	mov	r2, r1
 8003726:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d006      	beq.n	8003742 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	3301      	adds	r3, #1
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	2b09      	cmp	r3, #9
 800373e:	d9e9      	bls.n	8003714 <prvInitialiseNewTask+0x62>
 8003740:	e000      	b.n	8003744 <prvInitialiseNewTask+0x92>
            {
                break;
 8003742:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800374c:	e003      	b.n	8003756 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003758:	2b04      	cmp	r3, #4
 800375a:	d901      	bls.n	8003760 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800375c:	2304      	movs	r3, #4
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003764:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800376a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	2200      	movs	r2, #0
 8003770:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	3304      	adds	r3, #4
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fa04 	bl	8002b84 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	3318      	adds	r3, #24
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff f9ff 	bl	8002b84 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	f1c3 0205 	rsb	r2, r3, #5
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	3350      	adds	r3, #80	; 0x50
 80037a0:	2204      	movs	r2, #4
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f001 fe40 	bl	800542a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	3354      	adds	r3, #84	; 0x54
 80037ae:	2201      	movs	r2, #1
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f001 fe39 	bl	800542a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	68f9      	ldr	r1, [r7, #12]
 80037bc:	69b8      	ldr	r0, [r7, #24]
 80037be:	f001 f9dd 	bl	8004b7c <pxPortInitialiseStack>
 80037c2:	4602      	mov	r2, r0
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037d4:	bf00      	nop
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80037e4:	f001 faf4 	bl	8004dd0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80037e8:	4b2c      	ldr	r3, [pc, #176]	; (800389c <prvAddNewTaskToReadyList+0xc0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	4a2b      	ldr	r2, [pc, #172]	; (800389c <prvAddNewTaskToReadyList+0xc0>)
 80037f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80037f2:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <prvAddNewTaskToReadyList+0xc4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80037fa:	4a29      	ldr	r2, [pc, #164]	; (80038a0 <prvAddNewTaskToReadyList+0xc4>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003800:	4b26      	ldr	r3, [pc, #152]	; (800389c <prvAddNewTaskToReadyList+0xc0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d110      	bne.n	800382a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003808:	f000 fbbc 	bl	8003f84 <prvInitialiseTaskLists>
 800380c:	e00d      	b.n	800382a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800380e:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <prvAddNewTaskToReadyList+0xc8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003816:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <prvAddNewTaskToReadyList+0xc4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	429a      	cmp	r2, r3
 8003822:	d802      	bhi.n	800382a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <prvAddNewTaskToReadyList+0xc4>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800382a:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <prvAddNewTaskToReadyList+0xcc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <prvAddNewTaskToReadyList+0xcc>)
 8003832:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <prvAddNewTaskToReadyList+0xcc>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	2201      	movs	r2, #1
 8003842:	409a      	lsls	r2, r3
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <prvAddNewTaskToReadyList+0xd0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4313      	orrs	r3, r2
 800384a:	4a18      	ldr	r2, [pc, #96]	; (80038ac <prvAddNewTaskToReadyList+0xd0>)
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4a15      	ldr	r2, [pc, #84]	; (80038b0 <prvAddNewTaskToReadyList+0xd4>)
 800385c:	441a      	add	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3304      	adds	r3, #4
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f7ff f99a 	bl	8002b9e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800386a:	f001 fadf 	bl	8004e2c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800386e:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <prvAddNewTaskToReadyList+0xc8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00e      	beq.n	8003894 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <prvAddNewTaskToReadyList+0xc4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	429a      	cmp	r2, r3
 8003882:	d207      	bcs.n	8003894 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <prvAddNewTaskToReadyList+0xd8>)
 8003886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000104 	.word	0x20000104
 80038a0:	2000002c 	.word	0x2000002c
 80038a4:	20000110 	.word	0x20000110
 80038a8:	20000120 	.word	0x20000120
 80038ac:	2000010c 	.word	0x2000010c
 80038b0:	20000030 	.word	0x20000030
 80038b4:	e000ed04 	.word	0xe000ed04

080038b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80038be:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <vTaskStartScheduler+0x80>)
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	2300      	movs	r3, #0
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	2300      	movs	r3, #0
 80038c8:	2282      	movs	r2, #130	; 0x82
 80038ca:	491c      	ldr	r1, [pc, #112]	; (800393c <vTaskStartScheduler+0x84>)
 80038cc:	481c      	ldr	r0, [pc, #112]	; (8003940 <vTaskStartScheduler+0x88>)
 80038ce:	f7ff feaf 	bl	8003630 <xTaskCreate>
 80038d2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d102      	bne.n	80038e0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80038da:	f000 fe41 	bl	8004560 <xTimerCreateTimerTask>
 80038de:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d115      	bne.n	8003912 <vTaskStartScheduler+0x5a>
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <vTaskStartScheduler+0x8c>)
 80038fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038fe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <vTaskStartScheduler+0x90>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003906:	4b11      	ldr	r3, [pc, #68]	; (800394c <vTaskStartScheduler+0x94>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800390c:	f001 f9c2 	bl	8004c94 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 8003910:	e00d      	b.n	800392e <vTaskStartScheduler+0x76>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003918:	d109      	bne.n	800392e <vTaskStartScheduler+0x76>
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	e7fe      	b.n	800392c <vTaskStartScheduler+0x74>
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000128 	.word	0x20000128
 800393c:	080054b0 	.word	0x080054b0
 8003940:	08003f55 	.word	0x08003f55
 8003944:	20000124 	.word	0x20000124
 8003948:	20000110 	.word	0x20000110
 800394c:	20000108 	.word	0x20000108

08003950 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <vTaskSuspendAll+0x18>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	4a03      	ldr	r2, [pc, #12]	; (8003968 <vTaskSuspendAll+0x18>)
 800395c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800395e:	bf00      	nop
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	2000012c 	.word	0x2000012c

0800396c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800397a:	4b41      	ldr	r3, [pc, #260]	; (8003a80 <xTaskResumeAll+0x114>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <xTaskResumeAll+0x2a>
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	e7fe      	b.n	8003994 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003996:	f001 fa1b 	bl	8004dd0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800399a:	4b39      	ldr	r3, [pc, #228]	; (8003a80 <xTaskResumeAll+0x114>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3b01      	subs	r3, #1
 80039a0:	4a37      	ldr	r2, [pc, #220]	; (8003a80 <xTaskResumeAll+0x114>)
 80039a2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <xTaskResumeAll+0x114>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d161      	bne.n	8003a70 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039ac:	4b35      	ldr	r3, [pc, #212]	; (8003a84 <xTaskResumeAll+0x118>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d05d      	beq.n	8003a70 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039b4:	e02e      	b.n	8003a14 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039b6:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <xTaskResumeAll+0x11c>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3318      	adds	r3, #24
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff f948 	bl	8002c58 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff f943 	bl	8002c58 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	2201      	movs	r2, #1
 80039d8:	409a      	lsls	r2, r3
 80039da:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <xTaskResumeAll+0x120>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	4a2a      	ldr	r2, [pc, #168]	; (8003a8c <xTaskResumeAll+0x120>)
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4a27      	ldr	r2, [pc, #156]	; (8003a90 <xTaskResumeAll+0x124>)
 80039f2:	441a      	add	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f7ff f8cf 	bl	8002b9e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a04:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <xTaskResumeAll+0x128>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d302      	bcc.n	8003a14 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8003a0e:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <xTaskResumeAll+0x12c>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a14:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <xTaskResumeAll+0x11c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1cc      	bne.n	80039b6 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003a22:	f000 fb2b 	bl	800407c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <xTaskResumeAll+0x130>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d010      	beq.n	8003a54 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003a32:	f000 f847 	bl	8003ac4 <xTaskIncrementTick>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8003a3c:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <xTaskResumeAll+0x12c>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f1      	bne.n	8003a32 <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <xTaskResumeAll+0x130>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003a54:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <xTaskResumeAll+0x12c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d009      	beq.n	8003a70 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <xTaskResumeAll+0x134>)
 8003a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003a70:	f001 f9dc 	bl	8004e2c <vPortExitCritical>

    return xAlreadyYielded;
 8003a74:	68bb      	ldr	r3, [r7, #8]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	2000012c 	.word	0x2000012c
 8003a84:	20000104 	.word	0x20000104
 8003a88:	200000c4 	.word	0x200000c4
 8003a8c:	2000010c 	.word	0x2000010c
 8003a90:	20000030 	.word	0x20000030
 8003a94:	2000002c 	.word	0x2000002c
 8003a98:	20000118 	.word	0x20000118
 8003a9c:	20000114 	.word	0x20000114
 8003aa0:	e000ed04 	.word	0xe000ed04

08003aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <xTaskGetTickCount+0x1c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003ab0:	687b      	ldr	r3, [r7, #4]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000108 	.word	0x20000108

08003ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ace:	4b4e      	ldr	r3, [pc, #312]	; (8003c08 <xTaskIncrementTick+0x144>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 808d 	bne.w	8003bf2 <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ad8:	4b4c      	ldr	r3, [pc, #304]	; (8003c0c <xTaskIncrementTick+0x148>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003ae0:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <xTaskIncrementTick+0x148>)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11f      	bne.n	8003b2c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003aec:	4b48      	ldr	r3, [pc, #288]	; (8003c10 <xTaskIncrementTick+0x14c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <xTaskIncrementTick+0x46>
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	e7fe      	b.n	8003b08 <xTaskIncrementTick+0x44>
 8003b0a:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <xTaskIncrementTick+0x14c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	4b40      	ldr	r3, [pc, #256]	; (8003c14 <xTaskIncrementTick+0x150>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a3e      	ldr	r2, [pc, #248]	; (8003c10 <xTaskIncrementTick+0x14c>)
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4a3e      	ldr	r2, [pc, #248]	; (8003c14 <xTaskIncrementTick+0x150>)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <xTaskIncrementTick+0x154>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3301      	adds	r3, #1
 8003b24:	4a3c      	ldr	r2, [pc, #240]	; (8003c18 <xTaskIncrementTick+0x154>)
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	f000 faa8 	bl	800407c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003b2c:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <xTaskIncrementTick+0x158>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d348      	bcc.n	8003bc8 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b36:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <xTaskIncrementTick+0x14c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b40:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <xTaskIncrementTick+0x158>)
 8003b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b46:	601a      	str	r2, [r3, #0]
                    break;
 8003b48:	e03e      	b.n	8003bc8 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b4a:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <xTaskIncrementTick+0x14c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d203      	bcs.n	8003b6a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003b62:	4a2e      	ldr	r2, [pc, #184]	; (8003c1c <xTaskIncrementTick+0x158>)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b68:	e02e      	b.n	8003bc8 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f872 	bl	8002c58 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3318      	adds	r3, #24
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff f869 	bl	8002c58 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <xTaskIncrementTick+0x15c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <xTaskIncrementTick+0x15c>)
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <xTaskIncrementTick+0x160>)
 8003ba6:	441a      	add	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f7fe fff5 	bl	8002b9e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <xTaskIncrementTick+0x164>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d3b9      	bcc.n	8003b36 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bc6:	e7b6      	b.n	8003b36 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bc8:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <xTaskIncrementTick+0x164>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bce:	4915      	ldr	r1, [pc, #84]	; (8003c24 <xTaskIncrementTick+0x160>)
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d901      	bls.n	8003be4 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8003be0:	2301      	movs	r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <xTaskIncrementTick+0x168>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8003bec:	2301      	movs	r3, #1
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e004      	b.n	8003bfc <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003bf2:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <xTaskIncrementTick+0x16c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	4a0d      	ldr	r2, [pc, #52]	; (8003c30 <xTaskIncrementTick+0x16c>)
 8003bfa:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003bfc:	697b      	ldr	r3, [r7, #20]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	2000012c 	.word	0x2000012c
 8003c0c:	20000108 	.word	0x20000108
 8003c10:	200000bc 	.word	0x200000bc
 8003c14:	200000c0 	.word	0x200000c0
 8003c18:	2000011c 	.word	0x2000011c
 8003c1c:	20000124 	.word	0x20000124
 8003c20:	2000010c 	.word	0x2000010c
 8003c24:	20000030 	.word	0x20000030
 8003c28:	2000002c 	.word	0x2000002c
 8003c2c:	20000118 	.word	0x20000118
 8003c30:	20000114 	.word	0x20000114

08003c34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c3a:	4b26      	ldr	r3, [pc, #152]	; (8003cd4 <vTaskSwitchContext+0xa0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003c42:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <vTaskSwitchContext+0xa4>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003c48:	e03e      	b.n	8003cc8 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8003c4a:	4b23      	ldr	r3, [pc, #140]	; (8003cd8 <vTaskSwitchContext+0xa4>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c50:	4b22      	ldr	r3, [pc, #136]	; (8003cdc <vTaskSwitchContext+0xa8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	fab3 f383 	clz	r3, r3
 8003c5c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
 8003c60:	f1c3 031f 	rsb	r3, r3, #31
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	491e      	ldr	r1, [pc, #120]	; (8003ce0 <vTaskSwitchContext+0xac>)
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <vTaskSwitchContext+0x5a>
        __asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	e7fe      	b.n	8003c8c <vTaskSwitchContext+0x58>
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4a11      	ldr	r2, [pc, #68]	; (8003ce0 <vTaskSwitchContext+0xac>)
 8003c9a:	4413      	add	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d104      	bne.n	8003cbe <vTaskSwitchContext+0x8a>
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <vTaskSwitchContext+0xb0>)
 8003cc6:	6013      	str	r3, [r2, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	2000012c 	.word	0x2000012c
 8003cd8:	20000118 	.word	0x20000118
 8003cdc:	2000010c 	.word	0x2000010c
 8003ce0:	20000030 	.word	0x20000030
 8003ce4:	2000002c 	.word	0x2000002c

08003ce8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <vTaskPlaceOnEventList+0x24>
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	e7fe      	b.n	8003d0a <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d0c:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <vTaskPlaceOnEventList+0x44>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3318      	adds	r3, #24
 8003d12:	4619      	mov	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7fe ff66 	bl	8002be6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	6838      	ldr	r0, [r7, #0]
 8003d1e:	f000 fbb9 	bl	8004494 <prvAddCurrentTaskToDelayedList>
}
 8003d22:	bf00      	nop
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	2000002c 	.word	0x2000002c

08003d30 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <vTaskPlaceOnEventListRestricted+0x26>
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e7fe      	b.n	8003d54 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d56:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <vTaskPlaceOnEventListRestricted+0x50>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7fe ff1d 	bl	8002b9e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d6e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	68b8      	ldr	r0, [r7, #8]
 8003d74:	f000 fb8e 	bl	8004494 <prvAddCurrentTaskToDelayedList>
    }
 8003d78:	bf00      	nop
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	2000002c 	.word	0x2000002c

08003d84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <xTaskRemoveFromEventList+0x2a>
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	e7fe      	b.n	8003dac <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	3318      	adds	r3, #24
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe ff50 	bl	8002c58 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003db8:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <xTaskRemoveFromEventList+0xac>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d11c      	bne.n	8003dfa <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fe ff47 	bl	8002c58 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	2201      	movs	r2, #1
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <xTaskRemoveFromEventList+0xb0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <xTaskRemoveFromEventList+0xb0>)
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <xTaskRemoveFromEventList+0xb4>)
 8003dea:	441a      	add	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4619      	mov	r1, r3
 8003df2:	4610      	mov	r0, r2
 8003df4:	f7fe fed3 	bl	8002b9e <vListInsertEnd>
 8003df8:	e005      	b.n	8003e06 <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	3318      	adds	r3, #24
 8003dfe:	4619      	mov	r1, r3
 8003e00:	480e      	ldr	r0, [pc, #56]	; (8003e3c <xTaskRemoveFromEventList+0xb8>)
 8003e02:	f7fe fecc 	bl	8002b9e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <xTaskRemoveFromEventList+0xbc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d905      	bls.n	8003e20 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <xTaskRemoveFromEventList+0xc0>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e001      	b.n	8003e24 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003e24:	697b      	ldr	r3, [r7, #20]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	2000012c 	.word	0x2000012c
 8003e34:	2000010c 	.word	0x2000010c
 8003e38:	20000030 	.word	0x20000030
 8003e3c:	200000c4 	.word	0x200000c4
 8003e40:	2000002c 	.word	0x2000002c
 8003e44:	20000118 	.word	0x20000118

08003e48 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <vTaskInternalSetTimeOutState+0x24>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <vTaskInternalSetTimeOutState+0x28>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	605a      	str	r2, [r3, #4]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	2000011c 	.word	0x2000011c
 8003e70:	20000108 	.word	0x20000108

08003e74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <xTaskCheckForTimeOut+0x24>
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	e7fe      	b.n	8003e96 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <xTaskCheckForTimeOut+0x3e>
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e7fe      	b.n	8003eb0 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8003eb2:	f000 ff8d 	bl	8004dd0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003eb6:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <xTaskCheckForTimeOut+0xc0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ece:	d102      	bne.n	8003ed6 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	e026      	b.n	8003f24 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b17      	ldr	r3, [pc, #92]	; (8003f38 <xTaskCheckForTimeOut+0xc4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d00a      	beq.n	8003ef8 <xTaskCheckForTimeOut+0x84>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d305      	bcc.n	8003ef8 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e015      	b.n	8003f24 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d20b      	bcs.n	8003f1a <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	1ad2      	subs	r2, r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff ff9a 	bl	8003e48 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	e004      	b.n	8003f24 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003f24:	f000 ff82 	bl	8004e2c <vPortExitCritical>

    return xReturn;
 8003f28:	69fb      	ldr	r3, [r7, #28]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000108 	.word	0x20000108
 8003f38:	2000011c 	.word	0x2000011c

08003f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003f40:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <vTaskMissedYield+0x14>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
}
 8003f46:	bf00      	nop
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	20000118 	.word	0x20000118

08003f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003f5c:	f000 f852 	bl	8004004 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <prvIdleTask+0x28>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d9f9      	bls.n	8003f5c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <prvIdleTask+0x2c>)
 8003f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003f78:	e7f0      	b.n	8003f5c <prvIdleTask+0x8>
 8003f7a:	bf00      	nop
 8003f7c:	20000030 	.word	0x20000030
 8003f80:	e000ed04 	.word	0xe000ed04

08003f84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	e00c      	b.n	8003faa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <prvInitialiseTaskLists+0x60>)
 8003f9c:	4413      	add	r3, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe fdd0 	bl	8002b44 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	607b      	str	r3, [r7, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d9ef      	bls.n	8003f90 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003fb0:	480d      	ldr	r0, [pc, #52]	; (8003fe8 <prvInitialiseTaskLists+0x64>)
 8003fb2:	f7fe fdc7 	bl	8002b44 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003fb6:	480d      	ldr	r0, [pc, #52]	; (8003fec <prvInitialiseTaskLists+0x68>)
 8003fb8:	f7fe fdc4 	bl	8002b44 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003fbc:	480c      	ldr	r0, [pc, #48]	; (8003ff0 <prvInitialiseTaskLists+0x6c>)
 8003fbe:	f7fe fdc1 	bl	8002b44 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003fc2:	480c      	ldr	r0, [pc, #48]	; (8003ff4 <prvInitialiseTaskLists+0x70>)
 8003fc4:	f7fe fdbe 	bl	8002b44 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003fc8:	480b      	ldr	r0, [pc, #44]	; (8003ff8 <prvInitialiseTaskLists+0x74>)
 8003fca:	f7fe fdbb 	bl	8002b44 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <prvInitialiseTaskLists+0x78>)
 8003fd0:	4a05      	ldr	r2, [pc, #20]	; (8003fe8 <prvInitialiseTaskLists+0x64>)
 8003fd2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fd4:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <prvInitialiseTaskLists+0x7c>)
 8003fd6:	4a05      	ldr	r2, [pc, #20]	; (8003fec <prvInitialiseTaskLists+0x68>)
 8003fd8:	601a      	str	r2, [r3, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000030 	.word	0x20000030
 8003fe8:	20000094 	.word	0x20000094
 8003fec:	200000a8 	.word	0x200000a8
 8003ff0:	200000c4 	.word	0x200000c4
 8003ff4:	200000d8 	.word	0x200000d8
 8003ff8:	200000f0 	.word	0x200000f0
 8003ffc:	200000bc 	.word	0x200000bc
 8004000:	200000c0 	.word	0x200000c0

08004004 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800400a:	e019      	b.n	8004040 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800400c:	f000 fee0 	bl	8004dd0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <prvCheckTasksWaitingTermination+0x4c>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3304      	adds	r3, #4
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe fe1b 	bl	8002c58 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <prvCheckTasksWaitingTermination+0x50>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3b01      	subs	r3, #1
 8004028:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <prvCheckTasksWaitingTermination+0x50>)
 800402a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <prvCheckTasksWaitingTermination+0x54>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3b01      	subs	r3, #1
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <prvCheckTasksWaitingTermination+0x54>)
 8004034:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004036:	f000 fef9 	bl	8004e2c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f80e 	bl	800405c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004040:	4b05      	ldr	r3, [pc, #20]	; (8004058 <prvCheckTasksWaitingTermination+0x54>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e1      	bne.n	800400c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	200000d8 	.word	0x200000d8
 8004054:	20000104 	.word	0x20000104
 8004058:	200000ec 	.word	0x200000ec

0800405c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	4618      	mov	r0, r3
 800406a:	f001 f893 	bl	8005194 <vPortFree>
                vPortFree( pxTCB );
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f001 f890 	bl	8005194 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <prvResetNextTaskUnblockTime+0x30>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <prvResetNextTaskUnblockTime+0x34>)
 800408c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004090:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004092:	e005      	b.n	80040a0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <prvResetNextTaskUnblockTime+0x30>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <prvResetNextTaskUnblockTime+0x34>)
 800409e:	6013      	str	r3, [r2, #0]
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	200000bc 	.word	0x200000bc
 80040b0:	20000124 	.word	0x20000124

080040b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <xTaskGetSchedulerState+0x34>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80040c2:	2301      	movs	r3, #1
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	e008      	b.n	80040da <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c8:	4b08      	ldr	r3, [pc, #32]	; (80040ec <xTaskGetSchedulerState+0x38>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80040d0:	2302      	movs	r3, #2
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	e001      	b.n	80040da <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80040d6:	2300      	movs	r3, #0
 80040d8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80040da:	687b      	ldr	r3, [r7, #4]
    }
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	20000110 	.word	0x20000110
 80040ec:	2000012c 	.word	0x2000012c

080040f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d061      	beq.n	80041ca <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004106:	4b33      	ldr	r3, [pc, #204]	; (80041d4 <xTaskPriorityDisinherit+0xe4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	429a      	cmp	r2, r3
 800410e:	d009      	beq.n	8004124 <xTaskPriorityDisinherit+0x34>
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	e7fe      	b.n	8004122 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <xTaskPriorityDisinherit+0x50>
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	e7fe      	b.n	800413e <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004144:	1e5a      	subs	r2, r3, #1
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004152:	429a      	cmp	r2, r3
 8004154:	d039      	beq.n	80041ca <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d135      	bne.n	80041ca <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3304      	adds	r3, #4
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fd78 	bl	8002c58 <uxListRemove>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	2201      	movs	r2, #1
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43da      	mvns	r2, r3
 800417a:	4b17      	ldr	r3, [pc, #92]	; (80041d8 <xTaskPriorityDisinherit+0xe8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4013      	ands	r3, r2
 8004180:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <xTaskPriorityDisinherit+0xe8>)
 8004182:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	f1c3 0205 	rsb	r2, r3, #5
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	2201      	movs	r2, #1
 800419e:	409a      	lsls	r2, r3
 80041a0:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <xTaskPriorityDisinherit+0xe8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	4a0c      	ldr	r2, [pc, #48]	; (80041d8 <xTaskPriorityDisinherit+0xe8>)
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4a09      	ldr	r2, [pc, #36]	; (80041dc <xTaskPriorityDisinherit+0xec>)
 80041b8:	441a      	add	r2, r3
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	3304      	adds	r3, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	4610      	mov	r0, r2
 80041c2:	f7fe fcec 	bl	8002b9e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80041c6:	2301      	movs	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80041ca:	697b      	ldr	r3, [r7, #20]
    }
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	2000002c 	.word	0x2000002c
 80041d8:	2000010c 	.word	0x2000010c
 80041dc:	20000030 	.word	0x20000030

080041e0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <xTaskGenericNotifyWait+0x28>
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	e7fe      	b.n	8004206 <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 8004208:	f000 fde2 	bl	8004dd0 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800420c:	4b31      	ldr	r3, [pc, #196]	; (80042d4 <xTaskGenericNotifyWait+0xf4>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	3354      	adds	r3, #84	; 0x54
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d022      	beq.n	8004264 <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800421e:	4b2d      	ldr	r3, [pc, #180]	; (80042d4 <xTaskGenericNotifyWait+0xf4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	3214      	adds	r2, #20
 8004226:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	43d2      	mvns	r2, r2
 800422e:	4011      	ands	r1, r2
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	3214      	adds	r2, #20
 8004234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004238:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <xTaskGenericNotifyWait+0xf4>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	3354      	adds	r3, #84	; 0x54
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800424c:	2101      	movs	r1, #1
 800424e:	6a38      	ldr	r0, [r7, #32]
 8004250:	f000 f920 	bl	8004494 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004254:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <xTaskGenericNotifyWait+0xf8>)
 8004256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004264:	f000 fde2 	bl	8004e2c <vPortExitCritical>

        taskENTER_CRITICAL();
 8004268:	f000 fdb2 	bl	8004dd0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <xTaskGenericNotifyWait+0xa2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004272:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <xTaskGenericNotifyWait+0xf4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	3214      	adds	r2, #20
 800427a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004282:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <xTaskGenericNotifyWait+0xf4>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	3354      	adds	r3, #84	; 0x54
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d002      	beq.n	800429a <xTaskGenericNotifyWait+0xba>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	e00e      	b.n	80042b8 <xTaskGenericNotifyWait+0xd8>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800429a:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <xTaskGenericNotifyWait+0xf4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	3214      	adds	r2, #20
 80042a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	43d2      	mvns	r2, r2
 80042aa:	4011      	ands	r1, r2
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	3214      	adds	r2, #20
 80042b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80042b4:	2301      	movs	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <xTaskGenericNotifyWait+0xf4>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	3354      	adds	r3, #84	; 0x54
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80042c6:	f000 fdb1 	bl	8004e2c <vPortExitCritical>

        return xReturn;
 80042ca:	697b      	ldr	r3, [r7, #20]
    }
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	2000002c 	.word	0x2000002c
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08c      	sub	sp, #48	; 0x30
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80042ea:	2301      	movs	r3, #1
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <xTaskGenericNotify+0x2c>
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	623b      	str	r3, [r7, #32]
 8004306:	e7fe      	b.n	8004306 <xTaskGenericNotify+0x2a>
        configASSERT( xTaskToNotify );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <xTaskGenericNotify+0x46>
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	e7fe      	b.n	8004320 <xTaskGenericNotify+0x44>
        pxTCB = xTaskToNotify;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8004326:	f000 fd53 	bl	8004dd0 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	2b00      	cmp	r3, #0
 800432e:	d006      	beq.n	800433e <xTaskGenericNotify+0x62>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	3214      	adds	r2, #20
 8004336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800433e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4413      	add	r3, r2
 8004344:	3354      	adds	r3, #84	; 0x54
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800434c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4413      	add	r3, r2
 8004352:	3354      	adds	r3, #84	; 0x54
 8004354:	2202      	movs	r2, #2
 8004356:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d83b      	bhi.n	80043d6 <xTaskGenericNotify+0xfa>
 800435e:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <xTaskGenericNotify+0x88>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	080043f3 	.word	0x080043f3
 8004368:	08004379 	.word	0x08004379
 800436c:	08004395 	.word	0x08004395
 8004370:	080043ad 	.word	0x080043ad
 8004374:	080043bb 	.word	0x080043bb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	3214      	adds	r2, #20
 800437e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	ea42 0103 	orr.w	r1, r2, r3
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	3214      	adds	r2, #20
 800438e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004392:	e031      	b.n	80043f8 <xTaskGenericNotify+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	3214      	adds	r2, #20
 800439a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439e:	1c59      	adds	r1, r3, #1
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	3214      	adds	r2, #20
 80043a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80043aa:	e025      	b.n	80043f8 <xTaskGenericNotify+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	3214      	adds	r2, #20
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80043b8:	e01e      	b.n	80043f8 <xTaskGenericNotify+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80043ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d006      	beq.n	80043d0 <xTaskGenericNotify+0xf4>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	3214      	adds	r2, #20
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80043ce:	e013      	b.n	80043f8 <xTaskGenericNotify+0x11c>
                        xReturn = pdFAIL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80043d4:	e010      	b.n	80043f8 <xTaskGenericNotify+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80043d6:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <xTaskGenericNotify+0x1a4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <xTaskGenericNotify+0x11a>
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	e7fe      	b.n	80043f0 <xTaskGenericNotify+0x114>
                    break;
 80043f2:	bf00      	nop
 80043f4:	e000      	b.n	80043f8 <xTaskGenericNotify+0x11c>

                    break;
 80043f6:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80043f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d138      	bne.n	8004472 <xTaskGenericNotify+0x196>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	3304      	adds	r3, #4
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe fc27 	bl	8002c58 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	2201      	movs	r2, #1
 8004410:	409a      	lsls	r2, r3
 8004412:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <xTaskGenericNotify+0x1a8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4313      	orrs	r3, r2
 8004418:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <xTaskGenericNotify+0x1a8>)
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4a17      	ldr	r2, [pc, #92]	; (8004488 <xTaskGenericNotify+0x1ac>)
 800442a:	441a      	add	r2, r3
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f7fe fbb3 	bl	8002b9e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <xTaskGenericNotify+0x178>
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e7fe      	b.n	8004452 <xTaskGenericNotify+0x176>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <xTaskGenericNotify+0x1b0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	429a      	cmp	r2, r3
 8004460:	d907      	bls.n	8004472 <xTaskGenericNotify+0x196>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <xTaskGenericNotify+0x1b4>)
 8004464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004472:	f000 fcdb 	bl	8004e2c <vPortExitCritical>

        return xReturn;
 8004476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004478:	4618      	mov	r0, r3
 800447a:	3730      	adds	r7, #48	; 0x30
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000108 	.word	0x20000108
 8004484:	2000010c 	.word	0x2000010c
 8004488:	20000030 	.word	0x20000030
 800448c:	2000002c 	.word	0x2000002c
 8004490:	e000ed04 	.word	0xe000ed04

08004494 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800449e:	4b29      	ldr	r3, [pc, #164]	; (8004544 <prvAddCurrentTaskToDelayedList+0xb0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044a4:	4b28      	ldr	r3, [pc, #160]	; (8004548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe fbd4 	bl	8002c58 <uxListRemove>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	2201      	movs	r2, #1
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43da      	mvns	r2, r3
 80044c4:	4b21      	ldr	r3, [pc, #132]	; (800454c <prvAddCurrentTaskToDelayedList+0xb8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4013      	ands	r3, r2
 80044ca:	4a20      	ldr	r2, [pc, #128]	; (800454c <prvAddCurrentTaskToDelayedList+0xb8>)
 80044cc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044d4:	d10a      	bne.n	80044ec <prvAddCurrentTaskToDelayedList+0x58>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044dc:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3304      	adds	r3, #4
 80044e2:	4619      	mov	r1, r3
 80044e4:	481a      	ldr	r0, [pc, #104]	; (8004550 <prvAddCurrentTaskToDelayedList+0xbc>)
 80044e6:	f7fe fb5a 	bl	8002b9e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80044ea:	e026      	b.n	800453a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4413      	add	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044f4:	4b14      	ldr	r3, [pc, #80]	; (8004548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	429a      	cmp	r2, r3
 8004502:	d209      	bcs.n	8004518 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3304      	adds	r3, #4
 800450e:	4619      	mov	r1, r3
 8004510:	4610      	mov	r0, r2
 8004512:	f7fe fb68 	bl	8002be6 <vListInsert>
}
 8004516:	e010      	b.n	800453a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <prvAddCurrentTaskToDelayedList+0xc4>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3304      	adds	r3, #4
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f7fe fb5e 	bl	8002be6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800452a:	4b0c      	ldr	r3, [pc, #48]	; (800455c <prvAddCurrentTaskToDelayedList+0xc8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	d202      	bcs.n	800453a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004534:	4a09      	ldr	r2, [pc, #36]	; (800455c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	6013      	str	r3, [r2, #0]
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000108 	.word	0x20000108
 8004548:	2000002c 	.word	0x2000002c
 800454c:	2000010c 	.word	0x2000010c
 8004550:	200000f0 	.word	0x200000f0
 8004554:	200000c0 	.word	0x200000c0
 8004558:	200000bc 	.word	0x200000bc
 800455c:	20000124 	.word	0x20000124

08004560 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800456a:	f000 fad1 	bl	8004b10 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800456e:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <xTimerCreateTimerTask+0x54>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <xTimerCreateTimerTask+0x58>)
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	2302      	movs	r3, #2
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	2300      	movs	r3, #0
 8004580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004584:	490d      	ldr	r1, [pc, #52]	; (80045bc <xTimerCreateTimerTask+0x5c>)
 8004586:	480e      	ldr	r0, [pc, #56]	; (80045c0 <xTimerCreateTimerTask+0x60>)
 8004588:	f7ff f852 	bl	8003630 <xTaskCreate>
 800458c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <xTimerCreateTimerTask+0x48>
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	e7fe      	b.n	80045a6 <xTimerCreateTimerTask+0x46>
        return xReturn;
 80045a8:	687b      	ldr	r3, [r7, #4]
    }
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000160 	.word	0x20000160
 80045b8:	20000164 	.word	0x20000164
 80045bc:	080054b8 	.word	0x080054b8
 80045c0:	080046f5 	.word	0x080046f5

080045c4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	; 0x28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d109      	bne.n	80045f0 <xTimerGenericCommand+0x2c>
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	623b      	str	r3, [r7, #32]
 80045ee:	e7fe      	b.n	80045ee <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80045f0:	4b19      	ldr	r3, [pc, #100]	; (8004658 <xTimerGenericCommand+0x94>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d02a      	beq.n	800464e <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b05      	cmp	r3, #5
 8004608:	dc18      	bgt.n	800463c <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800460a:	f7ff fd53 	bl	80040b4 <xTaskGetSchedulerState>
 800460e:	4603      	mov	r3, r0
 8004610:	2b02      	cmp	r3, #2
 8004612:	d109      	bne.n	8004628 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004614:	4b10      	ldr	r3, [pc, #64]	; (8004658 <xTimerGenericCommand+0x94>)
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	f107 0114 	add.w	r1, r7, #20
 800461c:	2300      	movs	r3, #0
 800461e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004620:	f7fe fc1e 	bl	8002e60 <xQueueGenericSend>
 8004624:	6278      	str	r0, [r7, #36]	; 0x24
 8004626:	e012      	b.n	800464e <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <xTimerGenericCommand+0x94>)
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	f107 0114 	add.w	r1, r7, #20
 8004630:	2300      	movs	r3, #0
 8004632:	2200      	movs	r2, #0
 8004634:	f7fe fc14 	bl	8002e60 <xQueueGenericSend>
 8004638:	6278      	str	r0, [r7, #36]	; 0x24
 800463a:	e008      	b.n	800464e <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <xTimerGenericCommand+0x94>)
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	f107 0114 	add.w	r1, r7, #20
 8004644:	2300      	movs	r3, #0
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	f7fe fd04 	bl	8003054 <xQueueGenericSendFromISR>
 800464c:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004650:	4618      	mov	r0, r3
 8004652:	3728      	adds	r7, #40	; 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000160 	.word	0x20000160

0800465c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af02      	add	r7, sp, #8
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <prvProcessExpiredTimer+0x94>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3304      	adds	r3, #4
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe faef 	bl	8002c58 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d021      	beq.n	80046cc <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	18d1      	adds	r1, r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	6978      	ldr	r0, [r7, #20]
 8004696:	f000 f8d1 	bl	800483c <prvInsertTimerInActiveList>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01e      	beq.n	80046de <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046a0:	2300      	movs	r3, #0
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2300      	movs	r3, #0
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	2100      	movs	r1, #0
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f7ff ff8a 	bl	80045c4 <xTimerGenericCommand>
 80046b0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d112      	bne.n	80046de <prvProcessExpiredTimer+0x82>
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e7fe      	b.n	80046ca <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	6978      	ldr	r0, [r7, #20]
 80046e4:	4798      	blx	r3
    }
 80046e6:	bf00      	nop
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000158 	.word	0x20000158

080046f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046fc:	f107 0308 	add.w	r3, r7, #8
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f857 	bl	80047b4 <prvGetNextExpireTime>
 8004706:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4619      	mov	r1, r3
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f803 	bl	8004718 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004712:	f000 f8d5 	bl	80048c0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004716:	e7f1      	b.n	80046fc <prvTimerTask+0x8>

08004718 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004722:	f7ff f915 	bl	8003950 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004726:	f107 0308 	add.w	r3, r7, #8
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f866 	bl	80047fc <prvSampleTimeNow>
 8004730:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d130      	bne.n	800479a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <prvProcessTimerOrBlockTask+0x3c>
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	429a      	cmp	r2, r3
 8004744:	d806      	bhi.n	8004754 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004746:	f7ff f911 	bl	800396c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff ff85 	bl	800465c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004752:	e024      	b.n	800479e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <prvProcessTimerOrBlockTask+0x90>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <prvProcessTimerOrBlockTask+0x50>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <prvProcessTimerOrBlockTask+0x52>
 8004768:	2300      	movs	r3, #0
 800476a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <prvProcessTimerOrBlockTask+0x94>)
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	4619      	mov	r1, r3
 800477a:	f7fe ff25 	bl	80035c8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800477e:	f7ff f8f5 	bl	800396c <xTaskResumeAll>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <prvProcessTimerOrBlockTask+0x98>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
    }
 8004798:	e001      	b.n	800479e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800479a:	f7ff f8e7 	bl	800396c <xTaskResumeAll>
    }
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	2000015c 	.word	0x2000015c
 80047ac:	20000160 	.word	0x20000160
 80047b0:	e000ed04 	.word	0xe000ed04

080047b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047bc:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <prvGetNextExpireTime+0x44>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <prvGetNextExpireTime+0x16>
 80047c6:	2201      	movs	r2, #1
 80047c8:	e000      	b.n	80047cc <prvGetNextExpireTime+0x18>
 80047ca:	2200      	movs	r2, #0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <prvGetNextExpireTime+0x44>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e001      	b.n	80047e8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80047e8:	68fb      	ldr	r3, [r7, #12]
    }
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000158 	.word	0x20000158

080047fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004804:	f7ff f94e 	bl	8003aa4 <xTaskGetTickCount>
 8004808:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <prvSampleTimeNow+0x3c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	429a      	cmp	r2, r3
 8004812:	d205      	bcs.n	8004820 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004814:	f000 f918 	bl	8004a48 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e002      	b.n	8004826 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <prvSampleTimeNow+0x3c>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800482c:	68fb      	ldr	r3, [r7, #12]
    }
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000168 	.word	0x20000168

0800483c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d812      	bhi.n	8004888 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	1ad2      	subs	r2, r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	429a      	cmp	r2, r3
 800486e:	d302      	bcc.n	8004876 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004870:	2301      	movs	r3, #1
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e01b      	b.n	80048ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <prvInsertTimerInActiveList+0x7c>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3304      	adds	r3, #4
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f7fe f9b0 	bl	8002be6 <vListInsert>
 8004886:	e012      	b.n	80048ae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d206      	bcs.n	800489e <prvInsertTimerInActiveList+0x62>
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d302      	bcc.n	800489e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004898:	2301      	movs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e007      	b.n	80048ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <prvInsertTimerInActiveList+0x80>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f7fe f99c 	bl	8002be6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80048ae:	697b      	ldr	r3, [r7, #20]
    }
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	2000015c 	.word	0x2000015c
 80048bc:	20000158 	.word	0x20000158

080048c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	; 0x30
 80048c4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048c6:	e0ac      	b.n	8004a22 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f2c0 80a8 	blt.w	8004a20 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d004      	beq.n	80048e6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	3304      	adds	r3, #4
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe f9b9 	bl	8002c58 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff ff87 	bl	80047fc <prvSampleTimeNow>
 80048ee:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b09      	cmp	r3, #9
 80048f4:	f200 8095 	bhi.w	8004a22 <prvProcessReceivedCommands+0x162>
 80048f8:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <prvProcessReceivedCommands+0x40>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004929 	.word	0x08004929
 8004904:	08004929 	.word	0x08004929
 8004908:	08004929 	.word	0x08004929
 800490c:	0800499b 	.word	0x0800499b
 8004910:	080049af 	.word	0x080049af
 8004914:	080049f7 	.word	0x080049f7
 8004918:	08004929 	.word	0x08004929
 800491c:	08004929 	.word	0x08004929
 8004920:	0800499b 	.word	0x0800499b
 8004924:	080049af 	.word	0x080049af
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	b2da      	uxtb	r2, r3
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	18d1      	adds	r1, r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a3a      	ldr	r2, [r7, #32]
 8004946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004948:	f7ff ff78 	bl	800483c <prvInsertTimerInActiveList>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d067      	beq.n	8004a22 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004958:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d05c      	beq.n	8004a22 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	441a      	add	r2, r3
 8004970:	2300      	movs	r3, #0
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2300      	movs	r3, #0
 8004976:	2100      	movs	r1, #0
 8004978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800497a:	f7ff fe23 	bl	80045c4 <xTimerGenericCommand>
 800497e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d14d      	bne.n	8004a22 <prvProcessReceivedCommands+0x162>
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	61bb      	str	r3, [r7, #24]
 8004998:	e7fe      	b.n	8004998 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80049ac:	e039      	b.n	8004a22 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <prvProcessReceivedCommands+0x122>
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	e7fe      	b.n	80049e0 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	18d1      	adds	r1, r2, r3
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	6a3a      	ldr	r2, [r7, #32]
 80049ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049f0:	f7ff ff24 	bl	800483c <prvInsertTimerInActiveList>
                        break;
 80049f4:	e015      	b.n	8004a22 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d103      	bne.n	8004a0c <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8004a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a06:	f000 fbc5 	bl	8005194 <vPortFree>
 8004a0a:	e00a      	b.n	8004a22 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004a1e:	e000      	b.n	8004a22 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004a20:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <prvProcessReceivedCommands+0x184>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f107 0108 	add.w	r1, r7, #8
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe fbb7 	bl	80031a0 <xQueueReceive>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f47f af47 	bne.w	80048c8 <prvProcessReceivedCommands+0x8>
        }
    }
 8004a3a:	bf00      	nop
 8004a3c:	3728      	adds	r7, #40	; 0x28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000160 	.word	0x20000160

08004a48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a4e:	e047      	b.n	8004ae0 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a50:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <prvSwitchTimerLists+0xc0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a5a:	4b2b      	ldr	r3, [pc, #172]	; (8004b08 <prvSwitchTimerLists+0xc0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fe f8f5 	bl	8002c58 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d02d      	beq.n	8004ae0 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d90e      	bls.n	8004ab4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aa2:	4b19      	ldr	r3, [pc, #100]	; (8004b08 <prvSwitchTimerLists+0xc0>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f7fe f89a 	bl	8002be6 <vListInsert>
 8004ab2:	e015      	b.n	8004ae0 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	2100      	movs	r1, #0
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff fd80 	bl	80045c4 <xTimerGenericCommand>
 8004ac4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d109      	bne.n	8004ae0 <prvSwitchTimerLists+0x98>
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	603b      	str	r3, [r7, #0]
 8004ade:	e7fe      	b.n	8004ade <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ae0:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <prvSwitchTimerLists+0xc0>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1b2      	bne.n	8004a50 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <prvSwitchTimerLists+0xc0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004af0:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <prvSwitchTimerLists+0xc4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a04      	ldr	r2, [pc, #16]	; (8004b08 <prvSwitchTimerLists+0xc0>)
 8004af6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004af8:	4a04      	ldr	r2, [pc, #16]	; (8004b0c <prvSwitchTimerLists+0xc4>)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	6013      	str	r3, [r2, #0]
    }
 8004afe:	bf00      	nop
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000158 	.word	0x20000158
 8004b0c:	2000015c 	.word	0x2000015c

08004b10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004b14:	f000 f95c 	bl	8004dd0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004b18:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <prvCheckForValidListAndQueue+0x54>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d11d      	bne.n	8004b5c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004b20:	4811      	ldr	r0, [pc, #68]	; (8004b68 <prvCheckForValidListAndQueue+0x58>)
 8004b22:	f7fe f80f 	bl	8002b44 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004b26:	4811      	ldr	r0, [pc, #68]	; (8004b6c <prvCheckForValidListAndQueue+0x5c>)
 8004b28:	f7fe f80c 	bl	8002b44 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004b2c:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <prvCheckForValidListAndQueue+0x60>)
 8004b2e:	4a0e      	ldr	r2, [pc, #56]	; (8004b68 <prvCheckForValidListAndQueue+0x58>)
 8004b30:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <prvCheckForValidListAndQueue+0x64>)
 8004b34:	4a0d      	ldr	r2, [pc, #52]	; (8004b6c <prvCheckForValidListAndQueue+0x5c>)
 8004b36:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004b38:	2200      	movs	r2, #0
 8004b3a:	210c      	movs	r1, #12
 8004b3c:	200a      	movs	r0, #10
 8004b3e:	f7fe f91d 	bl	8002d7c <xQueueGenericCreate>
 8004b42:	4602      	mov	r2, r0
 8004b44:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <prvCheckForValidListAndQueue+0x54>)
 8004b46:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <prvCheckForValidListAndQueue+0x54>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <prvCheckForValidListAndQueue+0x54>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4908      	ldr	r1, [pc, #32]	; (8004b78 <prvCheckForValidListAndQueue+0x68>)
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fd0e 	bl	8003578 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b5c:	f000 f966 	bl	8004e2c <vPortExitCritical>
    }
 8004b60:	bf00      	nop
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000160 	.word	0x20000160
 8004b68:	20000130 	.word	0x20000130
 8004b6c:	20000144 	.word	0x20000144
 8004b70:	20000158 	.word	0x20000158
 8004b74:	2000015c 	.word	0x2000015c
 8004b78:	080054c0 	.word	0x080054c0

08004b7c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3b04      	subs	r3, #4
 8004b8c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3b04      	subs	r3, #4
 8004b9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f023 0201 	bic.w	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3b04      	subs	r3, #4
 8004baa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004bac:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <pxPortInitialiseStack+0x64>)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3b14      	subs	r3, #20
 8004bb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b04      	subs	r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f06f 0202 	mvn.w	r2, #2
 8004bca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3b20      	subs	r3, #32
 8004bd0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	08004be5 	.word	0x08004be5

08004be4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004bee:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <prvTaskExitError+0x50>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf6:	d009      	beq.n	8004c0c <prvTaskExitError+0x28>
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	e7fe      	b.n	8004c0a <prvTaskExitError+0x26>
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004c1e:	bf00      	nop
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0fc      	beq.n	8004c20 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	2000000c 	.word	0x2000000c
	...

08004c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <pxCurrentTCBConst2>)
 8004c42:	6819      	ldr	r1, [r3, #0]
 8004c44:	6808      	ldr	r0, [r1, #0]
 8004c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4a:	f380 8809 	msr	PSP, r0
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f380 8811 	msr	BASEPRI, r0
 8004c5a:	4770      	bx	lr
 8004c5c:	f3af 8000 	nop.w

08004c60 <pxCurrentTCBConst2>:
 8004c60:	2000002c 	.word	0x2000002c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004c68:	4808      	ldr	r0, [pc, #32]	; (8004c8c <prvPortStartFirstTask+0x24>)
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	6800      	ldr	r0, [r0, #0]
 8004c6e:	f380 8808 	msr	MSP, r0
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f380 8814 	msr	CONTROL, r0
 8004c7a:	b662      	cpsie	i
 8004c7c:	b661      	cpsie	f
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	df00      	svc	0
 8004c88:	bf00      	nop
 8004c8a:	0000      	.short	0x0000
 8004c8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004c90:	bf00      	nop
 8004c92:	bf00      	nop

08004c94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c9a:	4b44      	ldr	r3, [pc, #272]	; (8004dac <xPortStartScheduler+0x118>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a44      	ldr	r2, [pc, #272]	; (8004db0 <xPortStartScheduler+0x11c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d109      	bne.n	8004cb8 <xPortStartScheduler+0x24>
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	e7fe      	b.n	8004cb6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cb8:	4b3c      	ldr	r3, [pc, #240]	; (8004dac <xPortStartScheduler+0x118>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3d      	ldr	r2, [pc, #244]	; (8004db4 <xPortStartScheduler+0x120>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d109      	bne.n	8004cd6 <xPortStartScheduler+0x42>
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e7fe      	b.n	8004cd4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cd6:	4b38      	ldr	r3, [pc, #224]	; (8004db8 <xPortStartScheduler+0x124>)
 8004cd8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	22ff      	movs	r2, #255	; 0xff
 8004ce6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	4b30      	ldr	r3, [pc, #192]	; (8004dbc <xPortStartScheduler+0x128>)
 8004cfc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cfe:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <xPortStartScheduler+0x12c>)
 8004d00:	2207      	movs	r2, #7
 8004d02:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d04:	e009      	b.n	8004d1a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004d06:	4b2e      	ldr	r3, [pc, #184]	; (8004dc0 <xPortStartScheduler+0x12c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	4a2c      	ldr	r2, [pc, #176]	; (8004dc0 <xPortStartScheduler+0x12c>)
 8004d0e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d0ef      	beq.n	8004d06 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d26:	4b26      	ldr	r3, [pc, #152]	; (8004dc0 <xPortStartScheduler+0x12c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f1c3 0307 	rsb	r3, r3, #7
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d009      	beq.n	8004d46 <xPortStartScheduler+0xb2>
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	e7fe      	b.n	8004d44 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d46:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <xPortStartScheduler+0x12c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <xPortStartScheduler+0x12c>)
 8004d4e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d50:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <xPortStartScheduler+0x12c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d58:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <xPortStartScheduler+0x12c>)
 8004d5a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004d64:	4b17      	ldr	r3, [pc, #92]	; (8004dc4 <xPortStartScheduler+0x130>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a16      	ldr	r2, [pc, #88]	; (8004dc4 <xPortStartScheduler+0x130>)
 8004d6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d6e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004d70:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <xPortStartScheduler+0x130>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <xPortStartScheduler+0x130>)
 8004d76:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004d7c:	f000 f8d4 	bl	8004f28 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004d80:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <xPortStartScheduler+0x134>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004d86:	f000 f8f3 	bl	8004f70 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d8a:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <xPortStartScheduler+0x138>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <xPortStartScheduler+0x138>)
 8004d90:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d94:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004d96:	f7ff ff67 	bl	8004c68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004d9a:	f7fe ff4b 	bl	8003c34 <vTaskSwitchContext>
    prvTaskExitError();
 8004d9e:	f7ff ff21 	bl	8004be4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	e000ed00 	.word	0xe000ed00
 8004db0:	410fc271 	.word	0x410fc271
 8004db4:	410fc270 	.word	0x410fc270
 8004db8:	e000e400 	.word	0xe000e400
 8004dbc:	2000016c 	.word	0x2000016c
 8004dc0:	20000170 	.word	0x20000170
 8004dc4:	e000ed20 	.word	0xe000ed20
 8004dc8:	2000000c 	.word	0x2000000c
 8004dcc:	e000ef34 	.word	0xe000ef34

08004dd0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004de8:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <vPortEnterCritical+0x54>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3301      	adds	r3, #1
 8004dee:	4a0d      	ldr	r2, [pc, #52]	; (8004e24 <vPortEnterCritical+0x54>)
 8004df0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004df2:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <vPortEnterCritical+0x54>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d10e      	bne.n	8004e18 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <vPortEnterCritical+0x58>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d009      	beq.n	8004e18 <vPortEnterCritical+0x48>
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	603b      	str	r3, [r7, #0]
 8004e16:	e7fe      	b.n	8004e16 <vPortEnterCritical+0x46>
    }
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	2000000c 	.word	0x2000000c
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004e32:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <vPortExitCritical+0x4c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <vPortExitCritical+0x22>
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	607b      	str	r3, [r7, #4]
 8004e4c:	e7fe      	b.n	8004e4c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <vPortExitCritical+0x4c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <vPortExitCritical+0x4c>)
 8004e56:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004e58:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <vPortExitCritical+0x4c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d104      	bne.n	8004e6a <vPortExitCritical+0x3e>
 8004e60:	2300      	movs	r3, #0
 8004e62:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	2000000c 	.word	0x2000000c
 8004e7c:	00000000 	.word	0x00000000

08004e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004e80:	f3ef 8009 	mrs	r0, PSP
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <pxCurrentTCBConst>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	f01e 0f10 	tst.w	lr, #16
 8004e90:	bf08      	it	eq
 8004e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9a:	6010      	str	r0, [r2, #0]
 8004e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ea4:	f380 8811 	msr	BASEPRI, r0
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f7fe fec0 	bl	8003c34 <vTaskSwitchContext>
 8004eb4:	f04f 0000 	mov.w	r0, #0
 8004eb8:	f380 8811 	msr	BASEPRI, r0
 8004ebc:	bc09      	pop	{r0, r3}
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	6808      	ldr	r0, [r1, #0]
 8004ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec6:	f01e 0f10 	tst.w	lr, #16
 8004eca:	bf08      	it	eq
 8004ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ed0:	f380 8809 	msr	PSP, r0
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	f3af 8000 	nop.w

08004ee0 <pxCurrentTCBConst>:
 8004ee0:	2000002c 	.word	0x2000002c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop

08004ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
        __asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004f00:	f7fe fde0 	bl	8003ac4 <xTaskIncrementTick>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <SysTick_Handler+0x3c>)
 8004f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	e000ed04 	.word	0xe000ed04

08004f28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <vPortSetupTimerInterrupt+0x34>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <vPortSetupTimerInterrupt+0x38>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f38:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <vPortSetupTimerInterrupt+0x3c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <vPortSetupTimerInterrupt+0x40>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <vPortSetupTimerInterrupt+0x44>)
 8004f46:	3b01      	subs	r3, #1
 8004f48:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f4a:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <vPortSetupTimerInterrupt+0x34>)
 8004f4c:	2207      	movs	r2, #7
 8004f4e:	601a      	str	r2, [r3, #0]
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	e000e010 	.word	0xe000e010
 8004f60:	e000e018 	.word	0xe000e018
 8004f64:	20000000 	.word	0x20000000
 8004f68:	10624dd3 	.word	0x10624dd3
 8004f6c:	e000e014 	.word	0xe000e014

08004f70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004f70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f80 <vPortEnableVFP+0x10>
 8004f74:	6801      	ldr	r1, [r0, #0]
 8004f76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f7a:	6001      	str	r1, [r0, #0]
 8004f7c:	4770      	bx	lr
 8004f7e:	0000      	.short	0x0000
 8004f80:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004f8e:	f3ef 8305 	mrs	r3, IPSR
 8004f92:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	d913      	bls.n	8004fc2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f9a:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <vPortValidateInterruptPriority+0x6c>)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fa4:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <vPortValidateInterruptPriority+0x70>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	7afa      	ldrb	r2, [r7, #11]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d209      	bcs.n	8004fc2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	e7fe      	b.n	8004fc0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <vPortValidateInterruptPriority+0x74>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <vPortValidateInterruptPriority+0x78>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d909      	bls.n	8004fe6 <vPortValidateInterruptPriority+0x5e>
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	e7fe      	b.n	8004fe4 <vPortValidateInterruptPriority+0x5c>
    }
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	e000e3f0 	.word	0xe000e3f0
 8004ff8:	2000016c 	.word	0x2000016c
 8004ffc:	e000ed0c 	.word	0xe000ed0c
 8005000:	20000170 	.word	0x20000170

08005004 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	; 0x28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800500c:	2300      	movs	r3, #0
 800500e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005010:	f7fe fc9e 	bl	8003950 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005014:	4b59      	ldr	r3, [pc, #356]	; (800517c <pvPortMalloc+0x178>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800501c:	f000 f91a 	bl	8005254 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005020:	4b57      	ldr	r3, [pc, #348]	; (8005180 <pvPortMalloc+0x17c>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	f040 8091 	bne.w	8005150 <pvPortMalloc+0x14c>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01c      	beq.n	800506e <pvPortMalloc+0x6a>
            {
                xWantedSize += xHeapStructSize;
 8005034:	2208      	movs	r2, #8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4413      	add	r3, r2
 800503a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	2b00      	cmp	r3, #0
 8005044:	d013      	beq.n	800506e <pvPortMalloc+0x6a>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f023 0307 	bic.w	r3, r3, #7
 800504c:	3308      	adds	r3, #8
 800504e:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <pvPortMalloc+0x6a>
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	e7fe      	b.n	800506c <pvPortMalloc+0x68>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d06d      	beq.n	8005150 <pvPortMalloc+0x14c>
 8005074:	4b43      	ldr	r3, [pc, #268]	; (8005184 <pvPortMalloc+0x180>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	429a      	cmp	r2, r3
 800507c:	d868      	bhi.n	8005150 <pvPortMalloc+0x14c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 800507e:	4b42      	ldr	r3, [pc, #264]	; (8005188 <pvPortMalloc+0x184>)
 8005080:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005082:	4b41      	ldr	r3, [pc, #260]	; (8005188 <pvPortMalloc+0x184>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005088:	e004      	b.n	8005094 <pvPortMalloc+0x90>
                {
                    pxPreviousBlock = pxBlock;
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	429a      	cmp	r2, r3
 800509c:	d903      	bls.n	80050a6 <pvPortMalloc+0xa2>
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f1      	bne.n	800508a <pvPortMalloc+0x86>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 80050a6:	4b35      	ldr	r3, [pc, #212]	; (800517c <pvPortMalloc+0x178>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d04f      	beq.n	8005150 <pvPortMalloc+0x14c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2208      	movs	r2, #8
 80050b6:	4413      	add	r3, r2
 80050b8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	1ad2      	subs	r2, r2, r3
 80050ca:	2308      	movs	r3, #8
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d91e      	bls.n	8005110 <pvPortMalloc+0x10c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4413      	add	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d009      	beq.n	80050f8 <pvPortMalloc+0xf4>
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	e7fe      	b.n	80050f6 <pvPortMalloc+0xf2>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800510a:	69b8      	ldr	r0, [r7, #24]
 800510c:	f000 f904 	bl	8005318 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005110:	4b1c      	ldr	r3, [pc, #112]	; (8005184 <pvPortMalloc+0x180>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	4a1a      	ldr	r2, [pc, #104]	; (8005184 <pvPortMalloc+0x180>)
 800511c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800511e:	4b19      	ldr	r3, [pc, #100]	; (8005184 <pvPortMalloc+0x180>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4b1a      	ldr	r3, [pc, #104]	; (800518c <pvPortMalloc+0x188>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d203      	bcs.n	8005132 <pvPortMalloc+0x12e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <pvPortMalloc+0x180>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a17      	ldr	r2, [pc, #92]	; (800518c <pvPortMalloc+0x188>)
 8005130:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <pvPortMalloc+0x17c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	431a      	orrs	r2, r3
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <pvPortMalloc+0x18c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3301      	adds	r3, #1
 800514c:	4a10      	ldr	r2, [pc, #64]	; (8005190 <pvPortMalloc+0x18c>)
 800514e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005150:	f7fe fc0c 	bl	800396c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <pvPortMalloc+0x16e>
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	e7fe      	b.n	8005170 <pvPortMalloc+0x16c>
    return pvReturn;
 8005172:	69fb      	ldr	r3, [r7, #28]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3728      	adds	r7, #40	; 0x28
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	20012d7c 	.word	0x20012d7c
 8005180:	20012d90 	.word	0x20012d90
 8005184:	20012d80 	.word	0x20012d80
 8005188:	20012d74 	.word	0x20012d74
 800518c:	20012d84 	.word	0x20012d84
 8005190:	20012d88 	.word	0x20012d88

08005194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d04b      	beq.n	800523e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80051a6:	2308      	movs	r3, #8
 80051a8:	425b      	negs	r3, r3
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4413      	add	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	4b23      	ldr	r3, [pc, #140]	; (8005248 <vPortFree+0xb4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <vPortFree+0x42>
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e7fe      	b.n	80051d4 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <vPortFree+0x5e>
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	e7fe      	b.n	80051f0 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4b14      	ldr	r3, [pc, #80]	; (8005248 <vPortFree+0xb4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01e      	beq.n	800523e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d11a      	bne.n	800523e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <vPortFree+0xb4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	43db      	mvns	r3, r3
 8005212:	401a      	ands	r2, r3
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005218:	f7fe fb9a 	bl	8003950 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <vPortFree+0xb8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4413      	add	r3, r2
 8005226:	4a09      	ldr	r2, [pc, #36]	; (800524c <vPortFree+0xb8>)
 8005228:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800522a:	6938      	ldr	r0, [r7, #16]
 800522c:	f000 f874 	bl	8005318 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <vPortFree+0xbc>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3301      	adds	r3, #1
 8005236:	4a06      	ldr	r2, [pc, #24]	; (8005250 <vPortFree+0xbc>)
 8005238:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800523a:	f7fe fb97 	bl	800396c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800523e:	bf00      	nop
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20012d90 	.word	0x20012d90
 800524c:	20012d80 	.word	0x20012d80
 8005250:	20012d8c 	.word	0x20012d8c

08005254 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800525a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800525e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005260:	4b27      	ldr	r3, [pc, #156]	; (8005300 <prvHeapInit+0xac>)
 8005262:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3307      	adds	r3, #7
 8005272:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0307 	bic.w	r3, r3, #7
 800527a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <prvHeapInit+0xac>)
 8005284:	4413      	add	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800528c:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <prvHeapInit+0xb0>)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <prvHeapInit+0xb0>)
 8005294:	2200      	movs	r2, #0
 8005296:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	4413      	add	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80052a0:	2208      	movs	r2, #8
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0307 	bic.w	r3, r3, #7
 80052ae:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4a15      	ldr	r2, [pc, #84]	; (8005308 <prvHeapInit+0xb4>)
 80052b4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <prvHeapInit+0xb4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2200      	movs	r2, #0
 80052bc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <prvHeapInit+0xb4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <prvHeapInit+0xb4>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4a0a      	ldr	r2, [pc, #40]	; (800530c <prvHeapInit+0xb8>)
 80052e2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a09      	ldr	r2, [pc, #36]	; (8005310 <prvHeapInit+0xbc>)
 80052ea:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052ec:	4b09      	ldr	r3, [pc, #36]	; (8005314 <prvHeapInit+0xc0>)
 80052ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052f2:	601a      	str	r2, [r3, #0]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	20000174 	.word	0x20000174
 8005304:	20012d74 	.word	0x20012d74
 8005308:	20012d7c 	.word	0x20012d7c
 800530c:	20012d84 	.word	0x20012d84
 8005310:	20012d80 	.word	0x20012d80
 8005314:	20012d90 	.word	0x20012d90

08005318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005320:	4b28      	ldr	r3, [pc, #160]	; (80053c4 <prvInsertBlockIntoFreeList+0xac>)
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e002      	b.n	800532c <prvInsertBlockIntoFreeList+0x14>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d8f7      	bhi.n	8005326 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	4413      	add	r3, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	429a      	cmp	r2, r3
 8005346:	d108      	bne.n	800535a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	441a      	add	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	441a      	add	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d118      	bne.n	80053a0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d00d      	beq.n	8005396 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	441a      	add	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e008      	b.n	80053a8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005396:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e003      	b.n	80053a8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d002      	beq.n	80053b6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20012d74 	.word	0x20012d74
 80053c8:	20012d7c 	.word	0x20012d7c

080053cc <__libc_init_array>:
 80053cc:	b570      	push	{r4, r5, r6, lr}
 80053ce:	4e0d      	ldr	r6, [pc, #52]	; (8005404 <__libc_init_array+0x38>)
 80053d0:	4c0d      	ldr	r4, [pc, #52]	; (8005408 <__libc_init_array+0x3c>)
 80053d2:	1ba4      	subs	r4, r4, r6
 80053d4:	10a4      	asrs	r4, r4, #2
 80053d6:	2500      	movs	r5, #0
 80053d8:	42a5      	cmp	r5, r4
 80053da:	d109      	bne.n	80053f0 <__libc_init_array+0x24>
 80053dc:	4e0b      	ldr	r6, [pc, #44]	; (800540c <__libc_init_array+0x40>)
 80053de:	4c0c      	ldr	r4, [pc, #48]	; (8005410 <__libc_init_array+0x44>)
 80053e0:	f000 f82c 	bl	800543c <_init>
 80053e4:	1ba4      	subs	r4, r4, r6
 80053e6:	10a4      	asrs	r4, r4, #2
 80053e8:	2500      	movs	r5, #0
 80053ea:	42a5      	cmp	r5, r4
 80053ec:	d105      	bne.n	80053fa <__libc_init_array+0x2e>
 80053ee:	bd70      	pop	{r4, r5, r6, pc}
 80053f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053f4:	4798      	blx	r3
 80053f6:	3501      	adds	r5, #1
 80053f8:	e7ee      	b.n	80053d8 <__libc_init_array+0xc>
 80053fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053fe:	4798      	blx	r3
 8005400:	3501      	adds	r5, #1
 8005402:	e7f2      	b.n	80053ea <__libc_init_array+0x1e>
 8005404:	080054e8 	.word	0x080054e8
 8005408:	080054e8 	.word	0x080054e8
 800540c:	080054e8 	.word	0x080054e8
 8005410:	080054ec 	.word	0x080054ec

08005414 <memcpy>:
 8005414:	b510      	push	{r4, lr}
 8005416:	1e43      	subs	r3, r0, #1
 8005418:	440a      	add	r2, r1
 800541a:	4291      	cmp	r1, r2
 800541c:	d100      	bne.n	8005420 <memcpy+0xc>
 800541e:	bd10      	pop	{r4, pc}
 8005420:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005424:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005428:	e7f7      	b.n	800541a <memcpy+0x6>

0800542a <memset>:
 800542a:	4402      	add	r2, r0
 800542c:	4603      	mov	r3, r0
 800542e:	4293      	cmp	r3, r2
 8005430:	d100      	bne.n	8005434 <memset+0xa>
 8005432:	4770      	bx	lr
 8005434:	f803 1b01 	strb.w	r1, [r3], #1
 8005438:	e7f9      	b.n	800542e <memset+0x4>
	...

0800543c <_init>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	bf00      	nop
 8005440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005442:	bc08      	pop	{r3}
 8005444:	469e      	mov	lr, r3
 8005446:	4770      	bx	lr

08005448 <_fini>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	bf00      	nop
 800544c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544e:	bc08      	pop	{r3}
 8005450:	469e      	mov	lr, r3
 8005452:	4770      	bx	lr
