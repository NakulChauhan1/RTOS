
First_RTOS_Project_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005184  08005184  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800518c  0800518c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e48  20000010  080051a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e58  080051a4  00022e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001303a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b33  00000000  00000000  0003307a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001130  00000000  00000000  00035bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  00036ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022894  00000000  00000000  00037cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da69  00000000  00000000  0005a55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6ec2  00000000  00000000  00067fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ee87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004784  00000000  00000000  0013ef04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800510c 	.word	0x0800510c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800510c 	.word	0x0800510c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fac5 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f845 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8d9 	bl	80006d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f8ad 	bl	8000680 <MX_USART2_UART_Init>
        Error_Handler();
      }
      HAL_Delay(1000);
  }*/

  ret = xTaskCreate(task1_handler, "TASK1", 200, "Task-1 running\n", 3, &task1_handler_address);
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	2303      	movs	r3, #3
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <main+0x80>)
 8000532:	22c8      	movs	r2, #200	; 0xc8
 8000534:	4917      	ldr	r1, [pc, #92]	; (8000594 <main+0x84>)
 8000536:	4818      	ldr	r0, [pc, #96]	; (8000598 <main+0x88>)
 8000538:	f003 f80c 	bl	8003554 <xTaskCreate>
 800053c:	6178      	str	r0, [r7, #20]
  configASSERT(ret == pdPASS);  
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d009      	beq.n	8000558 <main+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000548:	f383 8811 	msr	BASEPRI, r3
 800054c:	f3bf 8f6f 	isb	sy
 8000550:	f3bf 8f4f 	dsb	sy
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	e7fe      	b.n	8000556 <main+0x46>

  ret = xTaskCreate(task2_handler, "TASK2", 200, "Task-2 running\n", 2, &task2_handler_address);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	2302      	movs	r3, #2
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <main+0x8c>)
 8000562:	22c8      	movs	r2, #200	; 0xc8
 8000564:	490e      	ldr	r1, [pc, #56]	; (80005a0 <main+0x90>)
 8000566:	480f      	ldr	r0, [pc, #60]	; (80005a4 <main+0x94>)
 8000568:	f002 fff4 	bl	8003554 <xTaskCreate>
 800056c:	6178      	str	r0, [r7, #20]
  configASSERT(ret == pdPASS);
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d009      	beq.n	8000588 <main+0x78>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	e7fe      	b.n	8000586 <main+0x76>

  //Start the Schedular
  vTaskStartScheduler();
 8000588:	f003 f95c 	bl	8003844 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	e7fe      	b.n	800058c <main+0x7c>
 800058e:	bf00      	nop
 8000590:	08005124 	.word	0x08005124
 8000594:	08005134 	.word	0x08005134
 8000598:	080007b5 	.word	0x080007b5
 800059c:	0800513c 	.word	0x0800513c
 80005a0:	0800514c 	.word	0x0800514c
 80005a4:	080007ed 	.word	0x080007ed

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f004 fd9f 	bl	80050fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b29      	ldr	r3, [pc, #164]	; (8000678 <SystemClock_Config+0xd0>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <SystemClock_Config+0xd0>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <SystemClock_Config+0xd0>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e8:	2300      	movs	r3, #0
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <SystemClock_Config+0xd4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xd4>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xd4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800061c:	2310      	movs	r3, #16
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000620:	23c8      	movs	r3, #200	; 0xc8
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000624:	2308      	movs	r3, #8
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4618      	mov	r0, r3
 8000636:	f001 f88f 	bl	8001758 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000640:	f000 f902 	bl	8000848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fd8d 	bl	8001180 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800066c:	f000 f8ec 	bl	8000848 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	; 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_USART2_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b8:	f001 fce6 	bl	8002088 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f8c1 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20012d94 	.word	0x20012d94
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <MX_GPIO_Init+0xd0>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2120      	movs	r1, #32
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0xd4>)
 8000760:	f000 fcf4 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_GPIO_Init+0xd8>)
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_GPIO_Init+0xdc>)
 800077a:	f000 fb55 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077e:	2320      	movs	r3, #32
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xd4>)
 8000796:	f000 fb47 	bl	8000e28 <HAL_GPIO_Init>

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000
 80007ac:	10210000 	.word	0x10210000
 80007b0:	40020800 	.word	0x40020800

080007b4 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void * parameter)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

    while(1)
    {
      HAL_UART_AbortTransmit(&huart2);
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <task1_handler+0x34>)
 80007be:	f001 fd49 	bl	8002254 <HAL_UART_AbortTransmit>
      if (HAL_UART_Transmit(&huart2, (uint8_t *)parameter, 16, 100) != HAL_OK)
 80007c2:	2364      	movs	r3, #100	; 0x64
 80007c4:	2210      	movs	r2, #16
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <task1_handler+0x34>)
 80007ca:	f001 fcaa 	bl	8002122 <HAL_UART_Transmit>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <task1_handler+0x24>
      {
        Error_Handler();
 80007d4:	f000 f838 	bl	8000848 <Error_Handler>
      }
      HAL_Delay(100);
 80007d8:	2064      	movs	r0, #100	; 0x64
 80007da:	f000 f9a5 	bl	8000b28 <HAL_Delay>
      vTaskDelay(pdMS_TO_TICKS(2000));
 80007de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e2:	f002 fffb 	bl	80037dc <vTaskDelay>
      HAL_UART_AbortTransmit(&huart2);
 80007e6:	e7e9      	b.n	80007bc <task1_handler+0x8>
 80007e8:	20012d94 	.word	0x20012d94

080007ec <task2_handler>:
      //taskYIELD(); 
    }
}

static void task2_handler(void * parameter)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
    while(1)
    {
      HAL_UART_AbortTransmit(&huart2);
 80007f4:	480a      	ldr	r0, [pc, #40]	; (8000820 <task2_handler+0x34>)
 80007f6:	f001 fd2d 	bl	8002254 <HAL_UART_AbortTransmit>
      if (HAL_UART_Transmit(&huart2, (uint8_t *)parameter, 16, 100) != HAL_OK)
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	2210      	movs	r2, #16
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	4807      	ldr	r0, [pc, #28]	; (8000820 <task2_handler+0x34>)
 8000802:	f001 fc8e 	bl	8002122 <HAL_UART_Transmit>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <task2_handler+0x24>
      {
        Error_Handler();
 800080c:	f000 f81c 	bl	8000848 <Error_Handler>
      }
      HAL_Delay(100);
 8000810:	2064      	movs	r0, #100	; 0x64
 8000812:	f000 f989 	bl	8000b28 <HAL_Delay>
      vTaskDelay(pdMS_TO_TICKS(1000));
 8000816:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081a:	f002 ffdf 	bl	80037dc <vTaskDelay>
      HAL_UART_AbortTransmit(&huart2);
 800081e:	e7e9      	b.n	80007f4 <task2_handler+0x8>
 8000820:	20012d94 	.word	0x20012d94

08000824 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d101      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000836:	f000 f957 	bl	8000ae8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40001000 	.word	0x40001000

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084e:	e7fe      	b.n	800084e <Error_Handler+0x6>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <HAL_MspInit+0x4c>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MspInit 1 */
  //vInitPrioGroupValue();

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a19      	ldr	r2, [pc, #100]	; (8000924 <HAL_UART_MspInit+0x84>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d12b      	bne.n	800091a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_UART_MspInit+0x88>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <HAL_UART_MspInit+0x88>)
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_UART_MspInit+0x88>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_UART_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <HAL_UART_MspInit+0x88>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_UART_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 80008fa:	230c      	movs	r3, #12
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090a:	2307      	movs	r3, #7
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <HAL_UART_MspInit+0x8c>)
 8000916:	f000 fa87 	bl	8000e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40004400 	.word	0x40004400
 8000928:	40023800 	.word	0x40023800
 800092c:	40020000 	.word	0x40020000

08000930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	; 0x30
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	2036      	movs	r0, #54	; 0x36
 8000946:	f000 f9c9 	bl	8000cdc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800094a:	2036      	movs	r0, #54	; 0x36
 800094c:	f000 f9e2 	bl	8000d14 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <HAL_InitTick+0xa4>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a1e      	ldr	r2, [pc, #120]	; (80009d4 <HAL_InitTick+0xa4>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <HAL_InitTick+0xa4>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800096c:	f107 0210 	add.w	r2, r7, #16
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fd1c 	bl	80013b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800097c:	f000 fcf2 	bl	8001364 <HAL_RCC_GetPCLK1Freq>
 8000980:	4603      	mov	r3, r0
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000988:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <HAL_InitTick+0xa8>)
 800098a:	fba2 2303 	umull	r2, r3, r2, r3
 800098e:	0c9b      	lsrs	r3, r3, #18
 8000990:	3b01      	subs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_InitTick+0xac>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <HAL_InitTick+0xb0>)
 8000998:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_InitTick+0xac>)
 800099c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_InitTick+0xac>)
 80009a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_InitTick+0xac>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_InitTick+0xac>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009b4:	4809      	ldr	r0, [pc, #36]	; (80009dc <HAL_InitTick+0xac>)
 80009b6:	f001 f929 	bl	8001c0c <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d104      	bne.n	80009ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009c0:	4806      	ldr	r0, [pc, #24]	; (80009dc <HAL_InitTick+0xac>)
 80009c2:	f001 f958 	bl	8001c76 <HAL_TIM_Base_Start_IT>
 80009c6:	4603      	mov	r3, r0
 80009c8:	e000      	b.n	80009cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3730      	adds	r7, #48	; 0x30
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	431bde83 	.word	0x431bde83
 80009dc:	20012dd4 	.word	0x20012dd4
 80009e0:	40001000 	.word	0x40001000

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <TIM6_DAC_IRQHandler+0x10>)
 8000a16:	f001 f952 	bl	8001cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20012dd4 	.word	0x20012dd4

08000a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <SystemInit+0x28>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <SystemInit+0x28>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SystemInit+0x28>)
 8000a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a56:	e003      	b.n	8000a60 <LoopCopyDataInit>

08000a58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a5e:	3104      	adds	r1, #4

08000a60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a68:	d3f6      	bcc.n	8000a58 <CopyDataInit>
  ldr  r2, =_sbss
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a6c:	e002      	b.n	8000a74 <LoopFillZerobss>

08000a6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a70:	f842 3b04 	str.w	r3, [r2], #4

08000a74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a78:	d3f9      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a7a:	f7ff ffd3 	bl	8000a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f004 fb0d 	bl	800509c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fd45 	bl	8000510 <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a8c:	08005194 	.word	0x08005194
  ldr  r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a94:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a98:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000a9c:	20012e58 	.word	0x20012e58

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <HAL_Init+0x40>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_Init+0x40>)
 8000aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_Init+0x40>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f8fa 	bl	8000cc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff ff2c 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff feba 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20012e14 	.word	0x20012e14

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20012e14 	.word	0x20012e14

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff ffee 	bl	8000b10 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_Delay+0x40>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffde 	bl	8000b10 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000008 	.word	0x20000008

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ff4c 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cee:	f7ff ff61 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	6978      	ldr	r0, [r7, #20]
 8000cfa:	f7ff ffb1 	bl	8000c60 <NVIC_EncodePriority>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff80 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff54 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d3e:	f7ff fee7 	bl	8000b10 <HAL_GetTick>
 8000d42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d008      	beq.n	8000d62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e052      	b.n	8000e08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0216 	bic.w	r2, r2, #22
 8000d70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	695a      	ldr	r2, [r3, #20]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d103      	bne.n	8000d92 <HAL_DMA_Abort+0x62>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d007      	beq.n	8000da2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 0208 	bic.w	r2, r2, #8
 8000da0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0201 	bic.w	r2, r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000db2:	e013      	b.n	8000ddc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000db4:	f7ff feac 	bl	8000b10 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b05      	cmp	r3, #5
 8000dc0:	d90c      	bls.n	8000ddc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e015      	b.n	8000e08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1e4      	bne.n	8000db4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dee:	223f      	movs	r2, #63	; 0x3f
 8000df0:	409a      	lsls	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	e165      	b.n	8001110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	f040 8154 	bne.w	800110a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d00b      	beq.n	8000e82 <HAL_GPIO_Init+0x5a>
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d007      	beq.n	8000e82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e76:	2b11      	cmp	r3, #17
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b12      	cmp	r3, #18
 8000e80:	d130      	bne.n	8000ee4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0xfc>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b12      	cmp	r3, #18
 8000f22:	d123      	bne.n	8000f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	69b9      	ldr	r1, [r7, #24]
 8000f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0203 	and.w	r2, r3, #3
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 80ae 	beq.w	800110a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b5c      	ldr	r3, [pc, #368]	; (8001124 <HAL_GPIO_Init+0x2fc>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a5b      	ldr	r2, [pc, #364]	; (8001124 <HAL_GPIO_Init+0x2fc>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b59      	ldr	r3, [pc, #356]	; (8001124 <HAL_GPIO_Init+0x2fc>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fca:	4a57      	ldr	r2, [pc, #348]	; (8001128 <HAL_GPIO_Init+0x300>)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4e      	ldr	r2, [pc, #312]	; (800112c <HAL_GPIO_Init+0x304>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d025      	beq.n	8001042 <HAL_GPIO_Init+0x21a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	; (8001130 <HAL_GPIO_Init+0x308>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01f      	beq.n	800103e <HAL_GPIO_Init+0x216>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4c      	ldr	r2, [pc, #304]	; (8001134 <HAL_GPIO_Init+0x30c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x212>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4b      	ldr	r2, [pc, #300]	; (8001138 <HAL_GPIO_Init+0x310>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x20e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4a      	ldr	r2, [pc, #296]	; (800113c <HAL_GPIO_Init+0x314>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x20a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a49      	ldr	r2, [pc, #292]	; (8001140 <HAL_GPIO_Init+0x318>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x206>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a48      	ldr	r2, [pc, #288]	; (8001144 <HAL_GPIO_Init+0x31c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x202>
 8001026:	2306      	movs	r3, #6
 8001028:	e00c      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 800102a:	2307      	movs	r3, #7
 800102c:	e00a      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 800102e:	2305      	movs	r3, #5
 8001030:	e008      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 8001032:	2304      	movs	r3, #4
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 8001036:	2303      	movs	r3, #3
 8001038:	e004      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 800103a:	2302      	movs	r3, #2
 800103c:	e002      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <HAL_GPIO_Init+0x21c>
 8001042:	2300      	movs	r3, #0
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	f002 0203 	and.w	r2, r2, #3
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	4093      	lsls	r3, r2
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001054:	4934      	ldr	r1, [pc, #208]	; (8001128 <HAL_GPIO_Init+0x300>)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001062:	4b39      	ldr	r3, [pc, #228]	; (8001148 <HAL_GPIO_Init+0x320>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001086:	4a30      	ldr	r2, [pc, #192]	; (8001148 <HAL_GPIO_Init+0x320>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <HAL_GPIO_Init+0x320>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b0:	4a25      	ldr	r2, [pc, #148]	; (8001148 <HAL_GPIO_Init+0x320>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_GPIO_Init+0x320>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010da:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <HAL_GPIO_Init+0x320>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_GPIO_Init+0x320>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001104:	4a10      	ldr	r2, [pc, #64]	; (8001148 <HAL_GPIO_Init+0x320>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3301      	adds	r3, #1
 800110e:	61fb      	str	r3, [r7, #28]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	f67f ae96 	bls.w	8000e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001118:	bf00      	nop
 800111a:	3724      	adds	r7, #36	; 0x24
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40023800 	.word	0x40023800
 8001128:	40013800 	.word	0x40013800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40021000 	.word	0x40021000
 8001140:	40021400 	.word	0x40021400
 8001144:	40021800 	.word	0x40021800
 8001148:	40013c00 	.word	0x40013c00

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	619a      	str	r2, [r3, #24]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0cc      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001194:	4b68      	ldr	r3, [pc, #416]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d90c      	bls.n	80011bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a2:	4b65      	ldr	r3, [pc, #404]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011aa:	4b63      	ldr	r3, [pc, #396]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0b8      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d020      	beq.n	800120a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d4:	4b59      	ldr	r3, [pc, #356]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4a58      	ldr	r2, [pc, #352]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ec:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4a52      	ldr	r2, [pc, #328]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f8:	4b50      	ldr	r3, [pc, #320]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	494d      	ldr	r1, [pc, #308]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	4313      	orrs	r3, r2
 8001208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d044      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d107      	bne.n	800122e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d119      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e07f      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d003      	beq.n	800123e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123a:	2b03      	cmp	r3, #3
 800123c:	d107      	bne.n	800124e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800123e:	4b3f      	ldr	r3, [pc, #252]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e06f      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e067      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800125e:	4b37      	ldr	r3, [pc, #220]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f023 0203 	bic.w	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4934      	ldr	r1, [pc, #208]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	4313      	orrs	r3, r2
 800126e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001270:	f7ff fc4e 	bl	8000b10 <HAL_GetTick>
 8001274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001276:	e00a      	b.n	800128e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001278:	f7ff fc4a 	bl	8000b10 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f241 3288 	movw	r2, #5000	; 0x1388
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e04f      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 020c 	and.w	r2, r3, #12
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	429a      	cmp	r2, r3
 800129e:	d1eb      	bne.n	8001278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012a0:	4b25      	ldr	r3, [pc, #148]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d20c      	bcs.n	80012c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e032      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4916      	ldr	r1, [pc, #88]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d009      	beq.n	8001306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	490e      	ldr	r1, [pc, #56]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	4313      	orrs	r3, r2
 8001304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001306:	f000 f887 	bl	8001418 <HAL_RCC_GetSysClockFreq>
 800130a:	4601      	mov	r1, r0
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	5cd3      	ldrb	r3, [r2, r3]
 800131a:	fa21 f303 	lsr.w	r3, r1, r3
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_RCC_ClockConfig+0x1c8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fb02 	bl	8000930 <HAL_InitTick>

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023c00 	.word	0x40023c00
 800133c:	40023800 	.word	0x40023800
 8001340:	0800516c 	.word	0x0800516c
 8001344:	20000000 	.word	0x20000000
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_RCC_GetHCLKFreq+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000000 	.word	0x20000000

08001364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001368:	f7ff fff0 	bl	800134c <HAL_RCC_GetHCLKFreq>
 800136c:	4601      	mov	r1, r0
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	0a9b      	lsrs	r3, r3, #10
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	4a03      	ldr	r2, [pc, #12]	; (8001388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	0800517c 	.word	0x0800517c

0800138c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001390:	f7ff ffdc 	bl	800134c <HAL_RCC_GetHCLKFreq>
 8001394:	4601      	mov	r1, r0
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	0b5b      	lsrs	r3, r3, #13
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	0800517c 	.word	0x0800517c

080013b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	220f      	movs	r2, #15
 80013c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_RCC_GetClockConfig+0x5c>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 0203 	and.w	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_RCC_GetClockConfig+0x5c>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_RCC_GetClockConfig+0x5c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_RCC_GetClockConfig+0x5c>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <HAL_RCC_GetClockConfig+0x60>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 020f 	and.w	r2, r3, #15
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	601a      	str	r2, [r3, #0]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40023c00 	.word	0x40023c00

08001418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001432:	4bc6      	ldr	r3, [pc, #792]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b0c      	cmp	r3, #12
 800143c:	f200 817e 	bhi.w	800173c <HAL_RCC_GetSysClockFreq+0x324>
 8001440:	a201      	add	r2, pc, #4	; (adr r2, 8001448 <HAL_RCC_GetSysClockFreq+0x30>)
 8001442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001446:	bf00      	nop
 8001448:	0800147d 	.word	0x0800147d
 800144c:	0800173d 	.word	0x0800173d
 8001450:	0800173d 	.word	0x0800173d
 8001454:	0800173d 	.word	0x0800173d
 8001458:	08001483 	.word	0x08001483
 800145c:	0800173d 	.word	0x0800173d
 8001460:	0800173d 	.word	0x0800173d
 8001464:	0800173d 	.word	0x0800173d
 8001468:	08001489 	.word	0x08001489
 800146c:	0800173d 	.word	0x0800173d
 8001470:	0800173d 	.word	0x0800173d
 8001474:	0800173d 	.word	0x0800173d
 8001478:	080015e5 	.word	0x080015e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800147c:	4bb4      	ldr	r3, [pc, #720]	; (8001750 <HAL_RCC_GetSysClockFreq+0x338>)
 800147e:	613b      	str	r3, [r7, #16]
       break;
 8001480:	e15f      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001482:	4bb4      	ldr	r3, [pc, #720]	; (8001754 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001484:	613b      	str	r3, [r7, #16]
      break;
 8001486:	e15c      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001488:	4bb0      	ldr	r3, [pc, #704]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001490:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001492:	4bae      	ldr	r3, [pc, #696]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d04a      	beq.n	8001534 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800149e:	4bab      	ldr	r3, [pc, #684]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	099b      	lsrs	r3, r3, #6
 80014a4:	f04f 0400 	mov.w	r4, #0
 80014a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	ea03 0501 	and.w	r5, r3, r1
 80014b4:	ea04 0602 	and.w	r6, r4, r2
 80014b8:	4629      	mov	r1, r5
 80014ba:	4632      	mov	r2, r6
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	f04f 0400 	mov.w	r4, #0
 80014c4:	0154      	lsls	r4, r2, #5
 80014c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014ca:	014b      	lsls	r3, r1, #5
 80014cc:	4619      	mov	r1, r3
 80014ce:	4622      	mov	r2, r4
 80014d0:	1b49      	subs	r1, r1, r5
 80014d2:	eb62 0206 	sbc.w	r2, r2, r6
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	f04f 0400 	mov.w	r4, #0
 80014de:	0194      	lsls	r4, r2, #6
 80014e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014e4:	018b      	lsls	r3, r1, #6
 80014e6:	1a5b      	subs	r3, r3, r1
 80014e8:	eb64 0402 	sbc.w	r4, r4, r2
 80014ec:	f04f 0100 	mov.w	r1, #0
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	00e2      	lsls	r2, r4, #3
 80014f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014fa:	00d9      	lsls	r1, r3, #3
 80014fc:	460b      	mov	r3, r1
 80014fe:	4614      	mov	r4, r2
 8001500:	195b      	adds	r3, r3, r5
 8001502:	eb44 0406 	adc.w	r4, r4, r6
 8001506:	f04f 0100 	mov.w	r1, #0
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	0262      	lsls	r2, r4, #9
 8001510:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001514:	0259      	lsls	r1, r3, #9
 8001516:	460b      	mov	r3, r1
 8001518:	4614      	mov	r4, r2
 800151a:	4618      	mov	r0, r3
 800151c:	4621      	mov	r1, r4
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f04f 0400 	mov.w	r4, #0
 8001524:	461a      	mov	r2, r3
 8001526:	4623      	mov	r3, r4
 8001528:	f7fe fe72 	bl	8000210 <__aeabi_uldivmod>
 800152c:	4603      	mov	r3, r0
 800152e:	460c      	mov	r4, r1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e049      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001534:	4b85      	ldr	r3, [pc, #532]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	f04f 0400 	mov.w	r4, #0
 800153e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	ea03 0501 	and.w	r5, r3, r1
 800154a:	ea04 0602 	and.w	r6, r4, r2
 800154e:	4629      	mov	r1, r5
 8001550:	4632      	mov	r2, r6
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	f04f 0400 	mov.w	r4, #0
 800155a:	0154      	lsls	r4, r2, #5
 800155c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001560:	014b      	lsls	r3, r1, #5
 8001562:	4619      	mov	r1, r3
 8001564:	4622      	mov	r2, r4
 8001566:	1b49      	subs	r1, r1, r5
 8001568:	eb62 0206 	sbc.w	r2, r2, r6
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	f04f 0400 	mov.w	r4, #0
 8001574:	0194      	lsls	r4, r2, #6
 8001576:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800157a:	018b      	lsls	r3, r1, #6
 800157c:	1a5b      	subs	r3, r3, r1
 800157e:	eb64 0402 	sbc.w	r4, r4, r2
 8001582:	f04f 0100 	mov.w	r1, #0
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	00e2      	lsls	r2, r4, #3
 800158c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001590:	00d9      	lsls	r1, r3, #3
 8001592:	460b      	mov	r3, r1
 8001594:	4614      	mov	r4, r2
 8001596:	195b      	adds	r3, r3, r5
 8001598:	eb44 0406 	adc.w	r4, r4, r6
 800159c:	f04f 0100 	mov.w	r1, #0
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	02a2      	lsls	r2, r4, #10
 80015a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015aa:	0299      	lsls	r1, r3, #10
 80015ac:	460b      	mov	r3, r1
 80015ae:	4614      	mov	r4, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	4621      	mov	r1, r4
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f04f 0400 	mov.w	r4, #0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4623      	mov	r3, r4
 80015be:	f7fe fe27 	bl	8000210 <__aeabi_uldivmod>
 80015c2:	4603      	mov	r3, r0
 80015c4:	460c      	mov	r4, r1
 80015c6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015c8:	4b60      	ldr	r3, [pc, #384]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	3301      	adds	r3, #1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e0:	613b      	str	r3, [r7, #16]
      break;
 80015e2:	e0ae      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ec:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ee:	4b57      	ldr	r3, [pc, #348]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d04a      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015fa:	4b54      	ldr	r3, [pc, #336]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	099b      	lsrs	r3, r3, #6
 8001600:	f04f 0400 	mov.w	r4, #0
 8001604:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	ea03 0501 	and.w	r5, r3, r1
 8001610:	ea04 0602 	and.w	r6, r4, r2
 8001614:	4629      	mov	r1, r5
 8001616:	4632      	mov	r2, r6
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	f04f 0400 	mov.w	r4, #0
 8001620:	0154      	lsls	r4, r2, #5
 8001622:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001626:	014b      	lsls	r3, r1, #5
 8001628:	4619      	mov	r1, r3
 800162a:	4622      	mov	r2, r4
 800162c:	1b49      	subs	r1, r1, r5
 800162e:	eb62 0206 	sbc.w	r2, r2, r6
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	f04f 0400 	mov.w	r4, #0
 800163a:	0194      	lsls	r4, r2, #6
 800163c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001640:	018b      	lsls	r3, r1, #6
 8001642:	1a5b      	subs	r3, r3, r1
 8001644:	eb64 0402 	sbc.w	r4, r4, r2
 8001648:	f04f 0100 	mov.w	r1, #0
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	00e2      	lsls	r2, r4, #3
 8001652:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001656:	00d9      	lsls	r1, r3, #3
 8001658:	460b      	mov	r3, r1
 800165a:	4614      	mov	r4, r2
 800165c:	195b      	adds	r3, r3, r5
 800165e:	eb44 0406 	adc.w	r4, r4, r6
 8001662:	f04f 0100 	mov.w	r1, #0
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	0262      	lsls	r2, r4, #9
 800166c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001670:	0259      	lsls	r1, r3, #9
 8001672:	460b      	mov	r3, r1
 8001674:	4614      	mov	r4, r2
 8001676:	4618      	mov	r0, r3
 8001678:	4621      	mov	r1, r4
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f04f 0400 	mov.w	r4, #0
 8001680:	461a      	mov	r2, r3
 8001682:	4623      	mov	r3, r4
 8001684:	f7fe fdc4 	bl	8000210 <__aeabi_uldivmod>
 8001688:	4603      	mov	r3, r0
 800168a:	460c      	mov	r4, r1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e049      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	099b      	lsrs	r3, r3, #6
 8001696:	f04f 0400 	mov.w	r4, #0
 800169a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	ea03 0501 	and.w	r5, r3, r1
 80016a6:	ea04 0602 	and.w	r6, r4, r2
 80016aa:	4629      	mov	r1, r5
 80016ac:	4632      	mov	r2, r6
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	f04f 0400 	mov.w	r4, #0
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016bc:	014b      	lsls	r3, r1, #5
 80016be:	4619      	mov	r1, r3
 80016c0:	4622      	mov	r2, r4
 80016c2:	1b49      	subs	r1, r1, r5
 80016c4:	eb62 0206 	sbc.w	r2, r2, r6
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	f04f 0400 	mov.w	r4, #0
 80016d0:	0194      	lsls	r4, r2, #6
 80016d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016d6:	018b      	lsls	r3, r1, #6
 80016d8:	1a5b      	subs	r3, r3, r1
 80016da:	eb64 0402 	sbc.w	r4, r4, r2
 80016de:	f04f 0100 	mov.w	r1, #0
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	00e2      	lsls	r2, r4, #3
 80016e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016ec:	00d9      	lsls	r1, r3, #3
 80016ee:	460b      	mov	r3, r1
 80016f0:	4614      	mov	r4, r2
 80016f2:	195b      	adds	r3, r3, r5
 80016f4:	eb44 0406 	adc.w	r4, r4, r6
 80016f8:	f04f 0100 	mov.w	r1, #0
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	02a2      	lsls	r2, r4, #10
 8001702:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001706:	0299      	lsls	r1, r3, #10
 8001708:	460b      	mov	r3, r1
 800170a:	4614      	mov	r4, r2
 800170c:	4618      	mov	r0, r3
 800170e:	4621      	mov	r1, r4
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f04f 0400 	mov.w	r4, #0
 8001716:	461a      	mov	r2, r3
 8001718:	4623      	mov	r3, r4
 800171a:	f7fe fd79 	bl	8000210 <__aeabi_uldivmod>
 800171e:	4603      	mov	r3, r0
 8001720:	460c      	mov	r4, r1
 8001722:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	0f1b      	lsrs	r3, r3, #28
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	613b      	str	r3, [r7, #16]
      break;
 800173a:	e002      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <HAL_RCC_GetSysClockFreq+0x338>)
 800173e:	613b      	str	r3, [r7, #16]
      break;
 8001740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001742:	693b      	ldr	r3, [r7, #16]
}
 8001744:	4618      	mov	r0, r3
 8001746:	371c      	adds	r7, #28
 8001748:	46bd      	mov	sp, r7
 800174a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800174c:	40023800 	.word	0x40023800
 8001750:	00f42400 	.word	0x00f42400
 8001754:	007a1200 	.word	0x007a1200

08001758 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 8083 	beq.w	8001878 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001772:	4b95      	ldr	r3, [pc, #596]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b04      	cmp	r3, #4
 800177c:	d019      	beq.n	80017b2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800177e:	4b92      	ldr	r3, [pc, #584]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001786:	2b08      	cmp	r3, #8
 8001788:	d106      	bne.n	8001798 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800178a:	4b8f      	ldr	r3, [pc, #572]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001796:	d00c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001798:	4b8b      	ldr	r3, [pc, #556]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d112      	bne.n	80017ca <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017a4:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b0:	d10b      	bne.n	80017ca <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b2:	4b85      	ldr	r3, [pc, #532]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d05b      	beq.n	8001876 <HAL_RCC_OscConfig+0x11e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d157      	bne.n	8001876 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e216      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x8a>
 80017d4:	4b7c      	ldr	r3, [pc, #496]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a7b      	ldr	r2, [pc, #492]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e01d      	b.n	800181e <HAL_RCC_OscConfig+0xc6>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0xae>
 80017ec:	4b76      	ldr	r3, [pc, #472]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a75      	ldr	r2, [pc, #468]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b73      	ldr	r3, [pc, #460]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a72      	ldr	r2, [pc, #456]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e00b      	b.n	800181e <HAL_RCC_OscConfig+0xc6>
 8001806:	4b70      	ldr	r3, [pc, #448]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6f      	ldr	r2, [pc, #444]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6c      	ldr	r2, [pc, #432]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d013      	beq.n	800184e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff f973 	bl	8000b10 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182e:	f7ff f96f 	bl	8000b10 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e1db      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001840:	4b61      	ldr	r3, [pc, #388]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0xd6>
 800184c:	e014      	b.n	8001878 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff f95f 	bl	8000b10 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001856:	f7ff f95b 	bl	8000b10 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b64      	cmp	r3, #100	; 0x64
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1c7      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001868:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0xfe>
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001876:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d06f      	beq.n	8001964 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001884:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b00      	cmp	r3, #0
 800188e:	d017      	beq.n	80018c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001890:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001898:	2b08      	cmp	r3, #8
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800189c:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00b      	beq.n	80018c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a8:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018b0:	2b0c      	cmp	r3, #12
 80018b2:	d11c      	bne.n	80018ee <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b4:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d116      	bne.n	80018ee <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c0:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x180>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e18f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4938      	ldr	r1, [pc, #224]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ec:	e03a      	b.n	8001964 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d020      	beq.n	8001938 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f908 	bl	8000b10 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff f904 	bl	8000b10 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e170      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4925      	ldr	r1, [pc, #148]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
 8001936:	e015      	b.n	8001964 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff f8e7 	bl	8000b10 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff f8e3 	bl	8000b10 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e14f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d037      	beq.n	80019e0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d016      	beq.n	80019a6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_RCC_OscConfig+0x278>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff f8c7 	bl	8000b10 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff f8c3 	bl	8000b10 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e12f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800199a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x22e>
 80019a4:	e01c      	b.n	80019e0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_RCC_OscConfig+0x278>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff f8b0 	bl	8000b10 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b2:	e00f      	b.n	80019d4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b4:	f7ff f8ac 	bl	8000b10 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d908      	bls.n	80019d4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e118      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	42470000 	.word	0x42470000
 80019d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	4b8a      	ldr	r3, [pc, #552]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 80019d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e9      	bne.n	80019b4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8097 	beq.w	8001b1c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b83      	ldr	r3, [pc, #524]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10f      	bne.n	8001a1e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b7f      	ldr	r3, [pc, #508]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a7e      	ldr	r2, [pc, #504]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b7c      	ldr	r3, [pc, #496]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b79      	ldr	r3, [pc, #484]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2a:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a75      	ldr	r2, [pc, #468]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff f86b 	bl	8000b10 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff f867 	bl	8000b10 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0d3      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	4b6c      	ldr	r3, [pc, #432]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x31a>
 8001a64:	4b66      	ldr	r3, [pc, #408]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4a65      	ldr	r2, [pc, #404]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a70:	e01c      	b.n	8001aac <HAL_RCC_OscConfig+0x354>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x33c>
 8001a7a:	4b61      	ldr	r3, [pc, #388]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	4a60      	ldr	r2, [pc, #384]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6713      	str	r3, [r2, #112]	; 0x70
 8001a86:	4b5e      	ldr	r3, [pc, #376]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	4a5d      	ldr	r2, [pc, #372]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0x354>
 8001a94:	4b5a      	ldr	r3, [pc, #360]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	4a59      	ldr	r2, [pc, #356]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa0:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a56      	ldr	r2, [pc, #344]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001aa6:	f023 0304 	bic.w	r3, r3, #4
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d015      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff f82c 	bl	8000b10 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff f828 	bl	8000b10 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e092      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad2:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0ee      	beq.n	8001abc <HAL_RCC_OscConfig+0x364>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f816 	bl	8000b10 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f812 	bl	8000b10 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e07c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afe:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ee      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b10:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	4a3a      	ldr	r2, [pc, #232]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d068      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b24:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d060      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d145      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <HAL_RCC_OscConfig+0x4b0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7fe ffe7 	bl	8000b10 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b46:	f7fe ffe3 	bl	8000b10 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e04f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	019b      	lsls	r3, r3, #6
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	041b      	lsls	r3, r3, #16
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	061b      	lsls	r3, r3, #24
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	071b      	lsls	r3, r3, #28
 8001b90:	491b      	ldr	r1, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <HAL_RCC_OscConfig+0x4b0>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7fe ffb8 	bl	8000b10 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7fe ffb4 	bl	8000b10 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e020      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x44c>
 8001bc2:	e018      	b.n	8001bf6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_RCC_OscConfig+0x4b0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7fe ffa1 	bl	8000b10 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7fe ff9d 	bl	8000b10 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e009      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x47a>
 8001bf0:	e001      	b.n	8001bf6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40007000 	.word	0x40007000
 8001c08:	42470060 	.word	0x42470060

08001c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e01d      	b.n	8001c5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f815 	bl	8001c62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3304      	adds	r3, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f000 f968 	bl	8001f20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b085      	sub	sp, #20
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b06      	cmp	r3, #6
 8001c9e:	d007      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d122      	bne.n	8001d1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d11b      	bne.n	8001d1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0202 	mvn.w	r2, #2
 8001cea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8ee 	bl	8001ee2 <HAL_TIM_IC_CaptureCallback>
 8001d06:	e005      	b.n	8001d14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f8e0 	bl	8001ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8f1 	bl	8001ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d122      	bne.n	8001d6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d11b      	bne.n	8001d6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f06f 0204 	mvn.w	r2, #4
 8001d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8c4 	bl	8001ee2 <HAL_TIM_IC_CaptureCallback>
 8001d5a:	e005      	b.n	8001d68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f8b6 	bl	8001ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8c7 	bl	8001ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d122      	bne.n	8001dc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d11b      	bne.n	8001dc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f06f 0208 	mvn.w	r2, #8
 8001d92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2204      	movs	r2, #4
 8001d98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f89a 	bl	8001ee2 <HAL_TIM_IC_CaptureCallback>
 8001dae:	e005      	b.n	8001dbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f88c 	bl	8001ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f89d 	bl	8001ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d122      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d11b      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f06f 0210 	mvn.w	r2, #16
 8001de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2208      	movs	r2, #8
 8001dec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f870 	bl	8001ee2 <HAL_TIM_IC_CaptureCallback>
 8001e02:	e005      	b.n	8001e10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f862 	bl	8001ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f873 	bl	8001ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d10e      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d107      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0201 	mvn.w	r2, #1
 8001e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7fe fcf1 	bl	8000824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	2b80      	cmp	r3, #128	; 0x80
 8001e4e:	d10e      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	2b80      	cmp	r3, #128	; 0x80
 8001e5c:	d107      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f903 	bl	8002074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e78:	2b40      	cmp	r3, #64	; 0x40
 8001e7a:	d10e      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d107      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f838 	bl	8001f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d10e      	bne.n	8001ec6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	d107      	bne.n	8001ec6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f06f 0220 	mvn.w	r2, #32
 8001ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f8cd 	bl	8002060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a40      	ldr	r2, [pc, #256]	; (8002034 <TIM_Base_SetConfig+0x114>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d013      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3e:	d00f      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3d      	ldr	r2, [pc, #244]	; (8002038 <TIM_Base_SetConfig+0x118>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00b      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3c      	ldr	r2, [pc, #240]	; (800203c <TIM_Base_SetConfig+0x11c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3b      	ldr	r2, [pc, #236]	; (8002040 <TIM_Base_SetConfig+0x120>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3a      	ldr	r2, [pc, #232]	; (8002044 <TIM_Base_SetConfig+0x124>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d108      	bne.n	8001f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <TIM_Base_SetConfig+0x114>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d02b      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f80:	d027      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <TIM_Base_SetConfig+0x118>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d023      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a2b      	ldr	r2, [pc, #172]	; (800203c <TIM_Base_SetConfig+0x11c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d01f      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a2a      	ldr	r2, [pc, #168]	; (8002040 <TIM_Base_SetConfig+0x120>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01b      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a29      	ldr	r2, [pc, #164]	; (8002044 <TIM_Base_SetConfig+0x124>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d017      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a28      	ldr	r2, [pc, #160]	; (8002048 <TIM_Base_SetConfig+0x128>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a27      	ldr	r2, [pc, #156]	; (800204c <TIM_Base_SetConfig+0x12c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00f      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a26      	ldr	r2, [pc, #152]	; (8002050 <TIM_Base_SetConfig+0x130>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00b      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a25      	ldr	r2, [pc, #148]	; (8002054 <TIM_Base_SetConfig+0x134>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d007      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a24      	ldr	r2, [pc, #144]	; (8002058 <TIM_Base_SetConfig+0x138>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a23      	ldr	r2, [pc, #140]	; (800205c <TIM_Base_SetConfig+0x13c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d108      	bne.n	8001fe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <TIM_Base_SetConfig+0x114>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d003      	beq.n	8002018 <TIM_Base_SetConfig+0xf8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <TIM_Base_SetConfig+0x124>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d103      	bne.n	8002020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	615a      	str	r2, [r3, #20]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40010000 	.word	0x40010000
 8002038:	40000400 	.word	0x40000400
 800203c:	40000800 	.word	0x40000800
 8002040:	40000c00 	.word	0x40000c00
 8002044:	40010400 	.word	0x40010400
 8002048:	40014000 	.word	0x40014000
 800204c:	40014400 	.word	0x40014400
 8002050:	40014800 	.word	0x40014800
 8002054:	40001800 	.word	0x40001800
 8002058:	40001c00 	.word	0x40001c00
 800205c:	40002000 	.word	0x40002000

08002060 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e03f      	b.n	800211a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fbf6 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2224      	movs	r2, #36	; 0x24
 80020b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f94f 	bl	8002370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b088      	sub	sp, #32
 8002126:	af02      	add	r7, sp, #8
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b20      	cmp	r3, #32
 8002140:	f040 8083 	bne.w	800224a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_UART_Transmit+0x2e>
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e07b      	b.n	800224c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_UART_Transmit+0x40>
 800215e:	2302      	movs	r3, #2
 8002160:	e074      	b.n	800224c <HAL_UART_Transmit+0x12a>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2221      	movs	r2, #33	; 0x21
 8002174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002178:	f7fe fcca 	bl	8000b10 <HAL_GetTick>
 800217c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	88fa      	ldrh	r2, [r7, #6]
 8002182:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	88fa      	ldrh	r2, [r7, #6]
 8002188:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002192:	e042      	b.n	800221a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021aa:	d122      	bne.n	80021f2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2200      	movs	r2, #0
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f890 	bl	80022dc <UART_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e042      	b.n	800224c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3302      	adds	r3, #2
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	e017      	b.n	800221a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	3301      	adds	r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	e013      	b.n	800221a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2200      	movs	r2, #0
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 f86d 	bl	80022dc <UART_WaitOnFlagUntilTimeout>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e01f      	b.n	800224c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	60ba      	str	r2, [r7, #8]
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1b7      	bne.n	8002194 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2200      	movs	r2, #0
 800222c:	2140      	movs	r1, #64	; 0x40
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f854 	bl	80022dc <UART_WaitOnFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e006      	b.n	800224c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e000      	b.n	800224c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800224a:	2302      	movs	r3, #2
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800226a:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002276:	2b80      	cmp	r3, #128	; 0x80
 8002278:	d124      	bne.n	80022c4 <HAL_UART_AbortTransmit+0x70>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002288:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	2b00      	cmp	r3, #0
 8002290:	d018      	beq.n	80022c4 <HAL_UART_AbortTransmit+0x70>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	2200      	movs	r2, #0
 8002298:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fd46 	bl	8000d30 <HAL_DMA_Abort>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00c      	beq.n	80022c4 <HAL_UART_AbortTransmit+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fdae 	bl	8000e10 <HAL_DMA_GetError>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d104      	bne.n	80022c4 <HAL_UART_AbortTransmit+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2210      	movs	r2, #16
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e007      	b.n	80022d4 <HAL_UART_AbortTransmit+0x80>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ec:	e02c      	b.n	8002348 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022f4:	d028      	beq.n	8002348 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <UART_WaitOnFlagUntilTimeout+0x30>
 80022fc:	f7fe fc08 	bl	8000b10 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	429a      	cmp	r2, r3
 800230a:	d21d      	bcs.n	8002348 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800231a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e00f      	b.n	8002368 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4013      	ands	r3, r2
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	429a      	cmp	r2, r3
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	429a      	cmp	r2, r3
 8002364:	d0c3      	beq.n	80022ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80023b2:	f023 030c 	bic.w	r3, r3, #12
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	430b      	orrs	r3, r1
 80023be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023de:	f040 818b 	bne.w	80026f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4ac1      	ldr	r2, [pc, #772]	; (80026ec <UART_SetConfig+0x37c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d005      	beq.n	80023f8 <UART_SetConfig+0x88>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4abf      	ldr	r2, [pc, #764]	; (80026f0 <UART_SetConfig+0x380>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	f040 80bd 	bne.w	8002572 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023f8:	f7fe ffc8 	bl	800138c <HAL_RCC_GetPCLK2Freq>
 80023fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	461d      	mov	r5, r3
 8002402:	f04f 0600 	mov.w	r6, #0
 8002406:	46a8      	mov	r8, r5
 8002408:	46b1      	mov	r9, r6
 800240a:	eb18 0308 	adds.w	r3, r8, r8
 800240e:	eb49 0409 	adc.w	r4, r9, r9
 8002412:	4698      	mov	r8, r3
 8002414:	46a1      	mov	r9, r4
 8002416:	eb18 0805 	adds.w	r8, r8, r5
 800241a:	eb49 0906 	adc.w	r9, r9, r6
 800241e:	f04f 0100 	mov.w	r1, #0
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800242a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800242e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002432:	4688      	mov	r8, r1
 8002434:	4691      	mov	r9, r2
 8002436:	eb18 0005 	adds.w	r0, r8, r5
 800243a:	eb49 0106 	adc.w	r1, r9, r6
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	461d      	mov	r5, r3
 8002444:	f04f 0600 	mov.w	r6, #0
 8002448:	196b      	adds	r3, r5, r5
 800244a:	eb46 0406 	adc.w	r4, r6, r6
 800244e:	461a      	mov	r2, r3
 8002450:	4623      	mov	r3, r4
 8002452:	f7fd fedd 	bl	8000210 <__aeabi_uldivmod>
 8002456:	4603      	mov	r3, r0
 8002458:	460c      	mov	r4, r1
 800245a:	461a      	mov	r2, r3
 800245c:	4ba5      	ldr	r3, [pc, #660]	; (80026f4 <UART_SetConfig+0x384>)
 800245e:	fba3 2302 	umull	r2, r3, r3, r2
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	461d      	mov	r5, r3
 800246c:	f04f 0600 	mov.w	r6, #0
 8002470:	46a9      	mov	r9, r5
 8002472:	46b2      	mov	sl, r6
 8002474:	eb19 0309 	adds.w	r3, r9, r9
 8002478:	eb4a 040a 	adc.w	r4, sl, sl
 800247c:	4699      	mov	r9, r3
 800247e:	46a2      	mov	sl, r4
 8002480:	eb19 0905 	adds.w	r9, r9, r5
 8002484:	eb4a 0a06 	adc.w	sl, sl, r6
 8002488:	f04f 0100 	mov.w	r1, #0
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002494:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002498:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800249c:	4689      	mov	r9, r1
 800249e:	4692      	mov	sl, r2
 80024a0:	eb19 0005 	adds.w	r0, r9, r5
 80024a4:	eb4a 0106 	adc.w	r1, sl, r6
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	461d      	mov	r5, r3
 80024ae:	f04f 0600 	mov.w	r6, #0
 80024b2:	196b      	adds	r3, r5, r5
 80024b4:	eb46 0406 	adc.w	r4, r6, r6
 80024b8:	461a      	mov	r2, r3
 80024ba:	4623      	mov	r3, r4
 80024bc:	f7fd fea8 	bl	8000210 <__aeabi_uldivmod>
 80024c0:	4603      	mov	r3, r0
 80024c2:	460c      	mov	r4, r1
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b8b      	ldr	r3, [pc, #556]	; (80026f4 <UART_SetConfig+0x384>)
 80024c8:	fba3 1302 	umull	r1, r3, r3, r2
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	2164      	movs	r1, #100	; 0x64
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	3332      	adds	r3, #50	; 0x32
 80024da:	4a86      	ldr	r2, [pc, #536]	; (80026f4 <UART_SetConfig+0x384>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024e8:	4498      	add	r8, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	461d      	mov	r5, r3
 80024ee:	f04f 0600 	mov.w	r6, #0
 80024f2:	46a9      	mov	r9, r5
 80024f4:	46b2      	mov	sl, r6
 80024f6:	eb19 0309 	adds.w	r3, r9, r9
 80024fa:	eb4a 040a 	adc.w	r4, sl, sl
 80024fe:	4699      	mov	r9, r3
 8002500:	46a2      	mov	sl, r4
 8002502:	eb19 0905 	adds.w	r9, r9, r5
 8002506:	eb4a 0a06 	adc.w	sl, sl, r6
 800250a:	f04f 0100 	mov.w	r1, #0
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002516:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800251a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800251e:	4689      	mov	r9, r1
 8002520:	4692      	mov	sl, r2
 8002522:	eb19 0005 	adds.w	r0, r9, r5
 8002526:	eb4a 0106 	adc.w	r1, sl, r6
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	461d      	mov	r5, r3
 8002530:	f04f 0600 	mov.w	r6, #0
 8002534:	196b      	adds	r3, r5, r5
 8002536:	eb46 0406 	adc.w	r4, r6, r6
 800253a:	461a      	mov	r2, r3
 800253c:	4623      	mov	r3, r4
 800253e:	f7fd fe67 	bl	8000210 <__aeabi_uldivmod>
 8002542:	4603      	mov	r3, r0
 8002544:	460c      	mov	r4, r1
 8002546:	461a      	mov	r2, r3
 8002548:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <UART_SetConfig+0x384>)
 800254a:	fba3 1302 	umull	r1, r3, r3, r2
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2164      	movs	r1, #100	; 0x64
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	3332      	adds	r3, #50	; 0x32
 800255c:	4a65      	ldr	r2, [pc, #404]	; (80026f4 <UART_SetConfig+0x384>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	f003 0207 	and.w	r2, r3, #7
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4442      	add	r2, r8
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	e26f      	b.n	8002a52 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002572:	f7fe fef7 	bl	8001364 <HAL_RCC_GetPCLK1Freq>
 8002576:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	461d      	mov	r5, r3
 800257c:	f04f 0600 	mov.w	r6, #0
 8002580:	46a8      	mov	r8, r5
 8002582:	46b1      	mov	r9, r6
 8002584:	eb18 0308 	adds.w	r3, r8, r8
 8002588:	eb49 0409 	adc.w	r4, r9, r9
 800258c:	4698      	mov	r8, r3
 800258e:	46a1      	mov	r9, r4
 8002590:	eb18 0805 	adds.w	r8, r8, r5
 8002594:	eb49 0906 	adc.w	r9, r9, r6
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025ac:	4688      	mov	r8, r1
 80025ae:	4691      	mov	r9, r2
 80025b0:	eb18 0005 	adds.w	r0, r8, r5
 80025b4:	eb49 0106 	adc.w	r1, r9, r6
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	461d      	mov	r5, r3
 80025be:	f04f 0600 	mov.w	r6, #0
 80025c2:	196b      	adds	r3, r5, r5
 80025c4:	eb46 0406 	adc.w	r4, r6, r6
 80025c8:	461a      	mov	r2, r3
 80025ca:	4623      	mov	r3, r4
 80025cc:	f7fd fe20 	bl	8000210 <__aeabi_uldivmod>
 80025d0:	4603      	mov	r3, r0
 80025d2:	460c      	mov	r4, r1
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <UART_SetConfig+0x384>)
 80025d8:	fba3 2302 	umull	r2, r3, r3, r2
 80025dc:	095b      	lsrs	r3, r3, #5
 80025de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	461d      	mov	r5, r3
 80025e6:	f04f 0600 	mov.w	r6, #0
 80025ea:	46a9      	mov	r9, r5
 80025ec:	46b2      	mov	sl, r6
 80025ee:	eb19 0309 	adds.w	r3, r9, r9
 80025f2:	eb4a 040a 	adc.w	r4, sl, sl
 80025f6:	4699      	mov	r9, r3
 80025f8:	46a2      	mov	sl, r4
 80025fa:	eb19 0905 	adds.w	r9, r9, r5
 80025fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800260e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002612:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002616:	4689      	mov	r9, r1
 8002618:	4692      	mov	sl, r2
 800261a:	eb19 0005 	adds.w	r0, r9, r5
 800261e:	eb4a 0106 	adc.w	r1, sl, r6
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	461d      	mov	r5, r3
 8002628:	f04f 0600 	mov.w	r6, #0
 800262c:	196b      	adds	r3, r5, r5
 800262e:	eb46 0406 	adc.w	r4, r6, r6
 8002632:	461a      	mov	r2, r3
 8002634:	4623      	mov	r3, r4
 8002636:	f7fd fdeb 	bl	8000210 <__aeabi_uldivmod>
 800263a:	4603      	mov	r3, r0
 800263c:	460c      	mov	r4, r1
 800263e:	461a      	mov	r2, r3
 8002640:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <UART_SetConfig+0x384>)
 8002642:	fba3 1302 	umull	r1, r3, r3, r2
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2164      	movs	r1, #100	; 0x64
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	3332      	adds	r3, #50	; 0x32
 8002654:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <UART_SetConfig+0x384>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002662:	4498      	add	r8, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	461d      	mov	r5, r3
 8002668:	f04f 0600 	mov.w	r6, #0
 800266c:	46a9      	mov	r9, r5
 800266e:	46b2      	mov	sl, r6
 8002670:	eb19 0309 	adds.w	r3, r9, r9
 8002674:	eb4a 040a 	adc.w	r4, sl, sl
 8002678:	4699      	mov	r9, r3
 800267a:	46a2      	mov	sl, r4
 800267c:	eb19 0905 	adds.w	r9, r9, r5
 8002680:	eb4a 0a06 	adc.w	sl, sl, r6
 8002684:	f04f 0100 	mov.w	r1, #0
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002690:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002694:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002698:	4689      	mov	r9, r1
 800269a:	4692      	mov	sl, r2
 800269c:	eb19 0005 	adds.w	r0, r9, r5
 80026a0:	eb4a 0106 	adc.w	r1, sl, r6
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	461d      	mov	r5, r3
 80026aa:	f04f 0600 	mov.w	r6, #0
 80026ae:	196b      	adds	r3, r5, r5
 80026b0:	eb46 0406 	adc.w	r4, r6, r6
 80026b4:	461a      	mov	r2, r3
 80026b6:	4623      	mov	r3, r4
 80026b8:	f7fd fdaa 	bl	8000210 <__aeabi_uldivmod>
 80026bc:	4603      	mov	r3, r0
 80026be:	460c      	mov	r4, r1
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <UART_SetConfig+0x384>)
 80026c4:	fba3 1302 	umull	r1, r3, r3, r2
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	2164      	movs	r1, #100	; 0x64
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	3332      	adds	r3, #50	; 0x32
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <UART_SetConfig+0x384>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	f003 0207 	and.w	r2, r3, #7
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4442      	add	r2, r8
 80026e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80026ea:	e1b2      	b.n	8002a52 <UART_SetConfig+0x6e2>
 80026ec:	40011000 	.word	0x40011000
 80026f0:	40011400 	.word	0x40011400
 80026f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4ad7      	ldr	r2, [pc, #860]	; (8002a5c <UART_SetConfig+0x6ec>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d005      	beq.n	800270e <UART_SetConfig+0x39e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4ad6      	ldr	r2, [pc, #856]	; (8002a60 <UART_SetConfig+0x6f0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	f040 80d1 	bne.w	80028b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800270e:	f7fe fe3d 	bl	800138c <HAL_RCC_GetPCLK2Freq>
 8002712:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	469a      	mov	sl, r3
 8002718:	f04f 0b00 	mov.w	fp, #0
 800271c:	46d0      	mov	r8, sl
 800271e:	46d9      	mov	r9, fp
 8002720:	eb18 0308 	adds.w	r3, r8, r8
 8002724:	eb49 0409 	adc.w	r4, r9, r9
 8002728:	4698      	mov	r8, r3
 800272a:	46a1      	mov	r9, r4
 800272c:	eb18 080a 	adds.w	r8, r8, sl
 8002730:	eb49 090b 	adc.w	r9, r9, fp
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002740:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002744:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002748:	4688      	mov	r8, r1
 800274a:	4691      	mov	r9, r2
 800274c:	eb1a 0508 	adds.w	r5, sl, r8
 8002750:	eb4b 0609 	adc.w	r6, fp, r9
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4619      	mov	r1, r3
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	f04f 0400 	mov.w	r4, #0
 8002766:	0094      	lsls	r4, r2, #2
 8002768:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800276c:	008b      	lsls	r3, r1, #2
 800276e:	461a      	mov	r2, r3
 8002770:	4623      	mov	r3, r4
 8002772:	4628      	mov	r0, r5
 8002774:	4631      	mov	r1, r6
 8002776:	f7fd fd4b 	bl	8000210 <__aeabi_uldivmod>
 800277a:	4603      	mov	r3, r0
 800277c:	460c      	mov	r4, r1
 800277e:	461a      	mov	r2, r3
 8002780:	4bb8      	ldr	r3, [pc, #736]	; (8002a64 <UART_SetConfig+0x6f4>)
 8002782:	fba3 2302 	umull	r2, r3, r3, r2
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	469b      	mov	fp, r3
 8002790:	f04f 0c00 	mov.w	ip, #0
 8002794:	46d9      	mov	r9, fp
 8002796:	46e2      	mov	sl, ip
 8002798:	eb19 0309 	adds.w	r3, r9, r9
 800279c:	eb4a 040a 	adc.w	r4, sl, sl
 80027a0:	4699      	mov	r9, r3
 80027a2:	46a2      	mov	sl, r4
 80027a4:	eb19 090b 	adds.w	r9, r9, fp
 80027a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027ac:	f04f 0100 	mov.w	r1, #0
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027c0:	4689      	mov	r9, r1
 80027c2:	4692      	mov	sl, r2
 80027c4:	eb1b 0509 	adds.w	r5, fp, r9
 80027c8:	eb4c 060a 	adc.w	r6, ip, sl
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4619      	mov	r1, r3
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	f04f 0400 	mov.w	r4, #0
 80027de:	0094      	lsls	r4, r2, #2
 80027e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027e4:	008b      	lsls	r3, r1, #2
 80027e6:	461a      	mov	r2, r3
 80027e8:	4623      	mov	r3, r4
 80027ea:	4628      	mov	r0, r5
 80027ec:	4631      	mov	r1, r6
 80027ee:	f7fd fd0f 	bl	8000210 <__aeabi_uldivmod>
 80027f2:	4603      	mov	r3, r0
 80027f4:	460c      	mov	r4, r1
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b9a      	ldr	r3, [pc, #616]	; (8002a64 <UART_SetConfig+0x6f4>)
 80027fa:	fba3 1302 	umull	r1, r3, r3, r2
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2164      	movs	r1, #100	; 0x64
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	3332      	adds	r3, #50	; 0x32
 800280c:	4a95      	ldr	r2, [pc, #596]	; (8002a64 <UART_SetConfig+0x6f4>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002818:	4498      	add	r8, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	469b      	mov	fp, r3
 800281e:	f04f 0c00 	mov.w	ip, #0
 8002822:	46d9      	mov	r9, fp
 8002824:	46e2      	mov	sl, ip
 8002826:	eb19 0309 	adds.w	r3, r9, r9
 800282a:	eb4a 040a 	adc.w	r4, sl, sl
 800282e:	4699      	mov	r9, r3
 8002830:	46a2      	mov	sl, r4
 8002832:	eb19 090b 	adds.w	r9, r9, fp
 8002836:	eb4a 0a0c 	adc.w	sl, sl, ip
 800283a:	f04f 0100 	mov.w	r1, #0
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002846:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800284a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800284e:	4689      	mov	r9, r1
 8002850:	4692      	mov	sl, r2
 8002852:	eb1b 0509 	adds.w	r5, fp, r9
 8002856:	eb4c 060a 	adc.w	r6, ip, sl
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4619      	mov	r1, r3
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	f04f 0400 	mov.w	r4, #0
 800286c:	0094      	lsls	r4, r2, #2
 800286e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002872:	008b      	lsls	r3, r1, #2
 8002874:	461a      	mov	r2, r3
 8002876:	4623      	mov	r3, r4
 8002878:	4628      	mov	r0, r5
 800287a:	4631      	mov	r1, r6
 800287c:	f7fd fcc8 	bl	8000210 <__aeabi_uldivmod>
 8002880:	4603      	mov	r3, r0
 8002882:	460c      	mov	r4, r1
 8002884:	461a      	mov	r2, r3
 8002886:	4b77      	ldr	r3, [pc, #476]	; (8002a64 <UART_SetConfig+0x6f4>)
 8002888:	fba3 1302 	umull	r1, r3, r3, r2
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	2164      	movs	r1, #100	; 0x64
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	3332      	adds	r3, #50	; 0x32
 800289a:	4a72      	ldr	r2, [pc, #456]	; (8002a64 <UART_SetConfig+0x6f4>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4442      	add	r2, r8
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	e0d0      	b.n	8002a52 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80028b0:	f7fe fd58 	bl	8001364 <HAL_RCC_GetPCLK1Freq>
 80028b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	469a      	mov	sl, r3
 80028ba:	f04f 0b00 	mov.w	fp, #0
 80028be:	46d0      	mov	r8, sl
 80028c0:	46d9      	mov	r9, fp
 80028c2:	eb18 0308 	adds.w	r3, r8, r8
 80028c6:	eb49 0409 	adc.w	r4, r9, r9
 80028ca:	4698      	mov	r8, r3
 80028cc:	46a1      	mov	r9, r4
 80028ce:	eb18 080a 	adds.w	r8, r8, sl
 80028d2:	eb49 090b 	adc.w	r9, r9, fp
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028ea:	4688      	mov	r8, r1
 80028ec:	4691      	mov	r9, r2
 80028ee:	eb1a 0508 	adds.w	r5, sl, r8
 80028f2:	eb4b 0609 	adc.w	r6, fp, r9
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4619      	mov	r1, r3
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	f04f 0400 	mov.w	r4, #0
 8002908:	0094      	lsls	r4, r2, #2
 800290a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800290e:	008b      	lsls	r3, r1, #2
 8002910:	461a      	mov	r2, r3
 8002912:	4623      	mov	r3, r4
 8002914:	4628      	mov	r0, r5
 8002916:	4631      	mov	r1, r6
 8002918:	f7fd fc7a 	bl	8000210 <__aeabi_uldivmod>
 800291c:	4603      	mov	r3, r0
 800291e:	460c      	mov	r4, r1
 8002920:	461a      	mov	r2, r3
 8002922:	4b50      	ldr	r3, [pc, #320]	; (8002a64 <UART_SetConfig+0x6f4>)
 8002924:	fba3 2302 	umull	r2, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	469b      	mov	fp, r3
 8002932:	f04f 0c00 	mov.w	ip, #0
 8002936:	46d9      	mov	r9, fp
 8002938:	46e2      	mov	sl, ip
 800293a:	eb19 0309 	adds.w	r3, r9, r9
 800293e:	eb4a 040a 	adc.w	r4, sl, sl
 8002942:	4699      	mov	r9, r3
 8002944:	46a2      	mov	sl, r4
 8002946:	eb19 090b 	adds.w	r9, r9, fp
 800294a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800295a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800295e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002962:	4689      	mov	r9, r1
 8002964:	4692      	mov	sl, r2
 8002966:	eb1b 0509 	adds.w	r5, fp, r9
 800296a:	eb4c 060a 	adc.w	r6, ip, sl
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4619      	mov	r1, r3
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	f04f 0400 	mov.w	r4, #0
 8002980:	0094      	lsls	r4, r2, #2
 8002982:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002986:	008b      	lsls	r3, r1, #2
 8002988:	461a      	mov	r2, r3
 800298a:	4623      	mov	r3, r4
 800298c:	4628      	mov	r0, r5
 800298e:	4631      	mov	r1, r6
 8002990:	f7fd fc3e 	bl	8000210 <__aeabi_uldivmod>
 8002994:	4603      	mov	r3, r0
 8002996:	460c      	mov	r4, r1
 8002998:	461a      	mov	r2, r3
 800299a:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <UART_SetConfig+0x6f4>)
 800299c:	fba3 1302 	umull	r1, r3, r3, r2
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	2164      	movs	r1, #100	; 0x64
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	3332      	adds	r3, #50	; 0x32
 80029ae:	4a2d      	ldr	r2, [pc, #180]	; (8002a64 <UART_SetConfig+0x6f4>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ba:	4498      	add	r8, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	469b      	mov	fp, r3
 80029c0:	f04f 0c00 	mov.w	ip, #0
 80029c4:	46d9      	mov	r9, fp
 80029c6:	46e2      	mov	sl, ip
 80029c8:	eb19 0309 	adds.w	r3, r9, r9
 80029cc:	eb4a 040a 	adc.w	r4, sl, sl
 80029d0:	4699      	mov	r9, r3
 80029d2:	46a2      	mov	sl, r4
 80029d4:	eb19 090b 	adds.w	r9, r9, fp
 80029d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029dc:	f04f 0100 	mov.w	r1, #0
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029f0:	4689      	mov	r9, r1
 80029f2:	4692      	mov	sl, r2
 80029f4:	eb1b 0509 	adds.w	r5, fp, r9
 80029f8:	eb4c 060a 	adc.w	r6, ip, sl
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4619      	mov	r1, r3
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	f04f 0400 	mov.w	r4, #0
 8002a0e:	0094      	lsls	r4, r2, #2
 8002a10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a14:	008b      	lsls	r3, r1, #2
 8002a16:	461a      	mov	r2, r3
 8002a18:	4623      	mov	r3, r4
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	4631      	mov	r1, r6
 8002a1e:	f7fd fbf7 	bl	8000210 <__aeabi_uldivmod>
 8002a22:	4603      	mov	r3, r0
 8002a24:	460c      	mov	r4, r1
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <UART_SetConfig+0x6f4>)
 8002a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2164      	movs	r1, #100	; 0x64
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	3332      	adds	r3, #50	; 0x32
 8002a3c:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <UART_SetConfig+0x6f4>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	f003 020f 	and.w	r2, r3, #15
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4442      	add	r2, r8
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	e7ff      	b.n	8002a52 <UART_SetConfig+0x6e2>
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5c:	40011000 	.word	0x40011000
 8002a60:	40011400 	.word	0x40011400
 8002a64:	51eb851f 	.word	0x51eb851f

08002a68 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f103 0208 	add.w	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a80:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f103 0208 	add.w	r2, r3, #8
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f103 0208 	add.w	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	601a      	str	r2, [r3, #0]
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b20:	d103      	bne.n	8002b2a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e00c      	b.n	8002b44 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e002      	b.n	8002b38 <vListInsert+0x2e>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d2f6      	bcs.n	8002b32 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	601a      	str	r2, [r3, #0]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6892      	ldr	r2, [r2, #8]
 8002b92:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6852      	ldr	r2, [r2, #4]
 8002b9c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d103      	bne.n	8002bb0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1e5a      	subs	r2, r3, #1
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <xQueueGenericReset+0x28>
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	e7fe      	b.n	8002bf6 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002bf8:	f001 ff52 	bl	8004aa0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c04:	68f9      	ldr	r1, [r7, #12]
 8002c06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	441a      	add	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	68f9      	ldr	r1, [r7, #12]
 8002c2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	441a      	add	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	22ff      	movs	r2, #255	; 0xff
 8002c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	22ff      	movs	r2, #255	; 0xff
 8002c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d114      	bne.n	8002c78 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01a      	beq.n	8002c8c <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3310      	adds	r3, #16
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 f858 	bl	8003d10 <xTaskRemoveFromEventList>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d012      	beq.n	8002c8c <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <xQueueGenericReset+0xcc>)
 8002c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	e009      	b.n	8002c8c <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3310      	adds	r3, #16
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fef3 	bl	8002a68 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3324      	adds	r3, #36	; 0x24
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff feee 	bl	8002a68 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002c8c:	f001 ff36 	bl	8004afc <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002c90:	2301      	movs	r3, #1
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000ed04 	.word	0xe000ed04

08002ca0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08c      	sub	sp, #48	; 0x30
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	4613      	mov	r3, r2
 8002cac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <xQueueGenericCreate+0x28>
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e7fe      	b.n	8002cc6 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <xQueueGenericCreate+0x46>
 8002cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d101      	bne.n	8002cea <xQueueGenericCreate+0x4a>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <xQueueGenericCreate+0x4c>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <xQueueGenericCreate+0x64>
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e7fe      	b.n	8002d02 <xQueueGenericCreate+0x62>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	3350      	adds	r3, #80	; 0x50
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 ffe3 	bl	8004cd4 <pvPortMalloc>
 8002d0e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00d      	beq.n	8002d32 <xQueueGenericCreate+0x92>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3350      	adds	r3, #80	; 0x50
 8002d1e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d20:	79fa      	ldrb	r2, [r7, #7]
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f805 	bl	8002d3c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002d32:	6a3b      	ldr	r3, [r7, #32]
    }
 8002d34:	4618      	mov	r0, r3
 8002d36:	3728      	adds	r7, #40	; 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d103      	bne.n	8002d58 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e002      	b.n	8002d5e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	69b8      	ldr	r0, [r7, #24]
 8002d6e:	f7ff ff2f 	bl	8002bd0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08e      	sub	sp, #56	; 0x38
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d92:	2300      	movs	r3, #0
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <xQueueGenericSend+0x30>
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db2:	e7fe      	b.n	8002db2 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d103      	bne.n	8002dc2 <xQueueGenericSend+0x3e>
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <xQueueGenericSend+0x42>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <xQueueGenericSend+0x44>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <xQueueGenericSend+0x5c>
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dde:	e7fe      	b.n	8002dde <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d103      	bne.n	8002dee <xQueueGenericSend+0x6a>
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <xQueueGenericSend+0x6e>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <xQueueGenericSend+0x70>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <xQueueGenericSend+0x88>
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	623b      	str	r3, [r7, #32]
 8002e0a:	e7fe      	b.n	8002e0a <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e0c:	f001 f918 	bl	8004040 <xTaskGetSchedulerState>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <xQueueGenericSend+0x98>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <xQueueGenericSend+0x9c>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <xQueueGenericSend+0x9e>
 8002e20:	2300      	movs	r3, #0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <xQueueGenericSend+0xb6>
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	e7fe      	b.n	8002e38 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002e3a:	f001 fe31 	bl	8004aa0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d302      	bcc.n	8002e50 <xQueueGenericSend+0xcc>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d129      	bne.n	8002ea4 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e56:	f000 fa11 	bl	800327c <prvCopyDataToQueue>
 8002e5a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d010      	beq.n	8002e86 <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	3324      	adds	r3, #36	; 0x24
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 ff51 	bl	8003d10 <xTaskRemoveFromEventList>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d013      	beq.n	8002e9c <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002e74:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <xQueueGenericSend+0x1f0>)
 8002e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	e00a      	b.n	8002e9c <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002e8c:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <xQueueGenericSend+0x1f0>)
 8002e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002e9c:	f001 fe2e 	bl	8004afc <vPortExitCritical>
                return pdPASS;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e063      	b.n	8002f6c <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002eaa:	f001 fe27 	bl	8004afc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e05c      	b.n	8002f6c <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 ff89 	bl	8003dd4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ec6:	f001 fe19 	bl	8004afc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002eca:	f000 fd07 	bl	80038dc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ece:	f001 fde7 	bl	8004aa0 <vPortEnterCritical>
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ed8:	b25b      	sxtb	r3, r3
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ede:	d103      	bne.n	8002ee8 <xQueueGenericSend+0x164>
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eee:	b25b      	sxtb	r3, r3
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef4:	d103      	bne.n	8002efe <xQueueGenericSend+0x17a>
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002efe:	f001 fdfd 	bl	8004afc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f02:	1d3a      	adds	r2, r7, #4
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 ff78 	bl	8003e00 <xTaskCheckForTimeOut>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d124      	bne.n	8002f60 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f18:	f000 faa8 	bl	800346c <prvIsQueueFull>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d018      	beq.n	8002f54 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	3310      	adds	r3, #16
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fea2 	bl	8003c74 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f32:	f000 fa33 	bl	800339c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002f36:	f000 fcdf 	bl	80038f8 <xTaskResumeAll>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f47f af7c 	bne.w	8002e3a <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <xQueueGenericSend+0x1f0>)
 8002f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	e772      	b.n	8002e3a <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f56:	f000 fa21 	bl	800339c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f5a:	f000 fccd 	bl	80038f8 <xTaskResumeAll>
 8002f5e:	e76c      	b.n	8002e3a <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f62:	f000 fa1b 	bl	800339c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002f66:	f000 fcc7 	bl	80038f8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002f6a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3738      	adds	r7, #56	; 0x38
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	e000ed04 	.word	0xe000ed04

08002f78 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b090      	sub	sp, #64	; 0x40
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <xQueueGenericSendFromISR+0x2c>
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa2:	e7fe      	b.n	8002fa2 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <xQueueGenericSendFromISR+0x3a>
 8002faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <xQueueGenericSendFromISR+0x3e>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <xQueueGenericSendFromISR+0x40>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <xQueueGenericSendFromISR+0x58>
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fce:	e7fe      	b.n	8002fce <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d103      	bne.n	8002fde <xQueueGenericSendFromISR+0x66>
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <xQueueGenericSendFromISR+0x6a>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <xQueueGenericSendFromISR+0x6c>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d109      	bne.n	8002ffc <xQueueGenericSendFromISR+0x84>
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	623b      	str	r3, [r7, #32]
 8002ffa:	e7fe      	b.n	8002ffa <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ffc:	f001 fe2c 	bl	8004c58 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003000:	f3ef 8211 	mrs	r2, BASEPRI
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	61fa      	str	r2, [r7, #28]
 8003016:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003018:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800301a:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	429a      	cmp	r2, r3
 8003026:	d302      	bcc.n	800302e <xQueueGenericSendFromISR+0xb6>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d13d      	bne.n	80030aa <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003034:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003044:	f000 f91a 	bl	800327c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003048:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003050:	d112      	bne.n	8003078 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d024      	beq.n	80030a4 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	3324      	adds	r3, #36	; 0x24
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fe56 	bl	8003d10 <xTaskRemoveFromEventList>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d01c      	beq.n	80030a4 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d019      	beq.n	80030a4 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e015      	b.n	80030a4 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003078:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800307c:	2b7f      	cmp	r3, #127	; 0x7f
 800307e:	d109      	bne.n	8003094 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e7fe      	b.n	8003092 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003094:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003098:	3301      	adds	r3, #1
 800309a:	b2db      	uxtb	r3, r3
 800309c:	b25a      	sxtb	r2, r3
 800309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80030a4:	2301      	movs	r3, #1
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80030a8:	e001      	b.n	80030ae <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80030b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3740      	adds	r7, #64	; 0x40
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08c      	sub	sp, #48	; 0x30
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <xQueueReceive+0x2e>
        __asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	623b      	str	r3, [r7, #32]
 80030f0:	e7fe      	b.n	80030f0 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d103      	bne.n	8003100 <xQueueReceive+0x3c>
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <xQueueReceive+0x40>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <xQueueReceive+0x42>
 8003104:	2300      	movs	r3, #0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <xQueueReceive+0x5a>
 800310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	e7fe      	b.n	800311c <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800311e:	f000 ff8f 	bl	8004040 <xTaskGetSchedulerState>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <xQueueReceive+0x6a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <xQueueReceive+0x6e>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <xQueueReceive+0x70>
 8003132:	2300      	movs	r3, #0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <xQueueReceive+0x88>
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	e7fe      	b.n	800314a <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800314c:	f001 fca8 	bl	8004aa0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01f      	beq.n	800319c <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003160:	f000 f8f6 	bl	8003350 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	1e5a      	subs	r2, r3, #1
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00f      	beq.n	8003194 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	3310      	adds	r3, #16
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fdc9 	bl	8003d10 <xTaskRemoveFromEventList>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003184:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <xQueueReceive+0x1b4>)
 8003186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003194:	f001 fcb2 	bl	8004afc <vPortExitCritical>
                return pdPASS;
 8003198:	2301      	movs	r3, #1
 800319a:	e069      	b.n	8003270 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80031a2:	f001 fcab 	bl	8004afc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e062      	b.n	8003270 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d106      	bne.n	80031be <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80031b0:	f107 0310 	add.w	r3, r7, #16
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fe0d 	bl	8003dd4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80031ba:	2301      	movs	r3, #1
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80031be:	f001 fc9d 	bl	8004afc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80031c2:	f000 fb8b 	bl	80038dc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80031c6:	f001 fc6b 	bl	8004aa0 <vPortEnterCritical>
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031d0:	b25b      	sxtb	r3, r3
 80031d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031d6:	d103      	bne.n	80031e0 <xQueueReceive+0x11c>
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031e6:	b25b      	sxtb	r3, r3
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ec:	d103      	bne.n	80031f6 <xQueueReceive+0x132>
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031f6:	f001 fc81 	bl	8004afc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031fa:	1d3a      	adds	r2, r7, #4
 80031fc:	f107 0310 	add.w	r3, r7, #16
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fdfc 	bl	8003e00 <xTaskCheckForTimeOut>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d123      	bne.n	8003256 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800320e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003210:	f000 f916 	bl	8003440 <prvIsQueueEmpty>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d017      	beq.n	800324a <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	3324      	adds	r3, #36	; 0x24
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fd26 	bl	8003c74 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800322a:	f000 f8b7 	bl	800339c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800322e:	f000 fb63 	bl	80038f8 <xTaskResumeAll>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d189      	bne.n	800314c <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <xQueueReceive+0x1b4>)
 800323a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	e780      	b.n	800314c <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800324a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800324c:	f000 f8a6 	bl	800339c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003250:	f000 fb52 	bl	80038f8 <xTaskResumeAll>
 8003254:	e77a      	b.n	800314c <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003258:	f000 f8a0 	bl	800339c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800325c:	f000 fb4c 	bl	80038f8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003262:	f000 f8ed 	bl	8003440 <prvIsQueueEmpty>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	f43f af6f 	beq.w	800314c <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800326e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003270:	4618      	mov	r0, r3
 8003272:	3730      	adds	r7, #48	; 0x30
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10d      	bne.n	80032b6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d14d      	bne.n	800333e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fee8 	bl	800407c <xTaskPriorityDisinherit>
 80032ac:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	e043      	b.n	800333e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d119      	bne.n	80032f0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6858      	ldr	r0, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	461a      	mov	r2, r3
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	f001 ff0c 	bl	80050e4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	441a      	add	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d32b      	bcc.n	800333e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	e026      	b.n	800333e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68d8      	ldr	r0, [r3, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	461a      	mov	r2, r3
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	f001 fef2 	bl	80050e4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	425b      	negs	r3, r3
 800330a:	441a      	add	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d207      	bcs.n	800332c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	425b      	negs	r3, r3
 8003326:	441a      	add	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d105      	bne.n	800333e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	3b01      	subs	r3, #1
 800333c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003346:	697b      	ldr	r3, [r7, #20]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d018      	beq.n	8003394 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	441a      	add	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	429a      	cmp	r2, r3
 800337a:	d303      	bcc.n	8003384 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68d9      	ldr	r1, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	461a      	mov	r2, r3
 800338e:	6838      	ldr	r0, [r7, #0]
 8003390:	f001 fea8 	bl	80050e4 <memcpy>
    }
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80033a4:	f001 fb7c 	bl	8004aa0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80033b0:	e011      	b.n	80033d6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d012      	beq.n	80033e0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3324      	adds	r3, #36	; 0x24
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fca6 	bl	8003d10 <xTaskRemoveFromEventList>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80033ca:	f000 fd7d 	bl	8003ec8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80033d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	dce9      	bgt.n	80033b2 <prvUnlockQueue+0x16>
 80033de:	e000      	b.n	80033e2 <prvUnlockQueue+0x46>
                        break;
 80033e0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	22ff      	movs	r2, #255	; 0xff
 80033e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80033ea:	f001 fb87 	bl	8004afc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80033ee:	f001 fb57 	bl	8004aa0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033f8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80033fa:	e011      	b.n	8003420 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d012      	beq.n	800342a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3310      	adds	r3, #16
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fc81 	bl	8003d10 <xTaskRemoveFromEventList>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003414:	f000 fd58 	bl	8003ec8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003418:	7bbb      	ldrb	r3, [r7, #14]
 800341a:	3b01      	subs	r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003424:	2b00      	cmp	r3, #0
 8003426:	dce9      	bgt.n	80033fc <prvUnlockQueue+0x60>
 8003428:	e000      	b.n	800342c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800342a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	22ff      	movs	r2, #255	; 0xff
 8003430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003434:	f001 fb62 	bl	8004afc <vPortExitCritical>
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003448:	f001 fb2a 	bl	8004aa0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003454:	2301      	movs	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e001      	b.n	800345e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800345e:	f001 fb4d 	bl	8004afc <vPortExitCritical>

    return xReturn;
 8003462:	68fb      	ldr	r3, [r7, #12]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003474:	f001 fb14 	bl	8004aa0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	429a      	cmp	r2, r3
 8003482:	d102      	bne.n	800348a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003484:	2301      	movs	r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e001      	b.n	800348e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800348e:	f001 fb35 	bl	8004afc <vPortExitCritical>

    return xReturn;
 8003492:	68fb      	ldr	r3, [r7, #12]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e014      	b.n	80034d6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034ac:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <vQueueAddToRegistry+0x4c>)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10b      	bne.n	80034d0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034b8:	490b      	ldr	r1, [pc, #44]	; (80034e8 <vQueueAddToRegistry+0x4c>)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <vQueueAddToRegistry+0x4c>)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80034ce:	e005      	b.n	80034dc <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3301      	adds	r3, #1
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b07      	cmp	r3, #7
 80034da:	d9e7      	bls.n	80034ac <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	20012e18 	.word	0x20012e18

080034ec <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80034fc:	f001 fad0 	bl	8004aa0 <vPortEnterCritical>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003506:	b25b      	sxtb	r3, r3
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800350c:	d103      	bne.n	8003516 <vQueueWaitForMessageRestricted+0x2a>
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800351c:	b25b      	sxtb	r3, r3
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003522:	d103      	bne.n	800352c <vQueueWaitForMessageRestricted+0x40>
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800352c:	f001 fae6 	bl	8004afc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3324      	adds	r3, #36	; 0x24
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fbbb 	bl	8003cbc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff28 	bl	800339c <prvUnlockQueue>
    }
 800354c:	bf00      	nop
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003554:	b580      	push	{r7, lr}
 8003556:	b08c      	sub	sp, #48	; 0x30
 8003558:	af04      	add	r7, sp, #16
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4618      	mov	r0, r3
 800356a:	f001 fbb3 	bl	8004cd4 <pvPortMalloc>
 800356e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00e      	beq.n	8003594 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003576:	2058      	movs	r0, #88	; 0x58
 8003578:	f001 fbac 	bl	8004cd4 <pvPortMalloc>
 800357c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
 800358a:	e005      	b.n	8003598 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800358c:	6978      	ldr	r0, [r7, #20]
 800358e:	f001 fc69 	bl	8004e64 <vPortFree>
 8003592:	e001      	b.n	8003598 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d013      	beq.n	80035c6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	2300      	movs	r3, #0
 80035a2:	9303      	str	r3, [sp, #12]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	9302      	str	r3, [sp, #8]
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f80e 	bl	80035d6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80035ba:	69f8      	ldr	r0, [r7, #28]
 80035bc:	f000 f8a0 	bl	8003700 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80035c0:	2301      	movs	r3, #1
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	e002      	b.n	80035cc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035ca:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80035cc:	69bb      	ldr	r3, [r7, #24]
    }
 80035ce:	4618      	mov	r0, r3
 80035d0:	3720      	adds	r7, #32
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b088      	sub	sp, #32
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	461a      	mov	r2, r3
 80035ee:	21a5      	movs	r1, #165	; 0xa5
 80035f0:	f001 fd83 	bl	80050fa <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035fe:	3b01      	subs	r3, #1
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f023 0307 	bic.w	r3, r3, #7
 800360c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <prvInitialiseNewTask+0x56>
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e7fe      	b.n	800362a <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01f      	beq.n	8003672 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	e012      	b.n	800365e <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4413      	add	r3, r2
 800363e:	7819      	ldrb	r1, [r3, #0]
 8003640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	4413      	add	r3, r2
 8003646:	3334      	adds	r3, #52	; 0x34
 8003648:	460a      	mov	r2, r1
 800364a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	3301      	adds	r3, #1
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	2b09      	cmp	r3, #9
 8003662:	d9e9      	bls.n	8003638 <prvInitialiseNewTask+0x62>
 8003664:	e000      	b.n	8003668 <prvInitialiseNewTask+0x92>
            {
                break;
 8003666:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003670:	e003      	b.n	800367a <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	2b04      	cmp	r3, #4
 800367e:	d901      	bls.n	8003684 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003680:	2304      	movs	r3, #4
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800368e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	2200      	movs	r2, #0
 8003694:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	3304      	adds	r3, #4
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fa04 	bl	8002aa8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	3318      	adds	r3, #24
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff f9ff 	bl	8002aa8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	f1c3 0205 	rsb	r2, r3, #5
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036be:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	3350      	adds	r3, #80	; 0x50
 80036c4:	2204      	movs	r2, #4
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 fd16 	bl	80050fa <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	3354      	adds	r3, #84	; 0x54
 80036d2:	2201      	movs	r2, #1
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 fd0f 	bl	80050fa <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	68f9      	ldr	r1, [r7, #12]
 80036e0:	69b8      	ldr	r0, [r7, #24]
 80036e2:	f001 f8b7 	bl	8004854 <pxPortInitialiseStack>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036f8:	bf00      	nop
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003708:	f001 f9ca 	bl	8004aa0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800370c:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <prvAddNewTaskToReadyList+0xc0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <prvAddNewTaskToReadyList+0xc0>)
 8003714:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003716:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800371e:	4a29      	ldr	r2, [pc, #164]	; (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003724:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <prvAddNewTaskToReadyList+0xc0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d110      	bne.n	800374e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800372c:	f000 fbf0 	bl	8003f10 <prvInitialiseTaskLists>
 8003730:	e00d      	b.n	800374e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003732:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800373a:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	429a      	cmp	r2, r3
 8003746:	d802      	bhi.n	800374e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003748:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800374e:	4b1f      	ldr	r3, [pc, #124]	; (80037cc <prvAddNewTaskToReadyList+0xcc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <prvAddNewTaskToReadyList+0xcc>)
 8003756:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003758:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <prvAddNewTaskToReadyList+0xcc>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	2201      	movs	r2, #1
 8003766:	409a      	lsls	r2, r3
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <prvAddNewTaskToReadyList+0xd0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4313      	orrs	r3, r2
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <prvAddNewTaskToReadyList+0xd0>)
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <prvAddNewTaskToReadyList+0xd4>)
 8003780:	441a      	add	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3304      	adds	r3, #4
 8003786:	4619      	mov	r1, r3
 8003788:	4610      	mov	r0, r2
 800378a:	f7ff f99a 	bl	8002ac2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800378e:	f001 f9b5 	bl	8004afc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003792:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00e      	beq.n	80037b8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d207      	bcs.n	80037b8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <prvAddNewTaskToReadyList+0xd8>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000104 	.word	0x20000104
 80037c4:	2000002c 	.word	0x2000002c
 80037c8:	20000110 	.word	0x20000110
 80037cc:	20000120 	.word	0x20000120
 80037d0:	2000010c 	.word	0x2000010c
 80037d4:	20000030 	.word	0x20000030
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80037ee:	4b13      	ldr	r3, [pc, #76]	; (800383c <vTaskDelay+0x60>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <vTaskDelay+0x2e>
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	e7fe      	b.n	8003808 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 800380a:	f000 f867 	bl	80038dc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800380e:	2100      	movs	r1, #0
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fcab 	bl	800416c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003816:	f000 f86f 	bl	80038f8 <xTaskResumeAll>
 800381a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d107      	bne.n	8003832 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8003822:	4b07      	ldr	r3, [pc, #28]	; (8003840 <vTaskDelay+0x64>)
 8003824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	2000012c 	.word	0x2000012c
 8003840:	e000ed04 	.word	0xe000ed04

08003844 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800384a:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <vTaskStartScheduler+0x80>)
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	2300      	movs	r3, #0
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2300      	movs	r3, #0
 8003854:	2282      	movs	r2, #130	; 0x82
 8003856:	491c      	ldr	r1, [pc, #112]	; (80038c8 <vTaskStartScheduler+0x84>)
 8003858:	481c      	ldr	r0, [pc, #112]	; (80038cc <vTaskStartScheduler+0x88>)
 800385a:	f7ff fe7b 	bl	8003554 <xTaskCreate>
 800385e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d102      	bne.n	800386c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003866:	f000 fce7 	bl	8004238 <xTimerCreateTimerTask>
 800386a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d115      	bne.n	800389e <vTaskStartScheduler+0x5a>
 8003872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003884:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <vTaskStartScheduler+0x8c>)
 8003886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800388a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <vTaskStartScheduler+0x90>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <vTaskStartScheduler+0x94>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003898:	f001 f864 	bl	8004964 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 800389c:	e00d      	b.n	80038ba <vTaskStartScheduler+0x76>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a4:	d109      	bne.n	80038ba <vTaskStartScheduler+0x76>
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	e7fe      	b.n	80038b8 <vTaskStartScheduler+0x74>
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000128 	.word	0x20000128
 80038c8:	08005154 	.word	0x08005154
 80038cc:	08003ee1 	.word	0x08003ee1
 80038d0:	20000124 	.word	0x20000124
 80038d4:	20000110 	.word	0x20000110
 80038d8:	20000108 	.word	0x20000108

080038dc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <vTaskSuspendAll+0x18>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	4a03      	ldr	r2, [pc, #12]	; (80038f4 <vTaskSuspendAll+0x18>)
 80038e8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	2000012c 	.word	0x2000012c

080038f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003906:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <xTaskResumeAll+0x114>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <xTaskResumeAll+0x2a>
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	e7fe      	b.n	8003920 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003922:	f001 f8bd 	bl	8004aa0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003926:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <xTaskResumeAll+0x114>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3b01      	subs	r3, #1
 800392c:	4a37      	ldr	r2, [pc, #220]	; (8003a0c <xTaskResumeAll+0x114>)
 800392e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003930:	4b36      	ldr	r3, [pc, #216]	; (8003a0c <xTaskResumeAll+0x114>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d161      	bne.n	80039fc <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003938:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <xTaskResumeAll+0x118>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d05d      	beq.n	80039fc <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003940:	e02e      	b.n	80039a0 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003942:	4b34      	ldr	r3, [pc, #208]	; (8003a14 <xTaskResumeAll+0x11c>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3318      	adds	r3, #24
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff f914 	bl	8002b7c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3304      	adds	r3, #4
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff f90f 	bl	8002b7c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	2201      	movs	r2, #1
 8003964:	409a      	lsls	r2, r3
 8003966:	4b2c      	ldr	r3, [pc, #176]	; (8003a18 <xTaskResumeAll+0x120>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <xTaskResumeAll+0x120>)
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4a27      	ldr	r2, [pc, #156]	; (8003a1c <xTaskResumeAll+0x124>)
 800397e:	441a      	add	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3304      	adds	r3, #4
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f7ff f89b 	bl	8002ac2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003990:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <xTaskResumeAll+0x128>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 800399a:	4b22      	ldr	r3, [pc, #136]	; (8003a24 <xTaskResumeAll+0x12c>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039a0:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <xTaskResumeAll+0x11c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1cc      	bne.n	8003942 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80039ae:	f000 fb2b 	bl	8004008 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <xTaskResumeAll+0x130>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d010      	beq.n	80039e0 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80039be:	f000 f847 	bl	8003a50 <xTaskIncrementTick>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 80039c8:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <xTaskResumeAll+0x12c>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f1      	bne.n	80039be <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <xTaskResumeAll+0x130>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <xTaskResumeAll+0x12c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80039e8:	2301      	movs	r3, #1
 80039ea:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <xTaskResumeAll+0x134>)
 80039ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80039fc:	f001 f87e 	bl	8004afc <vPortExitCritical>

    return xAlreadyYielded;
 8003a00:	68bb      	ldr	r3, [r7, #8]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	2000012c 	.word	0x2000012c
 8003a10:	20000104 	.word	0x20000104
 8003a14:	200000c4 	.word	0x200000c4
 8003a18:	2000010c 	.word	0x2000010c
 8003a1c:	20000030 	.word	0x20000030
 8003a20:	2000002c 	.word	0x2000002c
 8003a24:	20000118 	.word	0x20000118
 8003a28:	20000114 	.word	0x20000114
 8003a2c:	e000ed04 	.word	0xe000ed04

08003a30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <xTaskGetTickCount+0x1c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003a3c:	687b      	ldr	r3, [r7, #4]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20000108 	.word	0x20000108

08003a50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a5a:	4b4e      	ldr	r3, [pc, #312]	; (8003b94 <xTaskIncrementTick+0x144>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f040 808d 	bne.w	8003b7e <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a64:	4b4c      	ldr	r3, [pc, #304]	; (8003b98 <xTaskIncrementTick+0x148>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003a6c:	4a4a      	ldr	r2, [pc, #296]	; (8003b98 <xTaskIncrementTick+0x148>)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11f      	bne.n	8003ab8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003a78:	4b48      	ldr	r3, [pc, #288]	; (8003b9c <xTaskIncrementTick+0x14c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <xTaskIncrementTick+0x46>
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	e7fe      	b.n	8003a94 <xTaskIncrementTick+0x44>
 8003a96:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <xTaskIncrementTick+0x14c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <xTaskIncrementTick+0x150>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a3e      	ldr	r2, [pc, #248]	; (8003b9c <xTaskIncrementTick+0x14c>)
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	4a3e      	ldr	r2, [pc, #248]	; (8003ba0 <xTaskIncrementTick+0x150>)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b3e      	ldr	r3, [pc, #248]	; (8003ba4 <xTaskIncrementTick+0x154>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	4a3c      	ldr	r2, [pc, #240]	; (8003ba4 <xTaskIncrementTick+0x154>)
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	f000 faa8 	bl	8004008 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003ab8:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <xTaskIncrementTick+0x158>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d348      	bcc.n	8003b54 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ac2:	4b36      	ldr	r3, [pc, #216]	; (8003b9c <xTaskIncrementTick+0x14c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d104      	bne.n	8003ad6 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003acc:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <xTaskIncrementTick+0x158>)
 8003ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ad2:	601a      	str	r2, [r3, #0]
                    break;
 8003ad4:	e03e      	b.n	8003b54 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad6:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <xTaskIncrementTick+0x14c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d203      	bcs.n	8003af6 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003aee:	4a2e      	ldr	r2, [pc, #184]	; (8003ba8 <xTaskIncrementTick+0x158>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003af4:	e02e      	b.n	8003b54 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	3304      	adds	r3, #4
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff f83e 	bl	8002b7c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	3318      	adds	r3, #24
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff f835 	bl	8002b7c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	2201      	movs	r2, #1
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	4b24      	ldr	r3, [pc, #144]	; (8003bac <xTaskIncrementTick+0x15c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	4a22      	ldr	r2, [pc, #136]	; (8003bac <xTaskIncrementTick+0x15c>)
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <xTaskIncrementTick+0x160>)
 8003b32:	441a      	add	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f7fe ffc1 	bl	8002ac2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <xTaskIncrementTick+0x164>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d3b9      	bcc.n	8003ac2 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b52:	e7b6      	b.n	8003ac2 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b54:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <xTaskIncrementTick+0x164>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5a:	4915      	ldr	r1, [pc, #84]	; (8003bb0 <xTaskIncrementTick+0x160>)
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d901      	bls.n	8003b70 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <xTaskIncrementTick+0x168>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	e004      	b.n	8003b88 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <xTaskIncrementTick+0x16c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3301      	adds	r3, #1
 8003b84:	4a0d      	ldr	r2, [pc, #52]	; (8003bbc <xTaskIncrementTick+0x16c>)
 8003b86:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003b88:	697b      	ldr	r3, [r7, #20]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	2000012c 	.word	0x2000012c
 8003b98:	20000108 	.word	0x20000108
 8003b9c:	200000bc 	.word	0x200000bc
 8003ba0:	200000c0 	.word	0x200000c0
 8003ba4:	2000011c 	.word	0x2000011c
 8003ba8:	20000124 	.word	0x20000124
 8003bac:	2000010c 	.word	0x2000010c
 8003bb0:	20000030 	.word	0x20000030
 8003bb4:	2000002c 	.word	0x2000002c
 8003bb8:	20000118 	.word	0x20000118
 8003bbc:	20000114 	.word	0x20000114

08003bc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bc6:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <vTaskSwitchContext+0xa0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003bce:	4b25      	ldr	r3, [pc, #148]	; (8003c64 <vTaskSwitchContext+0xa4>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003bd4:	e03e      	b.n	8003c54 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8003bd6:	4b23      	ldr	r3, [pc, #140]	; (8003c64 <vTaskSwitchContext+0xa4>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bdc:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <vTaskSwitchContext+0xa8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	fab3 f383 	clz	r3, r3
 8003be8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003bea:	7afb      	ldrb	r3, [r7, #11]
 8003bec:	f1c3 031f 	rsb	r3, r3, #31
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	491e      	ldr	r1, [pc, #120]	; (8003c6c <vTaskSwitchContext+0xac>)
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <vTaskSwitchContext+0x5a>
        __asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	607b      	str	r3, [r7, #4]
 8003c18:	e7fe      	b.n	8003c18 <vTaskSwitchContext+0x58>
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4a11      	ldr	r2, [pc, #68]	; (8003c6c <vTaskSwitchContext+0xac>)
 8003c26:	4413      	add	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	605a      	str	r2, [r3, #4]
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d104      	bne.n	8003c4a <vTaskSwitchContext+0x8a>
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <vTaskSwitchContext+0xb0>)
 8003c52:	6013      	str	r3, [r2, #0]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	2000012c 	.word	0x2000012c
 8003c64:	20000118 	.word	0x20000118
 8003c68:	2000010c 	.word	0x2000010c
 8003c6c:	20000030 	.word	0x20000030
 8003c70:	2000002c 	.word	0x2000002c

08003c74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <vTaskPlaceOnEventList+0x24>
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	e7fe      	b.n	8003c96 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c98:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <vTaskPlaceOnEventList+0x44>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3318      	adds	r3, #24
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7fe ff32 	bl	8002b0a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	6838      	ldr	r0, [r7, #0]
 8003caa:	f000 fa5f 	bl	800416c <prvAddCurrentTaskToDelayedList>
}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	2000002c 	.word	0x2000002c

08003cbc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <vTaskPlaceOnEventListRestricted+0x26>
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e7fe      	b.n	8003ce0 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <vTaskPlaceOnEventListRestricted+0x50>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3318      	adds	r3, #24
 8003ce8:	4619      	mov	r1, r3
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7fe fee9 	bl	8002ac2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cfa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	68b8      	ldr	r0, [r7, #8]
 8003d00:	f000 fa34 	bl	800416c <prvAddCurrentTaskToDelayedList>
    }
 8003d04:	bf00      	nop
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	2000002c 	.word	0x2000002c

08003d10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <xTaskRemoveFromEventList+0x2a>
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e7fe      	b.n	8003d38 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	3318      	adds	r3, #24
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe ff1c 	bl	8002b7c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d44:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <xTaskRemoveFromEventList+0xac>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d11c      	bne.n	8003d86 <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe ff13 	bl	8002b7c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <xTaskRemoveFromEventList+0xb0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <xTaskRemoveFromEventList+0xb0>)
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4a13      	ldr	r2, [pc, #76]	; (8003dc4 <xTaskRemoveFromEventList+0xb4>)
 8003d76:	441a      	add	r2, r3
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f7fe fe9f 	bl	8002ac2 <vListInsertEnd>
 8003d84:	e005      	b.n	8003d92 <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	3318      	adds	r3, #24
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	480e      	ldr	r0, [pc, #56]	; (8003dc8 <xTaskRemoveFromEventList+0xb8>)
 8003d8e:	f7fe fe98 	bl	8002ac2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <xTaskRemoveFromEventList+0xbc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d905      	bls.n	8003dac <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003da4:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <xTaskRemoveFromEventList+0xc0>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e001      	b.n	8003db0 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003db0:	697b      	ldr	r3, [r7, #20]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	2000012c 	.word	0x2000012c
 8003dc0:	2000010c 	.word	0x2000010c
 8003dc4:	20000030 	.word	0x20000030
 8003dc8:	200000c4 	.word	0x200000c4
 8003dcc:	2000002c 	.word	0x2000002c
 8003dd0:	20000118 	.word	0x20000118

08003dd4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <vTaskInternalSetTimeOutState+0x24>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <vTaskInternalSetTimeOutState+0x28>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	605a      	str	r2, [r3, #4]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	2000011c 	.word	0x2000011c
 8003dfc:	20000108 	.word	0x20000108

08003e00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <xTaskCheckForTimeOut+0x24>
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	e7fe      	b.n	8003e22 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <xTaskCheckForTimeOut+0x3e>
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	e7fe      	b.n	8003e3c <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8003e3e:	f000 fe2f 	bl	8004aa0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003e42:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <xTaskCheckForTimeOut+0xc0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e5a:	d102      	bne.n	8003e62 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	e026      	b.n	8003eb0 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <xTaskCheckForTimeOut+0xc4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d00a      	beq.n	8003e84 <xTaskCheckForTimeOut+0x84>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d305      	bcc.n	8003e84 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e015      	b.n	8003eb0 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d20b      	bcs.n	8003ea6 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	1ad2      	subs	r2, r2, r3
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ff9a 	bl	8003dd4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
 8003ea4:	e004      	b.n	8003eb0 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003eb0:	f000 fe24 	bl	8004afc <vPortExitCritical>

    return xReturn;
 8003eb4:	69fb      	ldr	r3, [r7, #28]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000108 	.word	0x20000108
 8003ec4:	2000011c 	.word	0x2000011c

08003ec8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ecc:	4b03      	ldr	r3, [pc, #12]	; (8003edc <vTaskMissedYield+0x14>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	20000118 	.word	0x20000118

08003ee0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ee8:	f000 f852 	bl	8003f90 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <prvIdleTask+0x28>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d9f9      	bls.n	8003ee8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <prvIdleTask+0x2c>)
 8003ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003f04:	e7f0      	b.n	8003ee8 <prvIdleTask+0x8>
 8003f06:	bf00      	nop
 8003f08:	20000030 	.word	0x20000030
 8003f0c:	e000ed04 	.word	0xe000ed04

08003f10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	e00c      	b.n	8003f36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <prvInitialiseTaskLists+0x60>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe fd9c 	bl	8002a68 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3301      	adds	r3, #1
 8003f34:	607b      	str	r3, [r7, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d9ef      	bls.n	8003f1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003f3c:	480d      	ldr	r0, [pc, #52]	; (8003f74 <prvInitialiseTaskLists+0x64>)
 8003f3e:	f7fe fd93 	bl	8002a68 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003f42:	480d      	ldr	r0, [pc, #52]	; (8003f78 <prvInitialiseTaskLists+0x68>)
 8003f44:	f7fe fd90 	bl	8002a68 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003f48:	480c      	ldr	r0, [pc, #48]	; (8003f7c <prvInitialiseTaskLists+0x6c>)
 8003f4a:	f7fe fd8d 	bl	8002a68 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003f4e:	480c      	ldr	r0, [pc, #48]	; (8003f80 <prvInitialiseTaskLists+0x70>)
 8003f50:	f7fe fd8a 	bl	8002a68 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003f54:	480b      	ldr	r0, [pc, #44]	; (8003f84 <prvInitialiseTaskLists+0x74>)
 8003f56:	f7fe fd87 	bl	8002a68 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <prvInitialiseTaskLists+0x78>)
 8003f5c:	4a05      	ldr	r2, [pc, #20]	; (8003f74 <prvInitialiseTaskLists+0x64>)
 8003f5e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f60:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <prvInitialiseTaskLists+0x7c>)
 8003f62:	4a05      	ldr	r2, [pc, #20]	; (8003f78 <prvInitialiseTaskLists+0x68>)
 8003f64:	601a      	str	r2, [r3, #0]
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000030 	.word	0x20000030
 8003f74:	20000094 	.word	0x20000094
 8003f78:	200000a8 	.word	0x200000a8
 8003f7c:	200000c4 	.word	0x200000c4
 8003f80:	200000d8 	.word	0x200000d8
 8003f84:	200000f0 	.word	0x200000f0
 8003f88:	200000bc 	.word	0x200000bc
 8003f8c:	200000c0 	.word	0x200000c0

08003f90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f96:	e019      	b.n	8003fcc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003f98:	f000 fd82 	bl	8004aa0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <prvCheckTasksWaitingTermination+0x4c>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe fde7 	bl	8002b7c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003fae:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <prvCheckTasksWaitingTermination+0x50>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <prvCheckTasksWaitingTermination+0x50>)
 8003fb6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <prvCheckTasksWaitingTermination+0x54>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <prvCheckTasksWaitingTermination+0x54>)
 8003fc0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003fc2:	f000 fd9b 	bl	8004afc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f80e 	bl	8003fe8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <prvCheckTasksWaitingTermination+0x54>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e1      	bne.n	8003f98 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	200000d8 	.word	0x200000d8
 8003fe0:	20000104 	.word	0x20000104
 8003fe4:	200000ec 	.word	0x200000ec

08003fe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 ff35 	bl	8004e64 <vPortFree>
                vPortFree( pxTCB );
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 ff32 	bl	8004e64 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <prvResetNextTaskUnblockTime+0x30>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d104      	bne.n	8004020 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004016:	4b09      	ldr	r3, [pc, #36]	; (800403c <prvResetNextTaskUnblockTime+0x34>)
 8004018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800401c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800401e:	e005      	b.n	800402c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <prvResetNextTaskUnblockTime+0x30>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a04      	ldr	r2, [pc, #16]	; (800403c <prvResetNextTaskUnblockTime+0x34>)
 800402a:	6013      	str	r3, [r2, #0]
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	200000bc 	.word	0x200000bc
 800403c:	20000124 	.word	0x20000124

08004040 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <xTaskGetSchedulerState+0x34>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800404e:	2301      	movs	r3, #1
 8004050:	607b      	str	r3, [r7, #4]
 8004052:	e008      	b.n	8004066 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004054:	4b08      	ldr	r3, [pc, #32]	; (8004078 <xTaskGetSchedulerState+0x38>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800405c:	2302      	movs	r3, #2
 800405e:	607b      	str	r3, [r7, #4]
 8004060:	e001      	b.n	8004066 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004062:	2300      	movs	r3, #0
 8004064:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004066:	687b      	ldr	r3, [r7, #4]
    }
 8004068:	4618      	mov	r0, r3
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	20000110 	.word	0x20000110
 8004078:	2000012c 	.word	0x2000012c

0800407c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d061      	beq.n	8004156 <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004092:	4b33      	ldr	r3, [pc, #204]	; (8004160 <xTaskPriorityDisinherit+0xe4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	429a      	cmp	r2, r3
 800409a:	d009      	beq.n	80040b0 <xTaskPriorityDisinherit+0x34>
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e7fe      	b.n	80040ae <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d109      	bne.n	80040cc <xTaskPriorityDisinherit+0x50>
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	e7fe      	b.n	80040ca <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d0:	1e5a      	subs	r2, r3, #1
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040de:	429a      	cmp	r2, r3
 80040e0:	d039      	beq.n	8004156 <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d135      	bne.n	8004156 <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	3304      	adds	r3, #4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe fd44 	bl	8002b7c <uxListRemove>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	2201      	movs	r2, #1
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43da      	mvns	r2, r3
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <xTaskPriorityDisinherit+0xe8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4013      	ands	r3, r2
 800410c:	4a15      	ldr	r2, [pc, #84]	; (8004164 <xTaskPriorityDisinherit+0xe8>)
 800410e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	f1c3 0205 	rsb	r2, r3, #5
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	2201      	movs	r2, #1
 800412a:	409a      	lsls	r2, r3
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <xTaskPriorityDisinherit+0xe8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4313      	orrs	r3, r2
 8004132:	4a0c      	ldr	r2, [pc, #48]	; (8004164 <xTaskPriorityDisinherit+0xe8>)
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4a09      	ldr	r2, [pc, #36]	; (8004168 <xTaskPriorityDisinherit+0xec>)
 8004144:	441a      	add	r2, r3
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	3304      	adds	r3, #4
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f7fe fcb8 	bl	8002ac2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004152:	2301      	movs	r3, #1
 8004154:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004156:	697b      	ldr	r3, [r7, #20]
    }
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	2000002c 	.word	0x2000002c
 8004164:	2000010c 	.word	0x2000010c
 8004168:	20000030 	.word	0x20000030

0800416c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004176:	4b29      	ldr	r3, [pc, #164]	; (800421c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800417c:	4b28      	ldr	r3, [pc, #160]	; (8004220 <prvAddCurrentTaskToDelayedList+0xb4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3304      	adds	r3, #4
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe fcfa 	bl	8002b7c <uxListRemove>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10b      	bne.n	80041a6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800418e:	4b24      	ldr	r3, [pc, #144]	; (8004220 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	2201      	movs	r2, #1
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43da      	mvns	r2, r3
 800419c:	4b21      	ldr	r3, [pc, #132]	; (8004224 <prvAddCurrentTaskToDelayedList+0xb8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4013      	ands	r3, r2
 80041a2:	4a20      	ldr	r2, [pc, #128]	; (8004224 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041a4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ac:	d10a      	bne.n	80041c4 <prvAddCurrentTaskToDelayedList+0x58>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041b4:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	481a      	ldr	r0, [pc, #104]	; (8004228 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041be:	f7fe fc80 	bl	8002ac2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80041c2:	e026      	b.n	8004212 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041cc:	4b14      	ldr	r3, [pc, #80]	; (8004220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d209      	bcs.n	80041f0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041dc:	4b13      	ldr	r3, [pc, #76]	; (800422c <prvAddCurrentTaskToDelayedList+0xc0>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f7fe fc8e 	bl	8002b0a <vListInsert>
}
 80041ee:	e010      	b.n	8004212 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f7fe fc84 	bl	8002b0a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004202:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	429a      	cmp	r2, r3
 800420a:	d202      	bcs.n	8004212 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800420c:	4a09      	ldr	r2, [pc, #36]	; (8004234 <prvAddCurrentTaskToDelayedList+0xc8>)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6013      	str	r3, [r2, #0]
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000108 	.word	0x20000108
 8004220:	2000002c 	.word	0x2000002c
 8004224:	2000010c 	.word	0x2000010c
 8004228:	200000f0 	.word	0x200000f0
 800422c:	200000c0 	.word	0x200000c0
 8004230:	200000bc 	.word	0x200000bc
 8004234:	20000124 	.word	0x20000124

08004238 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004242:	f000 fad1 	bl	80047e8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004246:	4b11      	ldr	r3, [pc, #68]	; (800428c <xTimerCreateTimerTask+0x54>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00b      	beq.n	8004266 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800424e:	4b10      	ldr	r3, [pc, #64]	; (8004290 <xTimerCreateTimerTask+0x58>)
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	2302      	movs	r3, #2
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	2300      	movs	r3, #0
 8004258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800425c:	490d      	ldr	r1, [pc, #52]	; (8004294 <xTimerCreateTimerTask+0x5c>)
 800425e:	480e      	ldr	r0, [pc, #56]	; (8004298 <xTimerCreateTimerTask+0x60>)
 8004260:	f7ff f978 	bl	8003554 <xTaskCreate>
 8004264:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <xTimerCreateTimerTask+0x48>
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	e7fe      	b.n	800427e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8004280:	687b      	ldr	r3, [r7, #4]
    }
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000160 	.word	0x20000160
 8004290:	20000164 	.word	0x20000164
 8004294:	0800515c 	.word	0x0800515c
 8004298:	080043cd 	.word	0x080043cd

0800429c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800429c:	b580      	push	{r7, lr}
 800429e:	b08a      	sub	sp, #40	; 0x28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <xTimerGenericCommand+0x2c>
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	623b      	str	r3, [r7, #32]
 80042c6:	e7fe      	b.n	80042c6 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <xTimerGenericCommand+0x94>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d02a      	beq.n	8004326 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b05      	cmp	r3, #5
 80042e0:	dc18      	bgt.n	8004314 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042e2:	f7ff fead 	bl	8004040 <xTaskGetSchedulerState>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d109      	bne.n	8004300 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <xTimerGenericCommand+0x94>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	f107 0114 	add.w	r1, r7, #20
 80042f4:	2300      	movs	r3, #0
 80042f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f8:	f7fe fd44 	bl	8002d84 <xQueueGenericSend>
 80042fc:	6278      	str	r0, [r7, #36]	; 0x24
 80042fe:	e012      	b.n	8004326 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <xTimerGenericCommand+0x94>)
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	f107 0114 	add.w	r1, r7, #20
 8004308:	2300      	movs	r3, #0
 800430a:	2200      	movs	r2, #0
 800430c:	f7fe fd3a 	bl	8002d84 <xQueueGenericSend>
 8004310:	6278      	str	r0, [r7, #36]	; 0x24
 8004312:	e008      	b.n	8004326 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <xTimerGenericCommand+0x94>)
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	f107 0114 	add.w	r1, r7, #20
 800431c:	2300      	movs	r3, #0
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	f7fe fe2a 	bl	8002f78 <xQueueGenericSendFromISR>
 8004324:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004328:	4618      	mov	r0, r3
 800432a:	3728      	adds	r7, #40	; 0x28
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000160 	.word	0x20000160

08004334 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800433e:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <prvProcessExpiredTimer+0x94>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3304      	adds	r3, #4
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe fc15 	bl	8002b7c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d021      	beq.n	80043a4 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	18d1      	adds	r1, r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	6978      	ldr	r0, [r7, #20]
 800436e:	f000 f8d1 	bl	8004514 <prvInsertTimerInActiveList>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01e      	beq.n	80043b6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004378:	2300      	movs	r3, #0
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	2300      	movs	r3, #0
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	2100      	movs	r1, #0
 8004382:	6978      	ldr	r0, [r7, #20]
 8004384:	f7ff ff8a 	bl	800429c <xTimerGenericCommand>
 8004388:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d112      	bne.n	80043b6 <prvProcessExpiredTimer+0x82>
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	e7fe      	b.n	80043a2 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	6978      	ldr	r0, [r7, #20]
 80043bc:	4798      	blx	r3
    }
 80043be:	bf00      	nop
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000158 	.word	0x20000158

080043cc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043d4:	f107 0308 	add.w	r3, r7, #8
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 f857 	bl	800448c <prvGetNextExpireTime>
 80043de:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4619      	mov	r1, r3
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f803 	bl	80043f0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80043ea:	f000 f8d5 	bl	8004598 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043ee:	e7f1      	b.n	80043d4 <prvTimerTask+0x8>

080043f0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80043fa:	f7ff fa6f 	bl	80038dc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043fe:	f107 0308 	add.w	r3, r7, #8
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f866 	bl	80044d4 <prvSampleTimeNow>
 8004408:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d130      	bne.n	8004472 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <prvProcessTimerOrBlockTask+0x3c>
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	429a      	cmp	r2, r3
 800441c:	d806      	bhi.n	800442c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800441e:	f7ff fa6b 	bl	80038f8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004422:	68f9      	ldr	r1, [r7, #12]
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff ff85 	bl	8004334 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800442a:	e024      	b.n	8004476 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004432:	4b13      	ldr	r3, [pc, #76]	; (8004480 <prvProcessTimerOrBlockTask+0x90>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <prvProcessTimerOrBlockTask+0x50>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <prvProcessTimerOrBlockTask+0x52>
 8004440:	2300      	movs	r3, #0
 8004442:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <prvProcessTimerOrBlockTask+0x94>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	4619      	mov	r1, r3
 8004452:	f7ff f84b 	bl	80034ec <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004456:	f7ff fa4f 	bl	80038f8 <xTaskResumeAll>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <prvProcessTimerOrBlockTask+0x98>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
    }
 8004470:	e001      	b.n	8004476 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004472:	f7ff fa41 	bl	80038f8 <xTaskResumeAll>
    }
 8004476:	bf00      	nop
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	2000015c 	.word	0x2000015c
 8004484:	20000160 	.word	0x20000160
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <prvGetNextExpireTime+0x44>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <prvGetNextExpireTime+0x16>
 800449e:	2201      	movs	r2, #1
 80044a0:	e000      	b.n	80044a4 <prvGetNextExpireTime+0x18>
 80044a2:	2200      	movs	r2, #0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d105      	bne.n	80044bc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044b0:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <prvGetNextExpireTime+0x44>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	e001      	b.n	80044c0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80044c0:	68fb      	ldr	r3, [r7, #12]
    }
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000158 	.word	0x20000158

080044d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80044dc:	f7ff faa8 	bl	8003a30 <xTaskGetTickCount>
 80044e0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <prvSampleTimeNow+0x3c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d205      	bcs.n	80044f8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80044ec:	f000 f918 	bl	8004720 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e002      	b.n	80044fe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80044fe:	4a04      	ldr	r2, [pc, #16]	; (8004510 <prvSampleTimeNow+0x3c>)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004504:	68fb      	ldr	r3, [r7, #12]
    }
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000168 	.word	0x20000168

08004514 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d812      	bhi.n	8004560 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	1ad2      	subs	r2, r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	429a      	cmp	r2, r3
 8004546:	d302      	bcc.n	800454e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004548:	2301      	movs	r3, #1
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	e01b      	b.n	8004586 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <prvInsertTimerInActiveList+0x7c>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3304      	adds	r3, #4
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f7fe fad6 	bl	8002b0a <vListInsert>
 800455e:	e012      	b.n	8004586 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d206      	bcs.n	8004576 <prvInsertTimerInActiveList+0x62>
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d302      	bcc.n	8004576 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004570:	2301      	movs	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e007      	b.n	8004586 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004576:	4b07      	ldr	r3, [pc, #28]	; (8004594 <prvInsertTimerInActiveList+0x80>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3304      	adds	r3, #4
 800457e:	4619      	mov	r1, r3
 8004580:	4610      	mov	r0, r2
 8004582:	f7fe fac2 	bl	8002b0a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004586:	697b      	ldr	r3, [r7, #20]
    }
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	2000015c 	.word	0x2000015c
 8004594:	20000158 	.word	0x20000158

08004598 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	; 0x30
 800459c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800459e:	e0ac      	b.n	80046fa <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f2c0 80a8 	blt.w	80046f8 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d004      	beq.n	80045be <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	3304      	adds	r3, #4
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fadf 	bl	8002b7c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045be:	1d3b      	adds	r3, r7, #4
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ff87 	bl	80044d4 <prvSampleTimeNow>
 80045c6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b09      	cmp	r3, #9
 80045cc:	f200 8095 	bhi.w	80046fa <prvProcessReceivedCommands+0x162>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <prvProcessReceivedCommands+0x40>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	08004601 	.word	0x08004601
 80045dc:	08004601 	.word	0x08004601
 80045e0:	08004601 	.word	0x08004601
 80045e4:	08004673 	.word	0x08004673
 80045e8:	08004687 	.word	0x08004687
 80045ec:	080046cf 	.word	0x080046cf
 80045f0:	08004601 	.word	0x08004601
 80045f4:	08004601 	.word	0x08004601
 80045f8:	08004673 	.word	0x08004673
 80045fc:	08004687 	.word	0x08004687
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	b2da      	uxtb	r2, r3
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	18d1      	adds	r1, r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a3a      	ldr	r2, [r7, #32]
 800461e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004620:	f7ff ff78 	bl	8004514 <prvInsertTimerInActiveList>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d067      	beq.n	80046fa <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004630:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05c      	beq.n	80046fa <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	441a      	add	r2, r3
 8004648:	2300      	movs	r3, #0
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	2300      	movs	r3, #0
 800464e:	2100      	movs	r1, #0
 8004650:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004652:	f7ff fe23 	bl	800429c <xTimerGenericCommand>
 8004656:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d14d      	bne.n	80046fa <prvProcessReceivedCommands+0x162>
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	e7fe      	b.n	8004670 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	b2da      	uxtb	r2, r3
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004684:	e039      	b.n	80046fa <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	b2da      	uxtb	r2, r3
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <prvProcessReceivedCommands+0x122>
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	e7fe      	b.n	80046b8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	18d1      	adds	r1, r2, r3
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046c8:	f7ff ff24 	bl	8004514 <prvInsertTimerInActiveList>
                        break;
 80046cc:	e015      	b.n	80046fa <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 80046dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046de:	f000 fbc1 	bl	8004e64 <vPortFree>
 80046e2:	e00a      	b.n	80046fa <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80046f6:	e000      	b.n	80046fa <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80046f8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046fa:	4b08      	ldr	r3, [pc, #32]	; (800471c <prvProcessReceivedCommands+0x184>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f107 0108 	add.w	r1, r7, #8
 8004702:	2200      	movs	r2, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f7fe fcdd 	bl	80030c4 <xQueueReceive>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	f47f af47 	bne.w	80045a0 <prvProcessReceivedCommands+0x8>
        }
    }
 8004712:	bf00      	nop
 8004714:	3728      	adds	r7, #40	; 0x28
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000160 	.word	0x20000160

08004720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004726:	e047      	b.n	80047b8 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004728:	4b2d      	ldr	r3, [pc, #180]	; (80047e0 <prvSwitchTimerLists+0xc0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004732:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <prvSwitchTimerLists+0xc0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3304      	adds	r3, #4
 8004740:	4618      	mov	r0, r3
 8004742:	f7fe fa1b 	bl	8002b7c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d02d      	beq.n	80047b8 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	429a      	cmp	r2, r3
 800476c:	d90e      	bls.n	800478c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800477a:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <prvSwitchTimerLists+0xc0>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fe f9c0 	bl	8002b0a <vListInsert>
 800478a:	e015      	b.n	80047b8 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800478c:	2300      	movs	r3, #0
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	2300      	movs	r3, #0
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	2100      	movs	r1, #0
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f7ff fd80 	bl	800429c <xTimerGenericCommand>
 800479c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <prvSwitchTimerLists+0x98>
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	e7fe      	b.n	80047b6 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047b8:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <prvSwitchTimerLists+0xc0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1b2      	bne.n	8004728 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80047c2:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <prvSwitchTimerLists+0xc0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <prvSwitchTimerLists+0xc4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a04      	ldr	r2, [pc, #16]	; (80047e0 <prvSwitchTimerLists+0xc0>)
 80047ce:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80047d0:	4a04      	ldr	r2, [pc, #16]	; (80047e4 <prvSwitchTimerLists+0xc4>)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	6013      	str	r3, [r2, #0]
    }
 80047d6:	bf00      	nop
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000158 	.word	0x20000158
 80047e4:	2000015c 	.word	0x2000015c

080047e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80047ec:	f000 f958 	bl	8004aa0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80047f0:	4b12      	ldr	r3, [pc, #72]	; (800483c <prvCheckForValidListAndQueue+0x54>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11d      	bne.n	8004834 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80047f8:	4811      	ldr	r0, [pc, #68]	; (8004840 <prvCheckForValidListAndQueue+0x58>)
 80047fa:	f7fe f935 	bl	8002a68 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80047fe:	4811      	ldr	r0, [pc, #68]	; (8004844 <prvCheckForValidListAndQueue+0x5c>)
 8004800:	f7fe f932 	bl	8002a68 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004804:	4b10      	ldr	r3, [pc, #64]	; (8004848 <prvCheckForValidListAndQueue+0x60>)
 8004806:	4a0e      	ldr	r2, [pc, #56]	; (8004840 <prvCheckForValidListAndQueue+0x58>)
 8004808:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800480a:	4b10      	ldr	r3, [pc, #64]	; (800484c <prvCheckForValidListAndQueue+0x64>)
 800480c:	4a0d      	ldr	r2, [pc, #52]	; (8004844 <prvCheckForValidListAndQueue+0x5c>)
 800480e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004810:	2200      	movs	r2, #0
 8004812:	210c      	movs	r1, #12
 8004814:	200a      	movs	r0, #10
 8004816:	f7fe fa43 	bl	8002ca0 <xQueueGenericCreate>
 800481a:	4602      	mov	r2, r0
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <prvCheckForValidListAndQueue+0x54>)
 800481e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004820:	4b06      	ldr	r3, [pc, #24]	; (800483c <prvCheckForValidListAndQueue+0x54>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <prvCheckForValidListAndQueue+0x54>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4908      	ldr	r1, [pc, #32]	; (8004850 <prvCheckForValidListAndQueue+0x68>)
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fe34 	bl	800349c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004834:	f000 f962 	bl	8004afc <vPortExitCritical>
    }
 8004838:	bf00      	nop
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20000160 	.word	0x20000160
 8004840:	20000130 	.word	0x20000130
 8004844:	20000144 	.word	0x20000144
 8004848:	20000158 	.word	0x20000158
 800484c:	2000015c 	.word	0x2000015c
 8004850:	08005164 	.word	0x08005164

08004854 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3b04      	subs	r3, #4
 8004864:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800486c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3b04      	subs	r3, #4
 8004872:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f023 0201 	bic.w	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3b04      	subs	r3, #4
 8004882:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004884:	4a0c      	ldr	r2, [pc, #48]	; (80048b8 <pxPortInitialiseStack+0x64>)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3b14      	subs	r3, #20
 800488e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3b04      	subs	r3, #4
 800489a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f06f 0202 	mvn.w	r2, #2
 80048a2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3b20      	subs	r3, #32
 80048a8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	080048bd 	.word	0x080048bd

080048bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80048c6:	4b11      	ldr	r3, [pc, #68]	; (800490c <prvTaskExitError+0x50>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ce:	d009      	beq.n	80048e4 <prvTaskExitError+0x28>
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	e7fe      	b.n	80048e2 <prvTaskExitError+0x26>
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80048f6:	bf00      	nop
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0fc      	beq.n	80048f8 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	2000000c 	.word	0x2000000c

08004910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004910:	4b07      	ldr	r3, [pc, #28]	; (8004930 <pxCurrentTCBConst2>)
 8004912:	6819      	ldr	r1, [r3, #0]
 8004914:	6808      	ldr	r0, [r1, #0]
 8004916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491a:	f380 8809 	msr	PSP, r0
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f04f 0000 	mov.w	r0, #0
 8004926:	f380 8811 	msr	BASEPRI, r0
 800492a:	4770      	bx	lr
 800492c:	f3af 8000 	nop.w

08004930 <pxCurrentTCBConst2>:
 8004930:	2000002c 	.word	0x2000002c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop

08004938 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004938:	4808      	ldr	r0, [pc, #32]	; (800495c <prvPortStartFirstTask+0x24>)
 800493a:	6800      	ldr	r0, [r0, #0]
 800493c:	6800      	ldr	r0, [r0, #0]
 800493e:	f380 8808 	msr	MSP, r0
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f380 8814 	msr	CONTROL, r0
 800494a:	b662      	cpsie	i
 800494c:	b661      	cpsie	f
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	df00      	svc	0
 8004958:	bf00      	nop
 800495a:	0000      	.short	0x0000
 800495c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop

08004964 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800496a:	4b44      	ldr	r3, [pc, #272]	; (8004a7c <xPortStartScheduler+0x118>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a44      	ldr	r2, [pc, #272]	; (8004a80 <xPortStartScheduler+0x11c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d109      	bne.n	8004988 <xPortStartScheduler+0x24>
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	e7fe      	b.n	8004986 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004988:	4b3c      	ldr	r3, [pc, #240]	; (8004a7c <xPortStartScheduler+0x118>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a3d      	ldr	r2, [pc, #244]	; (8004a84 <xPortStartScheduler+0x120>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d109      	bne.n	80049a6 <xPortStartScheduler+0x42>
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e7fe      	b.n	80049a4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049a6:	4b38      	ldr	r3, [pc, #224]	; (8004a88 <xPortStartScheduler+0x124>)
 80049a8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	22ff      	movs	r2, #255	; 0xff
 80049b6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	4b30      	ldr	r3, [pc, #192]	; (8004a8c <xPortStartScheduler+0x128>)
 80049cc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049ce:	4b30      	ldr	r3, [pc, #192]	; (8004a90 <xPortStartScheduler+0x12c>)
 80049d0:	2207      	movs	r2, #7
 80049d2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049d4:	e009      	b.n	80049ea <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80049d6:	4b2e      	ldr	r3, [pc, #184]	; (8004a90 <xPortStartScheduler+0x12c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3b01      	subs	r3, #1
 80049dc:	4a2c      	ldr	r2, [pc, #176]	; (8004a90 <xPortStartScheduler+0x12c>)
 80049de:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049ea:	78fb      	ldrb	r3, [r7, #3]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f2:	2b80      	cmp	r3, #128	; 0x80
 80049f4:	d0ef      	beq.n	80049d6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049f6:	4b26      	ldr	r3, [pc, #152]	; (8004a90 <xPortStartScheduler+0x12c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f1c3 0307 	rsb	r3, r3, #7
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d009      	beq.n	8004a16 <xPortStartScheduler+0xb2>
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	e7fe      	b.n	8004a14 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a16:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <xPortStartScheduler+0x12c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	4a1c      	ldr	r2, [pc, #112]	; (8004a90 <xPortStartScheduler+0x12c>)
 8004a1e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a20:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <xPortStartScheduler+0x12c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a28:	4a19      	ldr	r2, [pc, #100]	; (8004a90 <xPortStartScheduler+0x12c>)
 8004a2a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004a34:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <xPortStartScheduler+0x130>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <xPortStartScheduler+0x130>)
 8004a3a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a3e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <xPortStartScheduler+0x130>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <xPortStartScheduler+0x130>)
 8004a46:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a4a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004a4c:	f000 f8d4 	bl	8004bf8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <xPortStartScheduler+0x134>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004a56:	f000 f8f3 	bl	8004c40 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <xPortStartScheduler+0x138>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <xPortStartScheduler+0x138>)
 8004a60:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a64:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004a66:	f7ff ff67 	bl	8004938 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004a6a:	f7ff f8a9 	bl	8003bc0 <vTaskSwitchContext>
    prvTaskExitError();
 8004a6e:	f7ff ff25 	bl	80048bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	e000ed00 	.word	0xe000ed00
 8004a80:	410fc271 	.word	0x410fc271
 8004a84:	410fc270 	.word	0x410fc270
 8004a88:	e000e400 	.word	0xe000e400
 8004a8c:	2000016c 	.word	0x2000016c
 8004a90:	20000170 	.word	0x20000170
 8004a94:	e000ed20 	.word	0xe000ed20
 8004a98:	2000000c 	.word	0x2000000c
 8004a9c:	e000ef34 	.word	0xe000ef34

08004aa0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004ab8:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <vPortEnterCritical+0x54>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3301      	adds	r3, #1
 8004abe:	4a0d      	ldr	r2, [pc, #52]	; (8004af4 <vPortEnterCritical+0x54>)
 8004ac0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004ac2:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <vPortEnterCritical+0x54>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10e      	bne.n	8004ae8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <vPortEnterCritical+0x58>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d009      	beq.n	8004ae8 <vPortEnterCritical+0x48>
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	e7fe      	b.n	8004ae6 <vPortEnterCritical+0x46>
    }
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	2000000c 	.word	0x2000000c
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004b02:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <vPortExitCritical+0x4c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <vPortExitCritical+0x22>
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	607b      	str	r3, [r7, #4]
 8004b1c:	e7fe      	b.n	8004b1c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <vPortExitCritical+0x4c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <vPortExitCritical+0x4c>)
 8004b26:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004b28:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <vPortExitCritical+0x4c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d104      	bne.n	8004b3a <vPortExitCritical+0x3e>
 8004b30:	2300      	movs	r3, #0
 8004b32:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	2000000c 	.word	0x2000000c
 8004b4c:	00000000 	.word	0x00000000

08004b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004b50:	f3ef 8009 	mrs	r0, PSP
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	4b15      	ldr	r3, [pc, #84]	; (8004bb0 <pxCurrentTCBConst>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	f01e 0f10 	tst.w	lr, #16
 8004b60:	bf08      	it	eq
 8004b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6a:	6010      	str	r0, [r2, #0]
 8004b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b74:	f380 8811 	msr	BASEPRI, r0
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f7ff f81e 	bl	8003bc0 <vTaskSwitchContext>
 8004b84:	f04f 0000 	mov.w	r0, #0
 8004b88:	f380 8811 	msr	BASEPRI, r0
 8004b8c:	bc09      	pop	{r0, r3}
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	6808      	ldr	r0, [r1, #0]
 8004b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b96:	f01e 0f10 	tst.w	lr, #16
 8004b9a:	bf08      	it	eq
 8004b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ba0:	f380 8809 	msr	PSP, r0
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	f3af 8000 	nop.w

08004bb0 <pxCurrentTCBConst>:
 8004bb0:	2000002c 	.word	0x2000002c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop

08004bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
        __asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004bd0:	f7fe ff3e 	bl	8003a50 <xTaskIncrementTick>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <SysTick_Handler+0x3c>)
 8004bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	2300      	movs	r3, #0
 8004be4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	e000ed04 	.word	0xe000ed04

08004bf8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <vPortSetupTimerInterrupt+0x34>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c02:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <vPortSetupTimerInterrupt+0x38>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <vPortSetupTimerInterrupt+0x3c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <vPortSetupTimerInterrupt+0x40>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <vPortSetupTimerInterrupt+0x44>)
 8004c16:	3b01      	subs	r3, #1
 8004c18:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c1a:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <vPortSetupTimerInterrupt+0x34>)
 8004c1c:	2207      	movs	r2, #7
 8004c1e:	601a      	str	r2, [r3, #0]
}
 8004c20:	bf00      	nop
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	e000e010 	.word	0xe000e010
 8004c30:	e000e018 	.word	0xe000e018
 8004c34:	20000000 	.word	0x20000000
 8004c38:	10624dd3 	.word	0x10624dd3
 8004c3c:	e000e014 	.word	0xe000e014

08004c40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004c40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c50 <vPortEnableVFP+0x10>
 8004c44:	6801      	ldr	r1, [r0, #0]
 8004c46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c4a:	6001      	str	r1, [r0, #0]
 8004c4c:	4770      	bx	lr
 8004c4e:	0000      	.short	0x0000
 8004c50:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop

08004c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004c5e:	f3ef 8305 	mrs	r3, IPSR
 8004c62:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	d913      	bls.n	8004c92 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c6a:	4a16      	ldr	r2, [pc, #88]	; (8004cc4 <vPortValidateInterruptPriority+0x6c>)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c74:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <vPortValidateInterruptPriority+0x70>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	7afa      	ldrb	r2, [r7, #11]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d209      	bcs.n	8004c92 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	e7fe      	b.n	8004c90 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c92:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <vPortValidateInterruptPriority+0x74>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c9a:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <vPortValidateInterruptPriority+0x78>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d909      	bls.n	8004cb6 <vPortValidateInterruptPriority+0x5e>
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	e7fe      	b.n	8004cb4 <vPortValidateInterruptPriority+0x5c>
    }
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	e000e3f0 	.word	0xe000e3f0
 8004cc8:	2000016c 	.word	0x2000016c
 8004ccc:	e000ed0c 	.word	0xe000ed0c
 8004cd0:	20000170 	.word	0x20000170

08004cd4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	; 0x28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004ce0:	f7fe fdfc 	bl	80038dc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004ce4:	4b59      	ldr	r3, [pc, #356]	; (8004e4c <pvPortMalloc+0x178>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004cec:	f000 f91a 	bl	8004f24 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cf0:	4b57      	ldr	r3, [pc, #348]	; (8004e50 <pvPortMalloc+0x17c>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f040 8091 	bne.w	8004e20 <pvPortMalloc+0x14c>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01c      	beq.n	8004d3e <pvPortMalloc+0x6a>
            {
                xWantedSize += xHeapStructSize;
 8004d04:	2208      	movs	r2, #8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d013      	beq.n	8004d3e <pvPortMalloc+0x6a>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f023 0307 	bic.w	r3, r3, #7
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <pvPortMalloc+0x6a>
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e7fe      	b.n	8004d3c <pvPortMalloc+0x68>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d06d      	beq.n	8004e20 <pvPortMalloc+0x14c>
 8004d44:	4b43      	ldr	r3, [pc, #268]	; (8004e54 <pvPortMalloc+0x180>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d868      	bhi.n	8004e20 <pvPortMalloc+0x14c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004d4e:	4b42      	ldr	r3, [pc, #264]	; (8004e58 <pvPortMalloc+0x184>)
 8004d50:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004d52:	4b41      	ldr	r3, [pc, #260]	; (8004e58 <pvPortMalloc+0x184>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d58:	e004      	b.n	8004d64 <pvPortMalloc+0x90>
                {
                    pxPreviousBlock = pxBlock;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d903      	bls.n	8004d76 <pvPortMalloc+0xa2>
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f1      	bne.n	8004d5a <pvPortMalloc+0x86>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8004d76:	4b35      	ldr	r3, [pc, #212]	; (8004e4c <pvPortMalloc+0x178>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d04f      	beq.n	8004e20 <pvPortMalloc+0x14c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2208      	movs	r2, #8
 8004d86:	4413      	add	r3, r2
 8004d88:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	1ad2      	subs	r2, r2, r3
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d91e      	bls.n	8004de0 <pvPortMalloc+0x10c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4413      	add	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d009      	beq.n	8004dc8 <pvPortMalloc+0xf4>
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	e7fe      	b.n	8004dc6 <pvPortMalloc+0xf2>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dda:	69b8      	ldr	r0, [r7, #24]
 8004ddc:	f000 f904 	bl	8004fe8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004de0:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <pvPortMalloc+0x180>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	4a1a      	ldr	r2, [pc, #104]	; (8004e54 <pvPortMalloc+0x180>)
 8004dec:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dee:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <pvPortMalloc+0x180>)
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <pvPortMalloc+0x188>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d203      	bcs.n	8004e02 <pvPortMalloc+0x12e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dfa:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <pvPortMalloc+0x180>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a17      	ldr	r2, [pc, #92]	; (8004e5c <pvPortMalloc+0x188>)
 8004e00:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <pvPortMalloc+0x17c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004e16:	4b12      	ldr	r3, [pc, #72]	; (8004e60 <pvPortMalloc+0x18c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <pvPortMalloc+0x18c>)
 8004e1e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004e20:	f7fe fd6a 	bl	80038f8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <pvPortMalloc+0x16e>
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e7fe      	b.n	8004e40 <pvPortMalloc+0x16c>
    return pvReturn;
 8004e42:	69fb      	ldr	r3, [r7, #28]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3728      	adds	r7, #40	; 0x28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20012d7c 	.word	0x20012d7c
 8004e50:	20012d90 	.word	0x20012d90
 8004e54:	20012d80 	.word	0x20012d80
 8004e58:	20012d74 	.word	0x20012d74
 8004e5c:	20012d84 	.word	0x20012d84
 8004e60:	20012d88 	.word	0x20012d88

08004e64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d04b      	beq.n	8004f0e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004e76:	2308      	movs	r3, #8
 8004e78:	425b      	negs	r3, r3
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	4b23      	ldr	r3, [pc, #140]	; (8004f18 <vPortFree+0xb4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <vPortFree+0x42>
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e7fe      	b.n	8004ea4 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <vPortFree+0x5e>
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	e7fe      	b.n	8004ec0 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <vPortFree+0xb4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01e      	beq.n	8004f0e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d11a      	bne.n	8004f0e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	4b0e      	ldr	r3, [pc, #56]	; (8004f18 <vPortFree+0xb4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004ee8:	f7fe fcf8 	bl	80038dc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <vPortFree+0xb8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	4a09      	ldr	r2, [pc, #36]	; (8004f1c <vPortFree+0xb8>)
 8004ef8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004efa:	6938      	ldr	r0, [r7, #16]
 8004efc:	f000 f874 	bl	8004fe8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004f00:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <vPortFree+0xbc>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3301      	adds	r3, #1
 8004f06:	4a06      	ldr	r2, [pc, #24]	; (8004f20 <vPortFree+0xbc>)
 8004f08:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004f0a:	f7fe fcf5 	bl	80038f8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004f0e:	bf00      	nop
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20012d90 	.word	0x20012d90
 8004f1c:	20012d80 	.word	0x20012d80
 8004f20:	20012d8c 	.word	0x20012d8c

08004f24 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f2a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004f2e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004f30:	4b27      	ldr	r3, [pc, #156]	; (8004fd0 <prvHeapInit+0xac>)
 8004f32:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00c      	beq.n	8004f58 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3307      	adds	r3, #7
 8004f42:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0307 	bic.w	r3, r3, #7
 8004f4a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	4a1f      	ldr	r2, [pc, #124]	; (8004fd0 <prvHeapInit+0xac>)
 8004f54:	4413      	add	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f5c:	4a1d      	ldr	r2, [pc, #116]	; (8004fd4 <prvHeapInit+0xb0>)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004f62:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <prvHeapInit+0xb0>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004f70:	2208      	movs	r2, #8
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0307 	bic.w	r3, r3, #7
 8004f7e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <prvHeapInit+0xb4>)
 8004f84:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004f86:	4b14      	ldr	r3, [pc, #80]	; (8004fd8 <prvHeapInit+0xb4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004f8e:	4b12      	ldr	r3, [pc, #72]	; (8004fd8 <prvHeapInit+0xb4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	1ad2      	subs	r2, r2, r3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <prvHeapInit+0xb4>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <prvHeapInit+0xb8>)
 8004fb2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <prvHeapInit+0xbc>)
 8004fba:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fbc:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <prvHeapInit+0xc0>)
 8004fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fc2:	601a      	str	r2, [r3, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	20000174 	.word	0x20000174
 8004fd4:	20012d74 	.word	0x20012d74
 8004fd8:	20012d7c 	.word	0x20012d7c
 8004fdc:	20012d84 	.word	0x20012d84
 8004fe0:	20012d80 	.word	0x20012d80
 8004fe4:	20012d90 	.word	0x20012d90

08004fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ff0:	4b28      	ldr	r3, [pc, #160]	; (8005094 <prvInsertBlockIntoFreeList+0xac>)
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e002      	b.n	8004ffc <prvInsertBlockIntoFreeList+0x14>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	429a      	cmp	r2, r3
 8005004:	d8f7      	bhi.n	8004ff6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	4413      	add	r3, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	429a      	cmp	r2, r3
 8005016:	d108      	bne.n	800502a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	441a      	add	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	441a      	add	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d118      	bne.n	8005070 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4b15      	ldr	r3, [pc, #84]	; (8005098 <prvInsertBlockIntoFreeList+0xb0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d00d      	beq.n	8005066 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	441a      	add	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	e008      	b.n	8005078 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <prvInsertBlockIntoFreeList+0xb0>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	e003      	b.n	8005078 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d002      	beq.n	8005086 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20012d74 	.word	0x20012d74
 8005098:	20012d7c 	.word	0x20012d7c

0800509c <__libc_init_array>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	4e0d      	ldr	r6, [pc, #52]	; (80050d4 <__libc_init_array+0x38>)
 80050a0:	4c0d      	ldr	r4, [pc, #52]	; (80050d8 <__libc_init_array+0x3c>)
 80050a2:	1ba4      	subs	r4, r4, r6
 80050a4:	10a4      	asrs	r4, r4, #2
 80050a6:	2500      	movs	r5, #0
 80050a8:	42a5      	cmp	r5, r4
 80050aa:	d109      	bne.n	80050c0 <__libc_init_array+0x24>
 80050ac:	4e0b      	ldr	r6, [pc, #44]	; (80050dc <__libc_init_array+0x40>)
 80050ae:	4c0c      	ldr	r4, [pc, #48]	; (80050e0 <__libc_init_array+0x44>)
 80050b0:	f000 f82c 	bl	800510c <_init>
 80050b4:	1ba4      	subs	r4, r4, r6
 80050b6:	10a4      	asrs	r4, r4, #2
 80050b8:	2500      	movs	r5, #0
 80050ba:	42a5      	cmp	r5, r4
 80050bc:	d105      	bne.n	80050ca <__libc_init_array+0x2e>
 80050be:	bd70      	pop	{r4, r5, r6, pc}
 80050c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050c4:	4798      	blx	r3
 80050c6:	3501      	adds	r5, #1
 80050c8:	e7ee      	b.n	80050a8 <__libc_init_array+0xc>
 80050ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050ce:	4798      	blx	r3
 80050d0:	3501      	adds	r5, #1
 80050d2:	e7f2      	b.n	80050ba <__libc_init_array+0x1e>
 80050d4:	0800518c 	.word	0x0800518c
 80050d8:	0800518c 	.word	0x0800518c
 80050dc:	0800518c 	.word	0x0800518c
 80050e0:	08005190 	.word	0x08005190

080050e4 <memcpy>:
 80050e4:	b510      	push	{r4, lr}
 80050e6:	1e43      	subs	r3, r0, #1
 80050e8:	440a      	add	r2, r1
 80050ea:	4291      	cmp	r1, r2
 80050ec:	d100      	bne.n	80050f0 <memcpy+0xc>
 80050ee:	bd10      	pop	{r4, pc}
 80050f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050f8:	e7f7      	b.n	80050ea <memcpy+0x6>

080050fa <memset>:
 80050fa:	4402      	add	r2, r0
 80050fc:	4603      	mov	r3, r0
 80050fe:	4293      	cmp	r3, r2
 8005100:	d100      	bne.n	8005104 <memset+0xa>
 8005102:	4770      	bx	lr
 8005104:	f803 1b01 	strb.w	r1, [r3], #1
 8005108:	e7f9      	b.n	80050fe <memset+0x4>
	...

0800510c <_init>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr

08005118 <_fini>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	bf00      	nop
 800511c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511e:	bc08      	pop	{r3}
 8005120:	469e      	mov	lr, r3
 8005122:	4770      	bx	lr
