
First_RTOS_Project_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c88  08002c88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c90  08002c90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c94  08002c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08002ca4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002ca4  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4ac  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002079  00000000  00000000  0002e4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  00030568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  000313a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021f9e  00000000  00000000  000320d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aba3  00000000  00000000  0005406e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5408  00000000  00000000  0005ec11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134019  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003afc  00000000  00000000  00134094  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002c50 	.word	0x08002c50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08002c50 	.word	0x08002c50

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fa61 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f819 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8af 	bl	8000680 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f883 	bl	800062c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

while(1)
  {    if (HAL_UART_Transmit(USART2, "nakul\n", 6, 100) != HAL_OK)
 8000526:	2364      	movs	r3, #100	; 0x64
 8000528:	2206      	movs	r2, #6
 800052a:	4907      	ldr	r1, [pc, #28]	; (8000548 <main+0x38>)
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <main+0x3c>)
 800052e:	f001 fd18 	bl	8001f62 <HAL_UART_Transmit>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <main+0x2c>
      {
        Error_Handler();
 8000538:	f000 f922 	bl	8000780 <Error_Handler>
      }
      HAL_Delay(1000);
 800053c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000540:	f000 fa8e 	bl	8000a60 <HAL_Delay>
  {    if (HAL_UART_Transmit(USART2, "nakul\n", 6, 100) != HAL_OK)
 8000544:	e7ef      	b.n	8000526 <main+0x16>
 8000546:	bf00      	nop
 8000548:	08002c68 	.word	0x08002c68
 800054c:	40004400 	.word	0x40004400

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2234      	movs	r2, #52	; 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f002 fb6e 	bl	8002c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <SystemClock_Config+0xd4>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a29      	ldr	r2, [pc, #164]	; (8000624 <SystemClock_Config+0xd4>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <SystemClock_Config+0xd4>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000590:	2300      	movs	r3, #0
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <SystemClock_Config+0xd8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800059c:	4a22      	ldr	r2, [pc, #136]	; (8000628 <SystemClock_Config+0xd8>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <SystemClock_Config+0xd8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2310      	movs	r3, #16
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005c4:	2310      	movs	r3, #16
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ce:	2304      	movs	r3, #4
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 ffda 	bl	8001598 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ea:	f000 f8c9 	bl	8000780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	2102      	movs	r1, #2
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fcd8 	bl	8000fc0 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000616:	f000 f8b3 	bl	8000780 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <MX_USART2_UART_Init+0x50>)
 8000634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000664:	f001 fc30 	bl	8001ec8 <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066e:	f000 f887 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000b4 	.word	0x200000b4
 800067c:	40004400 	.word	0x40004400

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <MX_GPIO_Init+0xd4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a2d      	ldr	r2, [pc, #180]	; (8000754 <MX_GPIO_Init+0xd4>)
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <MX_GPIO_Init+0xd4>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <MX_GPIO_Init+0xd4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a26      	ldr	r2, [pc, #152]	; (8000754 <MX_GPIO_Init+0xd4>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <MX_GPIO_Init+0xd4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_GPIO_Init+0xd4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a1f      	ldr	r2, [pc, #124]	; (8000754 <MX_GPIO_Init+0xd4>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_GPIO_Init+0xd4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_GPIO_Init+0xd4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a18      	ldr	r2, [pc, #96]	; (8000754 <MX_GPIO_Init+0xd4>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_GPIO_Init+0xd4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2120      	movs	r1, #32
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <MX_GPIO_Init+0xd8>)
 800070c:	f000 fc3e 	bl	8000f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000710:	2304      	movs	r3, #4
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800071c:	2307      	movs	r3, #7
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	480c      	ldr	r0, [pc, #48]	; (8000758 <MX_GPIO_Init+0xd8>)
 8000728:	f000 fa9e 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 800072c:	2308      	movs	r3, #8
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2; 
 800073c:	2307      	movs	r3, #7
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_GPIO_Init+0xd8>)
 8000748:	f000 fa8e 	bl	8000c68 <HAL_GPIO_Init>

}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000

0800075c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d101      	bne.n	8000772 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076e:	f000 f957 	bl	8000a20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40001000 	.word	0x40001000

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000786:	e7fe      	b.n	8000786 <Error_Handler+0x6>

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <HAL_MspInit+0x4c>)
 8000798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079c:	6453      	str	r3, [r2, #68]	; 0x44
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <HAL_MspInit+0x4c>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_MspInit+0x4c>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_MspInit+0x4c>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <HAL_UART_MspInit+0x84>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d12b      	bne.n	8000852 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_UART_MspInit+0x88>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_UART_MspInit+0x88>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_UART_MspInit+0x88>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_UART_MspInit+0x88>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <HAL_UART_MspInit+0x88>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_UART_MspInit+0x88>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000832:	230c      	movs	r3, #12
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000842:	2307      	movs	r3, #7
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <HAL_UART_MspInit+0x8c>)
 800084e:	f000 fa0b 	bl	8000c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40004400 	.word	0x40004400
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000

08000868 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	2036      	movs	r0, #54	; 0x36
 800087e:	f000 f9c9 	bl	8000c14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000882:	2036      	movs	r0, #54	; 0x36
 8000884:	f000 f9e2 	bl	8000c4c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <HAL_InitTick+0xa4>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a1e      	ldr	r2, [pc, #120]	; (800090c <HAL_InitTick+0xa4>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_InitTick+0xa4>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 0310 	and.w	r3, r3, #16
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a4:	f107 0210 	add.w	r2, r7, #16
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fca0 	bl	80011f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008b4:	f000 fc76 	bl	80011a4 <HAL_RCC_GetPCLK1Freq>
 80008b8:	4603      	mov	r3, r0
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c0:	4a13      	ldr	r2, [pc, #76]	; (8000910 <HAL_InitTick+0xa8>)
 80008c2:	fba2 2303 	umull	r2, r3, r2, r3
 80008c6:	0c9b      	lsrs	r3, r3, #18
 80008c8:	3b01      	subs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_InitTick+0xac>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <HAL_InitTick+0xb0>)
 80008d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_InitTick+0xac>)
 80008d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_InitTick+0xac>)
 80008dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_InitTick+0xac>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <HAL_InitTick+0xac>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <HAL_InitTick+0xac>)
 80008ee:	f001 f8ad 	bl	8001a4c <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d104      	bne.n	8000902 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008f8:	4806      	ldr	r0, [pc, #24]	; (8000914 <HAL_InitTick+0xac>)
 80008fa:	f001 f8dc 	bl	8001ab6 <HAL_TIM_Base_Start_IT>
 80008fe:	4603      	mov	r3, r0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3730      	adds	r7, #48	; 0x30
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	431bde83 	.word	0x431bde83
 8000914:	200000f4 	.word	0x200000f4
 8000918:	40001000 	.word	0x40001000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <TIM6_DAC_IRQHandler+0x10>)
 800094e:	f001 f8d6 	bl	8001afe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000f4 	.word	0x200000f4

0800095c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <SystemInit+0x28>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000966:	4a07      	ldr	r2, [pc, #28]	; (8000984 <SystemInit+0x28>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <SystemInit+0x28>)
 8000972:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000976:	609a      	str	r2, [r3, #8]
#endif
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800098c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800098e:	e003      	b.n	8000998 <LoopCopyDataInit>

08000990 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000992:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000994:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000996:	3104      	adds	r1, #4

08000998 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800099c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800099e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009a0:	d3f6      	bcc.n	8000990 <CopyDataInit>
  ldr  r2, =_sbss
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009a4:	e002      	b.n	80009ac <LoopFillZerobss>

080009a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009a8:	f842 3b04 	str.w	r3, [r2], #4

080009ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009b0:	d3f9      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009b2:	f7ff ffd3 	bl	800095c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b6:	f002 f91f 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ba:	f7ff fda9 	bl	8000510 <main>
  bx  lr    
 80009be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009c4:	08002c98 	.word	0x08002c98
  ldr  r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009cc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80009d0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80009d4:	20000138 	.word	0x20000138

080009d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC_IRQHandler>
	...

080009dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <HAL_Init+0x40>)
 80009e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_Init+0x40>)
 80009f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_Init+0x40>)
 80009fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f8fa 	bl	8000bfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff ff2c 	bl	8000868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff feba 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023c00 	.word	0x40023c00

08000a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x20>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x24>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_IncTick+0x24>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000134 	.word	0x20000134

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000134 	.word	0x20000134

08000a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a68:	f7ff ffee 	bl	8000a48 <HAL_GetTick>
 8000a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a78:	d005      	beq.n	8000a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_Delay+0x40>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a86:	bf00      	nop
 8000a88:	f7ff ffde 	bl	8000a48 <HAL_GetTick>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d8f7      	bhi.n	8000a88 <HAL_Delay+0x28>
  {
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000008 	.word	0x20000008

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4907      	ldr	r1, [pc, #28]	; (8000b40 <__NVIC_EnableIRQ+0x38>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ff4c 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c26:	f7ff ff61 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	6978      	ldr	r0, [r7, #20]
 8000c32:	f7ff ffb1 	bl	8000b98 <NVIC_EncodePriority>
 8000c36:	4602      	mov	r2, r0
 8000c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff80 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c44:	bf00      	nop
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff54 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	e165      	b.n	8000f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 8154 	bne.w	8000f4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d00b      	beq.n	8000cc2 <HAL_GPIO_Init+0x5a>
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d007      	beq.n	8000cc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cb6:	2b11      	cmp	r3, #17
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b12      	cmp	r3, #18
 8000cc0:	d130      	bne.n	8000d24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	f003 0201 	and.w	r2, r3, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0xfc>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b12      	cmp	r3, #18
 8000d62:	d123      	bne.n	8000dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	691a      	ldr	r2, [r3, #16]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	08da      	lsrs	r2, r3, #3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3208      	adds	r2, #8
 8000da6:	69b9      	ldr	r1, [r7, #24]
 8000da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0203 	and.w	r2, r3, #3
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80ae 	beq.w	8000f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <HAL_GPIO_Init+0x2fc>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a5b      	ldr	r2, [pc, #364]	; (8000f64 <HAL_GPIO_Init+0x2fc>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b59      	ldr	r3, [pc, #356]	; (8000f64 <HAL_GPIO_Init+0x2fc>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e0a:	4a57      	ldr	r2, [pc, #348]	; (8000f68 <HAL_GPIO_Init+0x300>)
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4e      	ldr	r2, [pc, #312]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d025      	beq.n	8000e82 <HAL_GPIO_Init+0x21a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4d      	ldr	r2, [pc, #308]	; (8000f70 <HAL_GPIO_Init+0x308>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d01f      	beq.n	8000e7e <HAL_GPIO_Init+0x216>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4c      	ldr	r2, [pc, #304]	; (8000f74 <HAL_GPIO_Init+0x30c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d019      	beq.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4b      	ldr	r2, [pc, #300]	; (8000f78 <HAL_GPIO_Init+0x310>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0x20e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4a      	ldr	r2, [pc, #296]	; (8000f7c <HAL_GPIO_Init+0x314>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00d      	beq.n	8000e72 <HAL_GPIO_Init+0x20a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a49      	ldr	r2, [pc, #292]	; (8000f80 <HAL_GPIO_Init+0x318>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x206>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a48      	ldr	r2, [pc, #288]	; (8000f84 <HAL_GPIO_Init+0x31c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_GPIO_Init+0x202>
 8000e66:	2306      	movs	r3, #6
 8000e68:	e00c      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	e00a      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e6e:	2305      	movs	r3, #5
 8000e70:	e008      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e72:	2304      	movs	r3, #4
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e004      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e82:	2300      	movs	r3, #0
 8000e84:	69fa      	ldr	r2, [r7, #28]
 8000e86:	f002 0203 	and.w	r2, r2, #3
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	4093      	lsls	r3, r2
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e94:	4934      	ldr	r1, [pc, #208]	; (8000f68 <HAL_GPIO_Init+0x300>)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea2:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec6:	4a30      	ldr	r2, [pc, #192]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ecc:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ef0:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f44:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	2b0f      	cmp	r3, #15
 8000f54:	f67f ae96 	bls.w	8000c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3724      	adds	r7, #36	; 0x24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40021400 	.word	0x40021400
 8000f84:	40021800 	.word	0x40021800
 8000f88:	40013c00 	.word	0x40013c00

08000f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f9c:	787b      	ldrb	r3, [r7, #1]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fa8:	e003      	b.n	8000fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	041a      	lsls	r2, r3, #16
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	619a      	str	r2, [r3, #24]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e0cc      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd4:	4b68      	ldr	r3, [pc, #416]	; (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d90c      	bls.n	8000ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe2:	4b65      	ldr	r3, [pc, #404]	; (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fea:	4b63      	ldr	r3, [pc, #396]	; (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d001      	beq.n	8000ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e0b8      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d020      	beq.n	800104a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001014:	4b59      	ldr	r3, [pc, #356]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4a58      	ldr	r2, [pc, #352]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 800101a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800101e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800102c:	4b53      	ldr	r3, [pc, #332]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001038:	4b50      	ldr	r3, [pc, #320]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	494d      	ldr	r1, [pc, #308]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001046:	4313      	orrs	r3, r2
 8001048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d044      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d107      	bne.n	800106e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105e:	4b47      	ldr	r3, [pc, #284]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d119      	bne.n	800109e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e07f      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d003      	beq.n	800107e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800107a:	2b03      	cmp	r3, #3
 800107c:	d107      	bne.n	800108e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800107e:	4b3f      	ldr	r3, [pc, #252]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e06f      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108e:	4b3b      	ldr	r3, [pc, #236]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e067      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800109e:	4b37      	ldr	r3, [pc, #220]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f023 0203 	bic.w	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4934      	ldr	r1, [pc, #208]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010b0:	f7ff fcca 	bl	8000a48 <HAL_GetTick>
 80010b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010b6:	e00a      	b.n	80010ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b8:	f7ff fcc6 	bl	8000a48 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e04f      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 020c 	and.w	r2, r3, #12
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	429a      	cmp	r2, r3
 80010de:	d1eb      	bne.n	80010b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d20c      	bcs.n	8001108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d001      	beq.n	8001108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e032      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	4916      	ldr	r1, [pc, #88]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	4313      	orrs	r3, r2
 8001124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d009      	beq.n	8001146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	490e      	ldr	r1, [pc, #56]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	4313      	orrs	r3, r2
 8001144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001146:	f000 f887 	bl	8001258 <HAL_RCC_GetSysClockFreq>
 800114a:	4601      	mov	r1, r0
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_RCC_ClockConfig+0x1c0>)
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	fa21 f303 	lsr.w	r3, r1, r3
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_RCC_ClockConfig+0x1c8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fb7e 	bl	8000868 <HAL_InitTick>

  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023c00 	.word	0x40023c00
 800117c:	40023800 	.word	0x40023800
 8001180:	08002c70 	.word	0x08002c70
 8001184:	20000000 	.word	0x20000000
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000000 	.word	0x20000000

080011a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011a8:	f7ff fff0 	bl	800118c <HAL_RCC_GetHCLKFreq>
 80011ac:	4601      	mov	r1, r0
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	0a9b      	lsrs	r3, r3, #10
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011ba:	5cd3      	ldrb	r3, [r2, r3]
 80011bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	08002c80 	.word	0x08002c80

080011cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80011d0:	f7ff ffdc 	bl	800118c <HAL_RCC_GetHCLKFreq>
 80011d4:	4601      	mov	r1, r0
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	0b5b      	lsrs	r3, r3, #13
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011e2:	5cd3      	ldrb	r3, [r2, r3]
 80011e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	08002c80 	.word	0x08002c80

080011f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	220f      	movs	r2, #15
 8001202:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_RCC_GetClockConfig+0x5c>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0203 	and.w	r2, r3, #3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <HAL_RCC_GetClockConfig+0x5c>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_RCC_GetClockConfig+0x5c>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_RCC_GetClockConfig+0x5c>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	08db      	lsrs	r3, r3, #3
 800122e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_RCC_GetClockConfig+0x60>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 020f 	and.w	r2, r3, #15
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	601a      	str	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40023c00 	.word	0x40023c00

08001258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001272:	4bc6      	ldr	r3, [pc, #792]	; (800158c <HAL_RCC_GetSysClockFreq+0x334>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b0c      	cmp	r3, #12
 800127c:	f200 817e 	bhi.w	800157c <HAL_RCC_GetSysClockFreq+0x324>
 8001280:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <HAL_RCC_GetSysClockFreq+0x30>)
 8001282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001286:	bf00      	nop
 8001288:	080012bd 	.word	0x080012bd
 800128c:	0800157d 	.word	0x0800157d
 8001290:	0800157d 	.word	0x0800157d
 8001294:	0800157d 	.word	0x0800157d
 8001298:	080012c3 	.word	0x080012c3
 800129c:	0800157d 	.word	0x0800157d
 80012a0:	0800157d 	.word	0x0800157d
 80012a4:	0800157d 	.word	0x0800157d
 80012a8:	080012c9 	.word	0x080012c9
 80012ac:	0800157d 	.word	0x0800157d
 80012b0:	0800157d 	.word	0x0800157d
 80012b4:	0800157d 	.word	0x0800157d
 80012b8:	08001425 	.word	0x08001425
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012bc:	4bb4      	ldr	r3, [pc, #720]	; (8001590 <HAL_RCC_GetSysClockFreq+0x338>)
 80012be:	613b      	str	r3, [r7, #16]
       break;
 80012c0:	e15f      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012c2:	4bb4      	ldr	r3, [pc, #720]	; (8001594 <HAL_RCC_GetSysClockFreq+0x33c>)
 80012c4:	613b      	str	r3, [r7, #16]
      break;
 80012c6:	e15c      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012c8:	4bb0      	ldr	r3, [pc, #704]	; (800158c <HAL_RCC_GetSysClockFreq+0x334>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012d0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012d2:	4bae      	ldr	r3, [pc, #696]	; (800158c <HAL_RCC_GetSysClockFreq+0x334>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d04a      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012de:	4bab      	ldr	r3, [pc, #684]	; (800158c <HAL_RCC_GetSysClockFreq+0x334>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	099b      	lsrs	r3, r3, #6
 80012e4:	f04f 0400 	mov.w	r4, #0
 80012e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	ea03 0501 	and.w	r5, r3, r1
 80012f4:	ea04 0602 	and.w	r6, r4, r2
 80012f8:	4629      	mov	r1, r5
 80012fa:	4632      	mov	r2, r6
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	f04f 0400 	mov.w	r4, #0
 8001304:	0154      	lsls	r4, r2, #5
 8001306:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800130a:	014b      	lsls	r3, r1, #5
 800130c:	4619      	mov	r1, r3
 800130e:	4622      	mov	r2, r4
 8001310:	1b49      	subs	r1, r1, r5
 8001312:	eb62 0206 	sbc.w	r2, r2, r6
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	f04f 0400 	mov.w	r4, #0
 800131e:	0194      	lsls	r4, r2, #6
 8001320:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001324:	018b      	lsls	r3, r1, #6
 8001326:	1a5b      	subs	r3, r3, r1
 8001328:	eb64 0402 	sbc.w	r4, r4, r2
 800132c:	f04f 0100 	mov.w	r1, #0
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	00e2      	lsls	r2, r4, #3
 8001336:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800133a:	00d9      	lsls	r1, r3, #3
 800133c:	460b      	mov	r3, r1
 800133e:	4614      	mov	r4, r2
 8001340:	195b      	adds	r3, r3, r5
 8001342:	eb44 0406 	adc.w	r4, r4, r6
 8001346:	f04f 0100 	mov.w	r1, #0
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	0262      	lsls	r2, r4, #9
 8001350:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001354:	0259      	lsls	r1, r3, #9
 8001356:	460b      	mov	r3, r1
 8001358:	4614      	mov	r4, r2
 800135a:	4618      	mov	r0, r3
 800135c:	4621      	mov	r1, r4
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f04f 0400 	mov.w	r4, #0
 8001364:	461a      	mov	r2, r3
 8001366:	4623      	mov	r3, r4
 8001368:	f7fe ff52 	bl	8000210 <__aeabi_uldivmod>
 800136c:	4603      	mov	r3, r0
 800136e:	460c      	mov	r4, r1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e049      	b.n	8001408 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001374:	4b85      	ldr	r3, [pc, #532]	; (800158c <HAL_RCC_GetSysClockFreq+0x334>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	099b      	lsrs	r3, r3, #6
 800137a:	f04f 0400 	mov.w	r4, #0
 800137e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	ea03 0501 	and.w	r5, r3, r1
 800138a:	ea04 0602 	and.w	r6, r4, r2
 800138e:	4629      	mov	r1, r5
 8001390:	4632      	mov	r2, r6
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	f04f 0400 	mov.w	r4, #0
 800139a:	0154      	lsls	r4, r2, #5
 800139c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013a0:	014b      	lsls	r3, r1, #5
 80013a2:	4619      	mov	r1, r3
 80013a4:	4622      	mov	r2, r4
 80013a6:	1b49      	subs	r1, r1, r5
 80013a8:	eb62 0206 	sbc.w	r2, r2, r6
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	f04f 0400 	mov.w	r4, #0
 80013b4:	0194      	lsls	r4, r2, #6
 80013b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013ba:	018b      	lsls	r3, r1, #6
 80013bc:	1a5b      	subs	r3, r3, r1
 80013be:	eb64 0402 	sbc.w	r4, r4, r2
 80013c2:	f04f 0100 	mov.w	r1, #0
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	00e2      	lsls	r2, r4, #3
 80013cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013d0:	00d9      	lsls	r1, r3, #3
 80013d2:	460b      	mov	r3, r1
 80013d4:	4614      	mov	r4, r2
 80013d6:	195b      	adds	r3, r3, r5
 80013d8:	eb44 0406 	adc.w	r4, r4, r6
 80013dc:	f04f 0100 	mov.w	r1, #0
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	02a2      	lsls	r2, r4, #10
 80013e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80013ea:	0299      	lsls	r1, r3, #10
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	4621      	mov	r1, r4
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f04f 0400 	mov.w	r4, #0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4623      	mov	r3, r4
 80013fe:	f7fe ff07 	bl	8000210 <__aeabi_uldivmod>
 8001402:	4603      	mov	r3, r0
 8001404:	460c      	mov	r4, r1
 8001406:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001408:	4b60      	ldr	r3, [pc, #384]	; (800158c <HAL_RCC_GetSysClockFreq+0x334>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	3301      	adds	r3, #1
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001420:	613b      	str	r3, [r7, #16]
      break;
 8001422:	e0ae      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001424:	4b59      	ldr	r3, [pc, #356]	; (800158c <HAL_RCC_GetSysClockFreq+0x334>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800142c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <HAL_RCC_GetSysClockFreq+0x334>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d04a      	beq.n	80014d0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800143a:	4b54      	ldr	r3, [pc, #336]	; (800158c <HAL_RCC_GetSysClockFreq+0x334>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	099b      	lsrs	r3, r3, #6
 8001440:	f04f 0400 	mov.w	r4, #0
 8001444:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	ea03 0501 	and.w	r5, r3, r1
 8001450:	ea04 0602 	and.w	r6, r4, r2
 8001454:	4629      	mov	r1, r5
 8001456:	4632      	mov	r2, r6
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	f04f 0400 	mov.w	r4, #0
 8001460:	0154      	lsls	r4, r2, #5
 8001462:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001466:	014b      	lsls	r3, r1, #5
 8001468:	4619      	mov	r1, r3
 800146a:	4622      	mov	r2, r4
 800146c:	1b49      	subs	r1, r1, r5
 800146e:	eb62 0206 	sbc.w	r2, r2, r6
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	f04f 0400 	mov.w	r4, #0
 800147a:	0194      	lsls	r4, r2, #6
 800147c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001480:	018b      	lsls	r3, r1, #6
 8001482:	1a5b      	subs	r3, r3, r1
 8001484:	eb64 0402 	sbc.w	r4, r4, r2
 8001488:	f04f 0100 	mov.w	r1, #0
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	00e2      	lsls	r2, r4, #3
 8001492:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001496:	00d9      	lsls	r1, r3, #3
 8001498:	460b      	mov	r3, r1
 800149a:	4614      	mov	r4, r2
 800149c:	195b      	adds	r3, r3, r5
 800149e:	eb44 0406 	adc.w	r4, r4, r6
 80014a2:	f04f 0100 	mov.w	r1, #0
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	0262      	lsls	r2, r4, #9
 80014ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80014b0:	0259      	lsls	r1, r3, #9
 80014b2:	460b      	mov	r3, r1
 80014b4:	4614      	mov	r4, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	4621      	mov	r1, r4
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f04f 0400 	mov.w	r4, #0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4623      	mov	r3, r4
 80014c4:	f7fe fea4 	bl	8000210 <__aeabi_uldivmod>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	e049      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <HAL_RCC_GetSysClockFreq+0x334>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	099b      	lsrs	r3, r3, #6
 80014d6:	f04f 0400 	mov.w	r4, #0
 80014da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	ea03 0501 	and.w	r5, r3, r1
 80014e6:	ea04 0602 	and.w	r6, r4, r2
 80014ea:	4629      	mov	r1, r5
 80014ec:	4632      	mov	r2, r6
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	f04f 0400 	mov.w	r4, #0
 80014f6:	0154      	lsls	r4, r2, #5
 80014f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014fc:	014b      	lsls	r3, r1, #5
 80014fe:	4619      	mov	r1, r3
 8001500:	4622      	mov	r2, r4
 8001502:	1b49      	subs	r1, r1, r5
 8001504:	eb62 0206 	sbc.w	r2, r2, r6
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	f04f 0400 	mov.w	r4, #0
 8001510:	0194      	lsls	r4, r2, #6
 8001512:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001516:	018b      	lsls	r3, r1, #6
 8001518:	1a5b      	subs	r3, r3, r1
 800151a:	eb64 0402 	sbc.w	r4, r4, r2
 800151e:	f04f 0100 	mov.w	r1, #0
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	00e2      	lsls	r2, r4, #3
 8001528:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800152c:	00d9      	lsls	r1, r3, #3
 800152e:	460b      	mov	r3, r1
 8001530:	4614      	mov	r4, r2
 8001532:	195b      	adds	r3, r3, r5
 8001534:	eb44 0406 	adc.w	r4, r4, r6
 8001538:	f04f 0100 	mov.w	r1, #0
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	02a2      	lsls	r2, r4, #10
 8001542:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001546:	0299      	lsls	r1, r3, #10
 8001548:	460b      	mov	r3, r1
 800154a:	4614      	mov	r4, r2
 800154c:	4618      	mov	r0, r3
 800154e:	4621      	mov	r1, r4
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f04f 0400 	mov.w	r4, #0
 8001556:	461a      	mov	r2, r3
 8001558:	4623      	mov	r3, r4
 800155a:	f7fe fe59 	bl	8000210 <__aeabi_uldivmod>
 800155e:	4603      	mov	r3, r0
 8001560:	460c      	mov	r4, r1
 8001562:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_RCC_GetSysClockFreq+0x334>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	0f1b      	lsrs	r3, r3, #28
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	fbb2 f3f3 	udiv	r3, r2, r3
 8001578:	613b      	str	r3, [r7, #16]
      break;
 800157a:	e002      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_RCC_GetSysClockFreq+0x338>)
 800157e:	613b      	str	r3, [r7, #16]
      break;
 8001580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001582:	693b      	ldr	r3, [r7, #16]
}
 8001584:	4618      	mov	r0, r3
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	00f42400 	.word	0x00f42400
 8001594:	007a1200 	.word	0x007a1200

08001598 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8083 	beq.w	80016b8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015b2:	4b95      	ldr	r3, [pc, #596]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d019      	beq.n	80015f2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015be:	4b92      	ldr	r3, [pc, #584]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d106      	bne.n	80015d8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015ca:	4b8f      	ldr	r3, [pc, #572]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015d6:	d00c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d8:	4b8b      	ldr	r3, [pc, #556]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015e0:	2b0c      	cmp	r3, #12
 80015e2:	d112      	bne.n	800160a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e4:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f0:	d10b      	bne.n	800160a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f2:	4b85      	ldr	r3, [pc, #532]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d05b      	beq.n	80016b6 <HAL_RCC_OscConfig+0x11e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d157      	bne.n	80016b6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e216      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x8a>
 8001614:	4b7c      	ldr	r3, [pc, #496]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a7b      	ldr	r2, [pc, #492]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800161a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	e01d      	b.n	800165e <HAL_RCC_OscConfig+0xc6>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800162a:	d10c      	bne.n	8001646 <HAL_RCC_OscConfig+0xae>
 800162c:	4b76      	ldr	r3, [pc, #472]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a75      	ldr	r2, [pc, #468]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b73      	ldr	r3, [pc, #460]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a72      	ldr	r2, [pc, #456]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800163e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e00b      	b.n	800165e <HAL_RCC_OscConfig+0xc6>
 8001646:	4b70      	ldr	r3, [pc, #448]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6f      	ldr	r2, [pc, #444]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800164c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b6d      	ldr	r3, [pc, #436]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a6c      	ldr	r2, [pc, #432]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d013      	beq.n	800168e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001666:	f7ff f9ef 	bl	8000a48 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166e:	f7ff f9eb 	bl	8000a48 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b64      	cmp	r3, #100	; 0x64
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1db      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001680:	4b61      	ldr	r3, [pc, #388]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0xd6>
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff f9db 	bl	8000a48 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001696:	f7ff f9d7 	bl	8000a48 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b64      	cmp	r3, #100	; 0x64
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e1c7      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0xfe>
 80016b4:	e000      	b.n	80016b8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d06f      	beq.n	80017a4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016c4:	4b50      	ldr	r3, [pc, #320]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d017      	beq.n	8001700 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d105      	bne.n	80016e8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016dc:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00b      	beq.n	8001700 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e8:	4b47      	ldr	r3, [pc, #284]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016f0:	2b0c      	cmp	r3, #12
 80016f2:	d11c      	bne.n	800172e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f4:	4b44      	ldr	r3, [pc, #272]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d116      	bne.n	800172e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_OscConfig+0x180>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e18f      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4938      	ldr	r1, [pc, #224]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172c:	e03a      	b.n	80017a4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d020      	beq.n	8001778 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff f984 	bl	8000a48 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff f980 	bl	8000a48 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e170      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001762:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4925      	ldr	r1, [pc, #148]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
 8001776:	e015      	b.n	80017a4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001778:	4b24      	ldr	r3, [pc, #144]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff f963 	bl	8000a48 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff f95f 	bl	8000a48 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e14f      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d037      	beq.n	8001820 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d016      	beq.n	80017e6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_RCC_OscConfig+0x278>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017be:	f7ff f943 	bl	8000a48 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c6:	f7ff f93f 	bl	8000a48 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e12f      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x22e>
 80017e4:	e01c      	b.n	8001820 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_RCC_OscConfig+0x278>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff f92c 	bl	8000a48 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f2:	e00f      	b.n	8001814 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f4:	f7ff f928 	bl	8000a48 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d908      	bls.n	8001814 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e118      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	42470000 	.word	0x42470000
 8001810:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001814:	4b8a      	ldr	r3, [pc, #552]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 8001816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e9      	bne.n	80017f4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8097 	beq.w	800195c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001832:	4b83      	ldr	r3, [pc, #524]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10f      	bne.n	800185e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b7f      	ldr	r3, [pc, #508]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a7e      	ldr	r2, [pc, #504]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b7c      	ldr	r3, [pc, #496]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800185a:	2301      	movs	r3, #1
 800185c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185e:	4b79      	ldr	r3, [pc, #484]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d118      	bne.n	800189c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001876:	f7ff f8e7 	bl	8000a48 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187e:	f7ff f8e3 	bl	8000a48 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0d3      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	4b6c      	ldr	r3, [pc, #432]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x31a>
 80018a4:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a8:	4a65      	ldr	r2, [pc, #404]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6713      	str	r3, [r2, #112]	; 0x70
 80018b0:	e01c      	b.n	80018ec <HAL_RCC_OscConfig+0x354>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x33c>
 80018ba:	4b61      	ldr	r3, [pc, #388]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a60      	ldr	r2, [pc, #384]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
 80018c6:	4b5e      	ldr	r3, [pc, #376]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	4a5d      	ldr	r2, [pc, #372]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6713      	str	r3, [r2, #112]	; 0x70
 80018d2:	e00b      	b.n	80018ec <HAL_RCC_OscConfig+0x354>
 80018d4:	4b5a      	ldr	r3, [pc, #360]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	4a59      	ldr	r2, [pc, #356]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	6713      	str	r3, [r2, #112]	; 0x70
 80018e0:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	4a56      	ldr	r2, [pc, #344]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 80018e6:	f023 0304 	bic.w	r3, r3, #4
 80018ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d015      	beq.n	8001920 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff f8a8 	bl	8000a48 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff f8a4 	bl	8000a48 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e092      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001912:	4b4b      	ldr	r3, [pc, #300]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0ee      	beq.n	80018fc <HAL_RCC_OscConfig+0x364>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff f892 	bl	8000a48 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff f88e 	bl	8000a48 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e07c      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193e:	4b40      	ldr	r3, [pc, #256]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1ee      	bne.n	8001928 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d105      	bne.n	800195c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001950:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	4a3a      	ldr	r2, [pc, #232]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 8001956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d068      	beq.n	8001a36 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001964:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d060      	beq.n	8001a32 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d145      	bne.n	8001a04 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_RCC_OscConfig+0x4b0>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7ff f863 	bl	8000a48 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff f85f 	bl	8000a48 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e04f      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	019b      	lsls	r3, r3, #6
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	3b01      	subs	r3, #1
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	061b      	lsls	r3, r3, #24
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	071b      	lsls	r3, r3, #28
 80019d0:	491b      	ldr	r1, [pc, #108]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_RCC_OscConfig+0x4b0>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff f834 	bl	8000a48 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff f830 	bl	8000a48 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e020      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x44c>
 8001a02:	e018      	b.n	8001a36 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_RCC_OscConfig+0x4b0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f81d 	bl	8000a48 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f819 	bl	8000a48 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e009      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCC_OscConfig+0x4a8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x47a>
 8001a30:	e001      	b.n	8001a36 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40007000 	.word	0x40007000
 8001a48:	42470060 	.word	0x42470060

08001a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e01d      	b.n	8001a9a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f815 	bl	8001aa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3304      	adds	r3, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	f000 f968 	bl	8001d60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b06      	cmp	r3, #6
 8001ade:	d007      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d122      	bne.n	8001b5a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d11b      	bne.n	8001b5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f06f 0202 	mvn.w	r2, #2
 8001b2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f8ee 	bl	8001d22 <HAL_TIM_IC_CaptureCallback>
 8001b46:	e005      	b.n	8001b54 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f8e0 	bl	8001d0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8f1 	bl	8001d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d122      	bne.n	8001bae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d11b      	bne.n	8001bae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f06f 0204 	mvn.w	r2, #4
 8001b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f8c4 	bl	8001d22 <HAL_TIM_IC_CaptureCallback>
 8001b9a:	e005      	b.n	8001ba8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f8b6 	bl	8001d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8c7 	bl	8001d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d122      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d11b      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0208 	mvn.w	r2, #8
 8001bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f89a 	bl	8001d22 <HAL_TIM_IC_CaptureCallback>
 8001bee:	e005      	b.n	8001bfc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f88c 	bl	8001d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f89d 	bl	8001d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b10      	cmp	r3, #16
 8001c0e:	d122      	bne.n	8001c56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d11b      	bne.n	8001c56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0210 	mvn.w	r2, #16
 8001c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f870 	bl	8001d22 <HAL_TIM_IC_CaptureCallback>
 8001c42:	e005      	b.n	8001c50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f862 	bl	8001d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f873 	bl	8001d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d10e      	bne.n	8001c82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d107      	bne.n	8001c82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f06f 0201 	mvn.w	r2, #1
 8001c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7fe fd6d 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8c:	2b80      	cmp	r3, #128	; 0x80
 8001c8e:	d10e      	bne.n	8001cae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9a:	2b80      	cmp	r3, #128	; 0x80
 8001c9c:	d107      	bne.n	8001cae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f903 	bl	8001eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb8:	2b40      	cmp	r3, #64	; 0x40
 8001cba:	d10e      	bne.n	8001cda <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc6:	2b40      	cmp	r3, #64	; 0x40
 8001cc8:	d107      	bne.n	8001cda <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f838 	bl	8001d4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d10e      	bne.n	8001d06 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	d107      	bne.n	8001d06 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f06f 0220 	mvn.w	r2, #32
 8001cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8cd 	bl	8001ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a40      	ldr	r2, [pc, #256]	; (8001e74 <TIM_Base_SetConfig+0x114>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d013      	beq.n	8001da0 <TIM_Base_SetConfig+0x40>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7e:	d00f      	beq.n	8001da0 <TIM_Base_SetConfig+0x40>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a3d      	ldr	r2, [pc, #244]	; (8001e78 <TIM_Base_SetConfig+0x118>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d00b      	beq.n	8001da0 <TIM_Base_SetConfig+0x40>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a3c      	ldr	r2, [pc, #240]	; (8001e7c <TIM_Base_SetConfig+0x11c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d007      	beq.n	8001da0 <TIM_Base_SetConfig+0x40>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a3b      	ldr	r2, [pc, #236]	; (8001e80 <TIM_Base_SetConfig+0x120>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d003      	beq.n	8001da0 <TIM_Base_SetConfig+0x40>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3a      	ldr	r2, [pc, #232]	; (8001e84 <TIM_Base_SetConfig+0x124>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d108      	bne.n	8001db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a2f      	ldr	r2, [pc, #188]	; (8001e74 <TIM_Base_SetConfig+0x114>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d02b      	beq.n	8001e12 <TIM_Base_SetConfig+0xb2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc0:	d027      	beq.n	8001e12 <TIM_Base_SetConfig+0xb2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a2c      	ldr	r2, [pc, #176]	; (8001e78 <TIM_Base_SetConfig+0x118>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d023      	beq.n	8001e12 <TIM_Base_SetConfig+0xb2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a2b      	ldr	r2, [pc, #172]	; (8001e7c <TIM_Base_SetConfig+0x11c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d01f      	beq.n	8001e12 <TIM_Base_SetConfig+0xb2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <TIM_Base_SetConfig+0x120>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01b      	beq.n	8001e12 <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <TIM_Base_SetConfig+0x124>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d017      	beq.n	8001e12 <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <TIM_Base_SetConfig+0x128>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <TIM_Base_SetConfig+0x12c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00f      	beq.n	8001e12 <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <TIM_Base_SetConfig+0x130>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00b      	beq.n	8001e12 <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a25      	ldr	r2, [pc, #148]	; (8001e94 <TIM_Base_SetConfig+0x134>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a24      	ldr	r2, [pc, #144]	; (8001e98 <TIM_Base_SetConfig+0x138>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d003      	beq.n	8001e12 <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a23      	ldr	r2, [pc, #140]	; (8001e9c <TIM_Base_SetConfig+0x13c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d108      	bne.n	8001e24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <TIM_Base_SetConfig+0x114>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d003      	beq.n	8001e58 <TIM_Base_SetConfig+0xf8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <TIM_Base_SetConfig+0x124>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d103      	bne.n	8001e60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	615a      	str	r2, [r3, #20]
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40000400 	.word	0x40000400
 8001e7c:	40000800 	.word	0x40000800
 8001e80:	40000c00 	.word	0x40000c00
 8001e84:	40010400 	.word	0x40010400
 8001e88:	40014000 	.word	0x40014000
 8001e8c:	40014400 	.word	0x40014400
 8001e90:	40014800 	.word	0x40014800
 8001e94:	40001800 	.word	0x40001800
 8001e98:	40001c00 	.word	0x40001c00
 8001e9c:	40002000 	.word	0x40002000

08001ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e03f      	b.n	8001f5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fc72 	bl	80007d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2224      	movs	r2, #36	; 0x24
 8001ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f90b 	bl	8002128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b088      	sub	sp, #32
 8001f66:	af02      	add	r7, sp, #8
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	f040 8083 	bne.w	800208a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_UART_Transmit+0x2e>
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e07b      	b.n	800208c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_UART_Transmit+0x40>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e074      	b.n	800208c <HAL_UART_Transmit+0x12a>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2221      	movs	r2, #33	; 0x21
 8001fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fd46 	bl	8000a48 <HAL_GetTick>
 8001fbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001fd2:	e042      	b.n	800205a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fea:	d122      	bne.n	8002032 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f84c 	bl	8002094 <UART_WaitOnFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e042      	b.n	800208c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002018:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d103      	bne.n	800202a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3302      	adds	r3, #2
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	e017      	b.n	800205a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3301      	adds	r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	e013      	b.n	800205a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2200      	movs	r2, #0
 800203a:	2180      	movs	r1, #128	; 0x80
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f829 	bl	8002094 <UART_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e01f      	b.n	800208c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	60ba      	str	r2, [r7, #8]
 8002052:	781a      	ldrb	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1b7      	bne.n	8001fd4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2200      	movs	r2, #0
 800206c:	2140      	movs	r1, #64	; 0x40
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f810 	bl	8002094 <UART_WaitOnFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e006      	b.n	800208c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020a4:	e02c      	b.n	8002100 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ac:	d028      	beq.n	8002100 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80020b4:	f7fe fcc8 	bl	8000a48 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d21d      	bcs.n	8002100 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e00f      	b.n	8002120 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	4013      	ands	r3, r2
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	429a      	cmp	r2, r3
 800211c:	d0c3      	beq.n	80020a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	4313      	orrs	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800216a:	f023 030c 	bic.w	r3, r3, #12
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	68f9      	ldr	r1, [r7, #12]
 8002174:	430b      	orrs	r3, r1
 8002176:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002196:	f040 818b 	bne.w	80024b0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4ac1      	ldr	r2, [pc, #772]	; (80024a4 <UART_SetConfig+0x37c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d005      	beq.n	80021b0 <UART_SetConfig+0x88>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4abf      	ldr	r2, [pc, #764]	; (80024a8 <UART_SetConfig+0x380>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	f040 80bd 	bne.w	800232a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021b0:	f7ff f80c 	bl	80011cc <HAL_RCC_GetPCLK2Freq>
 80021b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	461d      	mov	r5, r3
 80021ba:	f04f 0600 	mov.w	r6, #0
 80021be:	46a8      	mov	r8, r5
 80021c0:	46b1      	mov	r9, r6
 80021c2:	eb18 0308 	adds.w	r3, r8, r8
 80021c6:	eb49 0409 	adc.w	r4, r9, r9
 80021ca:	4698      	mov	r8, r3
 80021cc:	46a1      	mov	r9, r4
 80021ce:	eb18 0805 	adds.w	r8, r8, r5
 80021d2:	eb49 0906 	adc.w	r9, r9, r6
 80021d6:	f04f 0100 	mov.w	r1, #0
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021ea:	4688      	mov	r8, r1
 80021ec:	4691      	mov	r9, r2
 80021ee:	eb18 0005 	adds.w	r0, r8, r5
 80021f2:	eb49 0106 	adc.w	r1, r9, r6
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	461d      	mov	r5, r3
 80021fc:	f04f 0600 	mov.w	r6, #0
 8002200:	196b      	adds	r3, r5, r5
 8002202:	eb46 0406 	adc.w	r4, r6, r6
 8002206:	461a      	mov	r2, r3
 8002208:	4623      	mov	r3, r4
 800220a:	f7fe f801 	bl	8000210 <__aeabi_uldivmod>
 800220e:	4603      	mov	r3, r0
 8002210:	460c      	mov	r4, r1
 8002212:	461a      	mov	r2, r3
 8002214:	4ba5      	ldr	r3, [pc, #660]	; (80024ac <UART_SetConfig+0x384>)
 8002216:	fba3 2302 	umull	r2, r3, r3, r2
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	461d      	mov	r5, r3
 8002224:	f04f 0600 	mov.w	r6, #0
 8002228:	46a9      	mov	r9, r5
 800222a:	46b2      	mov	sl, r6
 800222c:	eb19 0309 	adds.w	r3, r9, r9
 8002230:	eb4a 040a 	adc.w	r4, sl, sl
 8002234:	4699      	mov	r9, r3
 8002236:	46a2      	mov	sl, r4
 8002238:	eb19 0905 	adds.w	r9, r9, r5
 800223c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002240:	f04f 0100 	mov.w	r1, #0
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800224c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002250:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002254:	4689      	mov	r9, r1
 8002256:	4692      	mov	sl, r2
 8002258:	eb19 0005 	adds.w	r0, r9, r5
 800225c:	eb4a 0106 	adc.w	r1, sl, r6
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	461d      	mov	r5, r3
 8002266:	f04f 0600 	mov.w	r6, #0
 800226a:	196b      	adds	r3, r5, r5
 800226c:	eb46 0406 	adc.w	r4, r6, r6
 8002270:	461a      	mov	r2, r3
 8002272:	4623      	mov	r3, r4
 8002274:	f7fd ffcc 	bl	8000210 <__aeabi_uldivmod>
 8002278:	4603      	mov	r3, r0
 800227a:	460c      	mov	r4, r1
 800227c:	461a      	mov	r2, r3
 800227e:	4b8b      	ldr	r3, [pc, #556]	; (80024ac <UART_SetConfig+0x384>)
 8002280:	fba3 1302 	umull	r1, r3, r3, r2
 8002284:	095b      	lsrs	r3, r3, #5
 8002286:	2164      	movs	r1, #100	; 0x64
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	3332      	adds	r3, #50	; 0x32
 8002292:	4a86      	ldr	r2, [pc, #536]	; (80024ac <UART_SetConfig+0x384>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022a0:	4498      	add	r8, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	461d      	mov	r5, r3
 80022a6:	f04f 0600 	mov.w	r6, #0
 80022aa:	46a9      	mov	r9, r5
 80022ac:	46b2      	mov	sl, r6
 80022ae:	eb19 0309 	adds.w	r3, r9, r9
 80022b2:	eb4a 040a 	adc.w	r4, sl, sl
 80022b6:	4699      	mov	r9, r3
 80022b8:	46a2      	mov	sl, r4
 80022ba:	eb19 0905 	adds.w	r9, r9, r5
 80022be:	eb4a 0a06 	adc.w	sl, sl, r6
 80022c2:	f04f 0100 	mov.w	r1, #0
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022d6:	4689      	mov	r9, r1
 80022d8:	4692      	mov	sl, r2
 80022da:	eb19 0005 	adds.w	r0, r9, r5
 80022de:	eb4a 0106 	adc.w	r1, sl, r6
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	461d      	mov	r5, r3
 80022e8:	f04f 0600 	mov.w	r6, #0
 80022ec:	196b      	adds	r3, r5, r5
 80022ee:	eb46 0406 	adc.w	r4, r6, r6
 80022f2:	461a      	mov	r2, r3
 80022f4:	4623      	mov	r3, r4
 80022f6:	f7fd ff8b 	bl	8000210 <__aeabi_uldivmod>
 80022fa:	4603      	mov	r3, r0
 80022fc:	460c      	mov	r4, r1
 80022fe:	461a      	mov	r2, r3
 8002300:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <UART_SetConfig+0x384>)
 8002302:	fba3 1302 	umull	r1, r3, r3, r2
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2164      	movs	r1, #100	; 0x64
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	3332      	adds	r3, #50	; 0x32
 8002314:	4a65      	ldr	r2, [pc, #404]	; (80024ac <UART_SetConfig+0x384>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	f003 0207 	and.w	r2, r3, #7
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4442      	add	r2, r8
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	e26f      	b.n	800280a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800232a:	f7fe ff3b 	bl	80011a4 <HAL_RCC_GetPCLK1Freq>
 800232e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	461d      	mov	r5, r3
 8002334:	f04f 0600 	mov.w	r6, #0
 8002338:	46a8      	mov	r8, r5
 800233a:	46b1      	mov	r9, r6
 800233c:	eb18 0308 	adds.w	r3, r8, r8
 8002340:	eb49 0409 	adc.w	r4, r9, r9
 8002344:	4698      	mov	r8, r3
 8002346:	46a1      	mov	r9, r4
 8002348:	eb18 0805 	adds.w	r8, r8, r5
 800234c:	eb49 0906 	adc.w	r9, r9, r6
 8002350:	f04f 0100 	mov.w	r1, #0
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800235c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002360:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002364:	4688      	mov	r8, r1
 8002366:	4691      	mov	r9, r2
 8002368:	eb18 0005 	adds.w	r0, r8, r5
 800236c:	eb49 0106 	adc.w	r1, r9, r6
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	461d      	mov	r5, r3
 8002376:	f04f 0600 	mov.w	r6, #0
 800237a:	196b      	adds	r3, r5, r5
 800237c:	eb46 0406 	adc.w	r4, r6, r6
 8002380:	461a      	mov	r2, r3
 8002382:	4623      	mov	r3, r4
 8002384:	f7fd ff44 	bl	8000210 <__aeabi_uldivmod>
 8002388:	4603      	mov	r3, r0
 800238a:	460c      	mov	r4, r1
 800238c:	461a      	mov	r2, r3
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <UART_SetConfig+0x384>)
 8002390:	fba3 2302 	umull	r2, r3, r3, r2
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	461d      	mov	r5, r3
 800239e:	f04f 0600 	mov.w	r6, #0
 80023a2:	46a9      	mov	r9, r5
 80023a4:	46b2      	mov	sl, r6
 80023a6:	eb19 0309 	adds.w	r3, r9, r9
 80023aa:	eb4a 040a 	adc.w	r4, sl, sl
 80023ae:	4699      	mov	r9, r3
 80023b0:	46a2      	mov	sl, r4
 80023b2:	eb19 0905 	adds.w	r9, r9, r5
 80023b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023ce:	4689      	mov	r9, r1
 80023d0:	4692      	mov	sl, r2
 80023d2:	eb19 0005 	adds.w	r0, r9, r5
 80023d6:	eb4a 0106 	adc.w	r1, sl, r6
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	461d      	mov	r5, r3
 80023e0:	f04f 0600 	mov.w	r6, #0
 80023e4:	196b      	adds	r3, r5, r5
 80023e6:	eb46 0406 	adc.w	r4, r6, r6
 80023ea:	461a      	mov	r2, r3
 80023ec:	4623      	mov	r3, r4
 80023ee:	f7fd ff0f 	bl	8000210 <__aeabi_uldivmod>
 80023f2:	4603      	mov	r3, r0
 80023f4:	460c      	mov	r4, r1
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <UART_SetConfig+0x384>)
 80023fa:	fba3 1302 	umull	r1, r3, r3, r2
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2164      	movs	r1, #100	; 0x64
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	3332      	adds	r3, #50	; 0x32
 800240c:	4a27      	ldr	r2, [pc, #156]	; (80024ac <UART_SetConfig+0x384>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800241a:	4498      	add	r8, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	461d      	mov	r5, r3
 8002420:	f04f 0600 	mov.w	r6, #0
 8002424:	46a9      	mov	r9, r5
 8002426:	46b2      	mov	sl, r6
 8002428:	eb19 0309 	adds.w	r3, r9, r9
 800242c:	eb4a 040a 	adc.w	r4, sl, sl
 8002430:	4699      	mov	r9, r3
 8002432:	46a2      	mov	sl, r4
 8002434:	eb19 0905 	adds.w	r9, r9, r5
 8002438:	eb4a 0a06 	adc.w	sl, sl, r6
 800243c:	f04f 0100 	mov.w	r1, #0
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002448:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800244c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002450:	4689      	mov	r9, r1
 8002452:	4692      	mov	sl, r2
 8002454:	eb19 0005 	adds.w	r0, r9, r5
 8002458:	eb4a 0106 	adc.w	r1, sl, r6
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	461d      	mov	r5, r3
 8002462:	f04f 0600 	mov.w	r6, #0
 8002466:	196b      	adds	r3, r5, r5
 8002468:	eb46 0406 	adc.w	r4, r6, r6
 800246c:	461a      	mov	r2, r3
 800246e:	4623      	mov	r3, r4
 8002470:	f7fd fece 	bl	8000210 <__aeabi_uldivmod>
 8002474:	4603      	mov	r3, r0
 8002476:	460c      	mov	r4, r1
 8002478:	461a      	mov	r2, r3
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <UART_SetConfig+0x384>)
 800247c:	fba3 1302 	umull	r1, r3, r3, r2
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	2164      	movs	r1, #100	; 0x64
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	3332      	adds	r3, #50	; 0x32
 800248e:	4a07      	ldr	r2, [pc, #28]	; (80024ac <UART_SetConfig+0x384>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	f003 0207 	and.w	r2, r3, #7
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4442      	add	r2, r8
 80024a0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80024a2:	e1b2      	b.n	800280a <UART_SetConfig+0x6e2>
 80024a4:	40011000 	.word	0x40011000
 80024a8:	40011400 	.word	0x40011400
 80024ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4ad7      	ldr	r2, [pc, #860]	; (8002814 <UART_SetConfig+0x6ec>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d005      	beq.n	80024c6 <UART_SetConfig+0x39e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4ad6      	ldr	r2, [pc, #856]	; (8002818 <UART_SetConfig+0x6f0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	f040 80d1 	bne.w	8002668 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024c6:	f7fe fe81 	bl	80011cc <HAL_RCC_GetPCLK2Freq>
 80024ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	469a      	mov	sl, r3
 80024d0:	f04f 0b00 	mov.w	fp, #0
 80024d4:	46d0      	mov	r8, sl
 80024d6:	46d9      	mov	r9, fp
 80024d8:	eb18 0308 	adds.w	r3, r8, r8
 80024dc:	eb49 0409 	adc.w	r4, r9, r9
 80024e0:	4698      	mov	r8, r3
 80024e2:	46a1      	mov	r9, r4
 80024e4:	eb18 080a 	adds.w	r8, r8, sl
 80024e8:	eb49 090b 	adc.w	r9, r9, fp
 80024ec:	f04f 0100 	mov.w	r1, #0
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002500:	4688      	mov	r8, r1
 8002502:	4691      	mov	r9, r2
 8002504:	eb1a 0508 	adds.w	r5, sl, r8
 8002508:	eb4b 0609 	adc.w	r6, fp, r9
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4619      	mov	r1, r3
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	f04f 0400 	mov.w	r4, #0
 800251e:	0094      	lsls	r4, r2, #2
 8002520:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002524:	008b      	lsls	r3, r1, #2
 8002526:	461a      	mov	r2, r3
 8002528:	4623      	mov	r3, r4
 800252a:	4628      	mov	r0, r5
 800252c:	4631      	mov	r1, r6
 800252e:	f7fd fe6f 	bl	8000210 <__aeabi_uldivmod>
 8002532:	4603      	mov	r3, r0
 8002534:	460c      	mov	r4, r1
 8002536:	461a      	mov	r2, r3
 8002538:	4bb8      	ldr	r3, [pc, #736]	; (800281c <UART_SetConfig+0x6f4>)
 800253a:	fba3 2302 	umull	r2, r3, r3, r2
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	469b      	mov	fp, r3
 8002548:	f04f 0c00 	mov.w	ip, #0
 800254c:	46d9      	mov	r9, fp
 800254e:	46e2      	mov	sl, ip
 8002550:	eb19 0309 	adds.w	r3, r9, r9
 8002554:	eb4a 040a 	adc.w	r4, sl, sl
 8002558:	4699      	mov	r9, r3
 800255a:	46a2      	mov	sl, r4
 800255c:	eb19 090b 	adds.w	r9, r9, fp
 8002560:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002564:	f04f 0100 	mov.w	r1, #0
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002570:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002574:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002578:	4689      	mov	r9, r1
 800257a:	4692      	mov	sl, r2
 800257c:	eb1b 0509 	adds.w	r5, fp, r9
 8002580:	eb4c 060a 	adc.w	r6, ip, sl
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4619      	mov	r1, r3
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	f04f 0400 	mov.w	r4, #0
 8002596:	0094      	lsls	r4, r2, #2
 8002598:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800259c:	008b      	lsls	r3, r1, #2
 800259e:	461a      	mov	r2, r3
 80025a0:	4623      	mov	r3, r4
 80025a2:	4628      	mov	r0, r5
 80025a4:	4631      	mov	r1, r6
 80025a6:	f7fd fe33 	bl	8000210 <__aeabi_uldivmod>
 80025aa:	4603      	mov	r3, r0
 80025ac:	460c      	mov	r4, r1
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b9a      	ldr	r3, [pc, #616]	; (800281c <UART_SetConfig+0x6f4>)
 80025b2:	fba3 1302 	umull	r1, r3, r3, r2
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2164      	movs	r1, #100	; 0x64
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	3332      	adds	r3, #50	; 0x32
 80025c4:	4a95      	ldr	r2, [pc, #596]	; (800281c <UART_SetConfig+0x6f4>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d0:	4498      	add	r8, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	469b      	mov	fp, r3
 80025d6:	f04f 0c00 	mov.w	ip, #0
 80025da:	46d9      	mov	r9, fp
 80025dc:	46e2      	mov	sl, ip
 80025de:	eb19 0309 	adds.w	r3, r9, r9
 80025e2:	eb4a 040a 	adc.w	r4, sl, sl
 80025e6:	4699      	mov	r9, r3
 80025e8:	46a2      	mov	sl, r4
 80025ea:	eb19 090b 	adds.w	r9, r9, fp
 80025ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002602:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002606:	4689      	mov	r9, r1
 8002608:	4692      	mov	sl, r2
 800260a:	eb1b 0509 	adds.w	r5, fp, r9
 800260e:	eb4c 060a 	adc.w	r6, ip, sl
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4619      	mov	r1, r3
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	f04f 0400 	mov.w	r4, #0
 8002624:	0094      	lsls	r4, r2, #2
 8002626:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800262a:	008b      	lsls	r3, r1, #2
 800262c:	461a      	mov	r2, r3
 800262e:	4623      	mov	r3, r4
 8002630:	4628      	mov	r0, r5
 8002632:	4631      	mov	r1, r6
 8002634:	f7fd fdec 	bl	8000210 <__aeabi_uldivmod>
 8002638:	4603      	mov	r3, r0
 800263a:	460c      	mov	r4, r1
 800263c:	461a      	mov	r2, r3
 800263e:	4b77      	ldr	r3, [pc, #476]	; (800281c <UART_SetConfig+0x6f4>)
 8002640:	fba3 1302 	umull	r1, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	2164      	movs	r1, #100	; 0x64
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	3332      	adds	r3, #50	; 0x32
 8002652:	4a72      	ldr	r2, [pc, #456]	; (800281c <UART_SetConfig+0x6f4>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	f003 020f 	and.w	r2, r3, #15
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4442      	add	r2, r8
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	e0d0      	b.n	800280a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002668:	f7fe fd9c 	bl	80011a4 <HAL_RCC_GetPCLK1Freq>
 800266c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	469a      	mov	sl, r3
 8002672:	f04f 0b00 	mov.w	fp, #0
 8002676:	46d0      	mov	r8, sl
 8002678:	46d9      	mov	r9, fp
 800267a:	eb18 0308 	adds.w	r3, r8, r8
 800267e:	eb49 0409 	adc.w	r4, r9, r9
 8002682:	4698      	mov	r8, r3
 8002684:	46a1      	mov	r9, r4
 8002686:	eb18 080a 	adds.w	r8, r8, sl
 800268a:	eb49 090b 	adc.w	r9, r9, fp
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800269a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800269e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026a2:	4688      	mov	r8, r1
 80026a4:	4691      	mov	r9, r2
 80026a6:	eb1a 0508 	adds.w	r5, sl, r8
 80026aa:	eb4b 0609 	adc.w	r6, fp, r9
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4619      	mov	r1, r3
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	f04f 0400 	mov.w	r4, #0
 80026c0:	0094      	lsls	r4, r2, #2
 80026c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026c6:	008b      	lsls	r3, r1, #2
 80026c8:	461a      	mov	r2, r3
 80026ca:	4623      	mov	r3, r4
 80026cc:	4628      	mov	r0, r5
 80026ce:	4631      	mov	r1, r6
 80026d0:	f7fd fd9e 	bl	8000210 <__aeabi_uldivmod>
 80026d4:	4603      	mov	r3, r0
 80026d6:	460c      	mov	r4, r1
 80026d8:	461a      	mov	r2, r3
 80026da:	4b50      	ldr	r3, [pc, #320]	; (800281c <UART_SetConfig+0x6f4>)
 80026dc:	fba3 2302 	umull	r2, r3, r3, r2
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	469b      	mov	fp, r3
 80026ea:	f04f 0c00 	mov.w	ip, #0
 80026ee:	46d9      	mov	r9, fp
 80026f0:	46e2      	mov	sl, ip
 80026f2:	eb19 0309 	adds.w	r3, r9, r9
 80026f6:	eb4a 040a 	adc.w	r4, sl, sl
 80026fa:	4699      	mov	r9, r3
 80026fc:	46a2      	mov	sl, r4
 80026fe:	eb19 090b 	adds.w	r9, r9, fp
 8002702:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002706:	f04f 0100 	mov.w	r1, #0
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002712:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002716:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800271a:	4689      	mov	r9, r1
 800271c:	4692      	mov	sl, r2
 800271e:	eb1b 0509 	adds.w	r5, fp, r9
 8002722:	eb4c 060a 	adc.w	r6, ip, sl
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4619      	mov	r1, r3
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	f04f 0400 	mov.w	r4, #0
 8002738:	0094      	lsls	r4, r2, #2
 800273a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800273e:	008b      	lsls	r3, r1, #2
 8002740:	461a      	mov	r2, r3
 8002742:	4623      	mov	r3, r4
 8002744:	4628      	mov	r0, r5
 8002746:	4631      	mov	r1, r6
 8002748:	f7fd fd62 	bl	8000210 <__aeabi_uldivmod>
 800274c:	4603      	mov	r3, r0
 800274e:	460c      	mov	r4, r1
 8002750:	461a      	mov	r2, r3
 8002752:	4b32      	ldr	r3, [pc, #200]	; (800281c <UART_SetConfig+0x6f4>)
 8002754:	fba3 1302 	umull	r1, r3, r3, r2
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	2164      	movs	r1, #100	; 0x64
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	3332      	adds	r3, #50	; 0x32
 8002766:	4a2d      	ldr	r2, [pc, #180]	; (800281c <UART_SetConfig+0x6f4>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002772:	4498      	add	r8, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	469b      	mov	fp, r3
 8002778:	f04f 0c00 	mov.w	ip, #0
 800277c:	46d9      	mov	r9, fp
 800277e:	46e2      	mov	sl, ip
 8002780:	eb19 0309 	adds.w	r3, r9, r9
 8002784:	eb4a 040a 	adc.w	r4, sl, sl
 8002788:	4699      	mov	r9, r3
 800278a:	46a2      	mov	sl, r4
 800278c:	eb19 090b 	adds.w	r9, r9, fp
 8002790:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002794:	f04f 0100 	mov.w	r1, #0
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027a8:	4689      	mov	r9, r1
 80027aa:	4692      	mov	sl, r2
 80027ac:	eb1b 0509 	adds.w	r5, fp, r9
 80027b0:	eb4c 060a 	adc.w	r6, ip, sl
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4619      	mov	r1, r3
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	f04f 0400 	mov.w	r4, #0
 80027c6:	0094      	lsls	r4, r2, #2
 80027c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027cc:	008b      	lsls	r3, r1, #2
 80027ce:	461a      	mov	r2, r3
 80027d0:	4623      	mov	r3, r4
 80027d2:	4628      	mov	r0, r5
 80027d4:	4631      	mov	r1, r6
 80027d6:	f7fd fd1b 	bl	8000210 <__aeabi_uldivmod>
 80027da:	4603      	mov	r3, r0
 80027dc:	460c      	mov	r4, r1
 80027de:	461a      	mov	r2, r3
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <UART_SetConfig+0x6f4>)
 80027e2:	fba3 1302 	umull	r1, r3, r3, r2
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2164      	movs	r1, #100	; 0x64
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	3332      	adds	r3, #50	; 0x32
 80027f4:	4a09      	ldr	r2, [pc, #36]	; (800281c <UART_SetConfig+0x6f4>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	f003 020f 	and.w	r2, r3, #15
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4442      	add	r2, r8
 8002806:	609a      	str	r2, [r3, #8]
}
 8002808:	e7ff      	b.n	800280a <UART_SetConfig+0x6e2>
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002814:	40011000 	.word	0x40011000
 8002818:	40011400 	.word	0x40011400
 800281c:	51eb851f 	.word	0x51eb851f

08002820 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	601a      	str	r2, [r3, #0]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6892      	ldr	r2, [r2, #8]
 800287e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6852      	ldr	r2, [r2, #4]
 8002888:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	429a      	cmp	r2, r3
 8002892:	d103      	bne.n	800289c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	1e5a      	subs	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028c6:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <xTaskIncrementTick+0x144>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 808d 	bne.w	80029ea <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028d0:	4b4c      	ldr	r3, [pc, #304]	; (8002a04 <xTaskIncrementTick+0x148>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3301      	adds	r3, #1
 80028d6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80028d8:	4a4a      	ldr	r2, [pc, #296]	; (8002a04 <xTaskIncrementTick+0x148>)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d11f      	bne.n	8002924 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80028e4:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <xTaskIncrementTick+0x14c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <xTaskIncrementTick+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	e7fe      	b.n	8002900 <xTaskIncrementTick+0x44>
 8002902:	4b41      	ldr	r3, [pc, #260]	; (8002a08 <xTaskIncrementTick+0x14c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <xTaskIncrementTick+0x150>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a3e      	ldr	r2, [pc, #248]	; (8002a08 <xTaskIncrementTick+0x14c>)
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4a3e      	ldr	r2, [pc, #248]	; (8002a0c <xTaskIncrementTick+0x150>)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <xTaskIncrementTick+0x154>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3301      	adds	r3, #1
 800291c:	4a3c      	ldr	r2, [pc, #240]	; (8002a10 <xTaskIncrementTick+0x154>)
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	f000 f8de 	bl	8002ae0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002924:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <xTaskIncrementTick+0x158>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	429a      	cmp	r2, r3
 800292c:	d348      	bcc.n	80029c0 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800292e:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <xTaskIncrementTick+0x14c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d104      	bne.n	8002942 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002938:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <xTaskIncrementTick+0x158>)
 800293a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800293e:	601a      	str	r2, [r3, #0]
                    break;
 8002940:	e03e      	b.n	80029c0 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <xTaskIncrementTick+0x14c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	429a      	cmp	r2, r3
 8002958:	d203      	bcs.n	8002962 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800295a:	4a2e      	ldr	r2, [pc, #184]	; (8002a14 <xTaskIncrementTick+0x158>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002960:	e02e      	b.n	80029c0 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3304      	adds	r3, #4
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff ff7e 	bl	8002868 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	3318      	adds	r3, #24
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff75 	bl	8002868 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	2201      	movs	r2, #1
 8002984:	409a      	lsls	r2, r3
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <xTaskIncrementTick+0x15c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4313      	orrs	r3, r2
 800298c:	4a22      	ldr	r2, [pc, #136]	; (8002a18 <xTaskIncrementTick+0x15c>)
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <xTaskIncrementTick+0x160>)
 800299e:	441a      	add	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f7ff ff3a 	bl	8002820 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <xTaskIncrementTick+0x164>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d3b9      	bcc.n	800292e <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80029ba:	2301      	movs	r3, #1
 80029bc:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029be:	e7b6      	b.n	800292e <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <xTaskIncrementTick+0x164>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c6:	4915      	ldr	r1, [pc, #84]	; (8002a1c <xTaskIncrementTick+0x160>)
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d901      	bls.n	80029dc <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 80029d8:	2301      	movs	r3, #1
 80029da:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <xTaskIncrementTick+0x168>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e004      	b.n	80029f4 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80029ea:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <xTaskIncrementTick+0x16c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	4a0d      	ldr	r2, [pc, #52]	; (8002a28 <xTaskIncrementTick+0x16c>)
 80029f2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80029f4:	697b      	ldr	r3, [r7, #20]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200000b0 	.word	0x200000b0
 8002a04:	20000098 	.word	0x20000098
 8002a08:	20000090 	.word	0x20000090
 8002a0c:	20000094 	.word	0x20000094
 8002a10:	200000a8 	.word	0x200000a8
 8002a14:	200000ac 	.word	0x200000ac
 8002a18:	2000009c 	.word	0x2000009c
 8002a1c:	2000002c 	.word	0x2000002c
 8002a20:	20000028 	.word	0x20000028
 8002a24:	200000a4 	.word	0x200000a4
 8002a28:	200000a0 	.word	0x200000a0

08002a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a32:	4b26      	ldr	r3, [pc, #152]	; (8002acc <vTaskSwitchContext+0xa0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a3a:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <vTaskSwitchContext+0xa4>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a40:	e03e      	b.n	8002ac0 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <vTaskSwitchContext+0xa4>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a48:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <vTaskSwitchContext+0xa8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002a56:	7afb      	ldrb	r3, [r7, #11]
 8002a58:	f1c3 031f 	rsb	r3, r3, #31
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	491e      	ldr	r1, [pc, #120]	; (8002ad8 <vTaskSwitchContext+0xac>)
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <vTaskSwitchContext+0x5a>
        __asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	e7fe      	b.n	8002a84 <vTaskSwitchContext+0x58>
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4a11      	ldr	r2, [pc, #68]	; (8002ad8 <vTaskSwitchContext+0xac>)
 8002a92:	4413      	add	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d104      	bne.n	8002ab6 <vTaskSwitchContext+0x8a>
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a07      	ldr	r2, [pc, #28]	; (8002adc <vTaskSwitchContext+0xb0>)
 8002abe:	6013      	str	r3, [r2, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	200000b0 	.word	0x200000b0
 8002ad0:	200000a4 	.word	0x200000a4
 8002ad4:	2000009c 	.word	0x2000009c
 8002ad8:	2000002c 	.word	0x2000002c
 8002adc:	20000028 	.word	0x20000028

08002ae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <prvResetNextTaskUnblockTime+0x30>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <prvResetNextTaskUnblockTime+0x34>)
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002af4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002af6:	e005      	b.n	8002b04 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <prvResetNextTaskUnblockTime+0x30>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <prvResetNextTaskUnblockTime+0x34>)
 8002b02:	6013      	str	r3, [r2, #0]
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000090 	.word	0x20000090
 8002b14:	200000ac 	.word	0x200000ac
	...

08002b20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <pxCurrentTCBConst2>)
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	6808      	ldr	r0, [r1, #0]
 8002b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2a:	f380 8809 	msr	PSP, r0
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f380 8811 	msr	BASEPRI, r0
 8002b3a:	4770      	bx	lr
 8002b3c:	f3af 8000 	nop.w

08002b40 <pxCurrentTCBConst2>:
 8002b40:	20000028 	.word	0x20000028
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
	...

08002b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b50:	f3ef 8009 	mrs	r0, PSP
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <pxCurrentTCBConst>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	f01e 0f10 	tst.w	lr, #16
 8002b60:	bf08      	it	eq
 8002b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6a:	6010      	str	r0, [r2, #0]
 8002b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002b74:	f380 8811 	msr	BASEPRI, r0
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f7ff ff54 	bl	8002a2c <vTaskSwitchContext>
 8002b84:	f04f 0000 	mov.w	r0, #0
 8002b88:	f380 8811 	msr	BASEPRI, r0
 8002b8c:	bc09      	pop	{r0, r3}
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	6808      	ldr	r0, [r1, #0]
 8002b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b96:	f01e 0f10 	tst.w	lr, #16
 8002b9a:	bf08      	it	eq
 8002b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ba0:	f380 8809 	msr	PSP, r0
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	f3af 8000 	nop.w

08002bb0 <pxCurrentTCBConst>:
 8002bb0:	20000028 	.word	0x20000028
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop

08002bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002bd0:	f7ff fe74 	bl	80028bc <xTaskIncrementTick>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <SysTick_Handler+0x3c>)
 8002bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	e000ed04 	.word	0xe000ed04

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	4e0d      	ldr	r6, [pc, #52]	; (8002c30 <__libc_init_array+0x38>)
 8002bfc:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002bfe:	1ba4      	subs	r4, r4, r6
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	2500      	movs	r5, #0
 8002c04:	42a5      	cmp	r5, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	4e0b      	ldr	r6, [pc, #44]	; (8002c38 <__libc_init_array+0x40>)
 8002c0a:	4c0c      	ldr	r4, [pc, #48]	; (8002c3c <__libc_init_array+0x44>)
 8002c0c:	f000 f820 	bl	8002c50 <_init>
 8002c10:	1ba4      	subs	r4, r4, r6
 8002c12:	10a4      	asrs	r4, r4, #2
 8002c14:	2500      	movs	r5, #0
 8002c16:	42a5      	cmp	r5, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c20:	4798      	blx	r3
 8002c22:	3501      	adds	r5, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c2a:	4798      	blx	r3
 8002c2c:	3501      	adds	r5, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	08002c90 	.word	0x08002c90
 8002c34:	08002c90 	.word	0x08002c90
 8002c38:	08002c90 	.word	0x08002c90
 8002c3c:	08002c94 	.word	0x08002c94

08002c40 <memset>:
 8002c40:	4402      	add	r2, r0
 8002c42:	4603      	mov	r3, r0
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d100      	bne.n	8002c4a <memset+0xa>
 8002c48:	4770      	bx	lr
 8002c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4e:	e7f9      	b.n	8002c44 <memset+0x4>

08002c50 <_init>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	bf00      	nop
 8002c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c56:	bc08      	pop	{r3}
 8002c58:	469e      	mov	lr, r3
 8002c5a:	4770      	bx	lr

08002c5c <_fini>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	bf00      	nop
 8002c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c62:	bc08      	pop	{r3}
 8002c64:	469e      	mov	lr, r3
 8002c66:	4770      	bx	lr
